---
layout: page
title: "Эффективное использование C++. 55 верных способов улучшить структуру и код ваших программ"
prev: OEBPS/section65.xhtml
next: OEBPS/section67.xhtml
book_path: books/effektivnoe-ispoljzovanie-c--vernih-sposobov-uluchshitj-strukturu-i-kod-vashih-programm_oeb/
---
{% include JB/setup %}
{% raw %}
<div>

    <div class="calibre">
      <div class="title1">
        <h2 class="calibre3">Резюме</h2>
      </div>
      <p class="calibre2">Из этого правила вы должны извлечь одну практическую рекомендацию: размышляя над тем, как решить стоящую перед вами задачу, имеет смысл рассматривать не только виртуальные функции. Вот краткий перечень предложенных альтернатив:</p>
      <p class="calibre2">• Применение идиомы <strong class="calibre4">невиртуального интерфейса</strong> (NVI), варианта паттерна проектирования «Шаблонный Метод». Смысл ее в том, чтобы обернуть открытыми невиртуальными функциями-членами вызовы менее доступных виртуальных функций.</p>
      <p class="calibre2">• Замена виртуальных функций <strong class="calibre4">членами данных – указателями на функции.</strong> Это упрощенное проявление паттерна проектирования «Стратегия».</p>
      <p class="calibre2">• Замена виртуальных функций <strong class="calibre4">членами данных – tr1::function.</strong> Это позволяет применять любую вызываемую сущность, сигнатура которой совместима с той, что вам нужна. Это тоже форма паттерна проектирования «Стратегия».</p>
      <p class="calibre2">• Замена виртуальных функций из одной иерархии <strong class="calibre4">виртуальными функциями из другой иерархии.</strong> Это традиционная реализация паттерна проектирования «Стратегия».</p>
      <p class="calibre2">Это не исчерпывающий список альтернатив виртуальным функциям, но его должно хватить, чтобы убедить вас в том, что такие альтернативы <em class="calibre5">существуют.</em> Более того, из сравнения их достоинств и недостатков должны быть ясно, что рассматривать их стоит.</p>
      <p class="calibre2">Чтобы не застрять в колее на дороге объектно-ориентированного проектирования, стоит время от времени резко поворачивать руль. Путей много. Потратьте время на знакомство с ними.</p>
      <div class="subtitle">
        <p class="subtitle1">
          <strong class="calibre4">
            <em class="calibre5">Что следует помнить</em>
          </strong>
        </p>
      </div>
      <p class="calibre2">• К числу альтернатив виртуальным функциям относятся идиома NVI и различные формы паттерна проектирования «Стратегия». Идиома NVI сама по себе – это пример реализации паттерна «Шаблонный Метод».</p>
      <p class="calibre2">• Недостаток переноса функциональности из функций-членов вовне класса заключается в том, что функциям-нечленам недостает прав доступа к закрытым членам класса.</p>
      <p class="calibre2">• Объекты tr1::function работают как обобщенные указатели на функции. Такие объекты поддерживают все вызываемые сущности, совместимые с сигнатурой целевой функции.</p>
    </div>
  </div>

{% endraw %}

