---
layout: page
title: "Эффективное использование C++. 55 верных способов улучшить структуру и код ваших программ"
prev: OEBPS/section91.xhtml
next: OEBPS/section93.xhtml
book_path: books/effektivnoe-ispoljzovanie-c--vernih-sposobov-uluchshitj-strukturu-i-kod-vashih-programm_oeb/
---
{% include JB/setup %}
{% raw %}
<div>

    <div class="calibre">
      <div class="title1">
        <h2 class="calibre3">Правило 55: Познакомьтесь с Boost</h2>
      </div>
      <p class="calibre2">Вы ищете высококачественные библиотеки с открытым кодом, независимые от платформ и компиляторов? Boost к вашим услугам. Вы хотели бы присоединиться к сообществу амбициозных, талантливых программистов на C++, работающих в русле современных представлений о проектировании и реализации библиотек? Boost к вашим услугам. Хотите одним глазком взглянуть на то, как будет выглядеть C++ в будущем? Boost к вашим услугам.</p>
      <p class="calibre2">Проект Boost – это одновременно сообщество разработчиков и набор свободно распространяемых библиотек на C++. Его Web-сайт находится по адресу <a href="http://boost.org/" class="calibre6">http://boost.org</a>. Сделайте закладку немедленно!</p>
      <p class="calibre2">Существует множество организаций и Web-сайтов, посвященных C++, но Boost обладает двумя уникальными особенностями. Во-первых, он имеет тесные связи с комитетом по стандартизации C++ и способен влиять на его решения. Boost был основан членами этого комитета, и участники одного часто являются также членами другого. Вдобавок к этому Boost всегда провозглашал одной из своих целей служить платформой для тестирования средств, которые могут быть добавлены в Стандарт C++. Одним из результатов таких отношений стало то, что из 14 новых библиотек, предложенных для включения в C++ в отчете TR1 (см. правило 54), более двух третей основаны на работе, проделанной в Boost.</p>
      <p class="calibre2">Вторая особенность Boost – процедура приема библиотек. В ее основе лежит публичное обсуждение исходного текста всеми заинтересованными лицами. Если вы хотите предложить библиотеку для Boost, начинайте с отправки письма в список рассылки для разработчиков Boost, чтобы оценить, насколько велик интерес к вашей работе, и инициировать процесс ее предварительного обсуждения. С этого начинается цикл, который на Web-сайте называется «Обсудить, улучшить, подать на рассмотрение снова. Повторять, пока не будет достигнут удовлетворительный результат».</p>
      <p class="calibre2">В конечном итоге вы решаете, что ваша библиотека готова для формального внесения на рассмотрение. Менеджер по приемке подтверждает, что она удовлетворяет минимальным требованиям Boost. Например, она должна компилироваться как минимум двумя компиляторами (чтобы продемонстрировать переносимость). Вы также должны подтвердить, что библиотека может быть доступна на приемлемых условиях лицензирования (например, быть бесплатна для коммерческого и некоммерческого использования). Затем ваше предложение предоставляется на официальное рассмотрение сообщества Boost. Во время периода рассмотрения добровольцы изучают представленные вами материалы (исходный код, проектную документацию, пользовательскую документацию и т. п.) и задаются следующими вопросами:</p>
      <p class="calibre2">• Насколько хороши проект и реализация?</p>
      <p class="calibre2">• Является ли код переносимым между компиляторами и операционными системами?</p>
      <p class="calibre2">• Будет ли библиотека использоваться теми, для кого предназначена, то есть людьми, работающими в соответствующей предметной области?</p>
      <p class="calibre2">• Является ли документация ясной, полной и точной?</p>
      <p class="calibre2">Замечания отправляются в список рассылки Boost, чтобы все могли с ними ознакомиться и прокомментировать. В конце периода обсуждения менеджер по приемке решает, является ли ваша библиотека принятой, условно принятой либо отвергнутой.</p>
      <p class="calibre2">Открытое обсуждение позволяет оградить Boost от плохо написанных библиотек, но также помогает авторам уяснить для себя, что входит в понятие проектирования, реализации и документирования кросс-платформенных библиотек промышленного уровня. Для многих библиотек требуется более одного официального рассмотрения, прежде чем их сочтут достойными одобрения.</p>
      <p class="calibre2">Boost содержит десятки библиотек, и к ним постоянно добавляются новые. Время от времени та или иная библиотека исключается, как правило, потому, что ее функциональность перекрывается более новой библиотекой, предоставляющей более широкий диапазон возможностей или лучше спроектированной (то есть более гибкой или эффективной).</p>
      <p class="calibre2">Библиотеки сильно отличаются по размерам и областям применения. На одном полюсе находятся библиотеки, концептуально требующие лишь нескольких строк кода (но обычно после добавления обработки ошибок и обеспечения переносимости они становятся намного длиннее). Одной из таких библиотек является <strong class="calibre4">Conversion,</strong> которая представляет безопасные и более удобные операторы приведения. Например, входящая в нее функция numeric_cast возбуждает исключение, если преобразование одного числового типа в другой приводит к переполнению, потере значимости либо другим подобным проблемам, а функция lexical_cast позволяет привести любой тип, поддерживающий operator&lt;&lt;, к строке, что очень удобно для диагностики, протоколирования и т. п. Другую крайность составляют библиотеки, представляющие настолько широкие возможности, что им можно посвящать целые книги. Это относится к библиотеке <strong class="calibre4">Boost Graph Library</strong> (для программирования произвольных структур графов), и <strong class="calibre4">Boost MPL Library</strong> («библиотека метапрограммирования»).</p>
      <p class="calibre2">Библиотеки Boost посвящены самым разным темам, сгрупированным в несколько основных категорий:</p>
      <p class="calibre2">• <strong class="calibre4">Обработка строк и текстов.</strong> Сюда входят библиотеки для безопасного по отношению к типам форматирования (по аналогии с printf), работы с регулярными выражениями (легли в основу соответствующей функциональности TR1 – см. правило 54), а также лексического и грамматического анализа.</p>
      <p class="calibre2">• <strong class="calibre4">Контейнеры.</strong> Сюда входят библиотеки для работы с массивами фиксированной длины с STL-подобным интерфейсом (см. правило 54), битовыми наборами произвольной длины, а также многомерными массивами.</p>
      <p class="calibre2">• <strong class="calibre4">Функциональные объекты и высокоуровневое программирование.</strong> Эта категория объединяет несколько библиотек, которые лежат в основе функциональности TR1. Одной из наиболее интересных является библиотека Lambda, которая настолько упрощает создание функциональных объектов на лету, что вы вряд ли даже осознаете, что происходит:</p>
      <p class="empty-line"> </p>
      <p class="calibre2">
        <code class="calibre7">using namespace boost::lambada; // включить средства</code>
      </p>
      <p class="calibre2">
        <code class="calibre7">// из библиотеки Lambda</code>
      </p>
      <p class="calibre2">
        <code class="calibre7">std::vector &lt;int&gt; v;</code>
      </p>
      <p class="calibre2">
        <code class="calibre7">...</code>
      </p>
      <p class="calibre2">
        <code class="calibre7">std::for_each(v.begin(), v_end(), // для каждого элемента x</code>
      </p>
      <p class="calibre2">
        <code class="calibre7">std::cout &lt;&lt;_1*2+10&lt;&lt;”\n”); // в v напечатать x*2+10;</code>
      </p>
      <p class="calibre2">
        <code class="calibre7">// “_1” – место для</code>
      </p>
      <p class="calibre2">
        <code class="calibre7">// подстановки текущего</code>
      </p>
      <p class="calibre2">
        <code class="calibre7">// элемента</code>
      </p>
      <p class="empty-line"> </p>
      <p class="calibre2">• <strong class="calibre4">Обобщенное программирование.</strong> Сюда входит широкий набор классов-характеристик (см. правило 47).</p>
      <p class="calibre2">• <strong class="calibre4">Метапрограммирование шаблонов</strong> (TMP – см. правило 48). Включает библиотеку утверждений (assertions) времени компиляции, а также библиотеку Boost MPL Library. Среди прочего она поддерживает STL-подобные структуры данных, описывающие сущности времени компиляции, к примеру <em class="calibre5">типы:</em></p>
      <p class="empty-line"> </p>
      <p class="calibre2">
        <code class="calibre7">// создать контейнер времени компиляции, подобный списку, содержащий</code>
      </p>
      <p class="calibre2">
        <code class="calibre7">// три типа (float, double и long double), и назвать его “floats”</code>
      </p>
      <p class="calibre2">
        <code class="calibre7">typedef boost::mpl::list&lt;float, double, long double&gt; floats;</code>
      </p>
      <p class="calibre2">
        <code class="calibre7">// создать новый контейнер времени компиляции, содержащий типы</code>
      </p>
      <p class="calibre2">
        <code class="calibre7">// из “floats”, плюс “int”, вставленный в начало; назвать новый</code>
      </p>
      <p class="calibre2">
        <code class="calibre7">// контейнер “types”</code>
      </p>
      <p class="calibre2">
        <code class="calibre7">typedef boost::mpl::push_front&lt;floats, int&gt;::type types;</code>
      </p>
      <p class="empty-line"> </p>
      <p class="calibre2">Такие контейнеры типов (их часто называют <em class="calibre5">спискамии типов – typelists,</em> хотя они могут быть основаны не только на классе mpl::list, но и на mpl::vector) открывают возможность написания широкого диапазона мощных и полезных TMP-приложений.</p>
      <p class="calibre2">• <strong class="calibre4">Математика и численные методы.</strong> Сюда входят библиотеки для работы с рациональными числами, поиска наибольшего общего делителя и наименьшего общего кратного, а также для операций со случайными числами (еще одна библиотека, оказавшая влияние на включение соответствующей функциональности в отчет TR1).</p>
      <p class="calibre2">• <strong class="calibre4">Корректность и тестирование.</strong> Сюда входят библиотеки для формализации неявных шаблонных интерфейсов (см. правило 41) и поддержки программирования на основе методологии «тестирования с самого начала».</p>
      <p class="calibre2">• <strong class="calibre4">Структуры данных.</strong> Сюда отнесены библиотеки для поддержки безопасных по отношению к типам объединений (то есть «любых» неоднородных типов) и библиотека кортежей, которая нашла применение в TR1.</p>
      <p class="calibre2">• <strong class="calibre4">Межъязыковая поддержка.</strong> Содержит библиотеку, обеспечивающую «бесшовное» взаимодействие между программами, написанными на языках C++ и Python.</p>
      <p class="calibre2">• <strong class="calibre4">Память.</strong> Сюда входит библиотека Pool для высокопроизводительных распределителей памяти блоками фиксированного размера (см. правило 50), а также целый ряд «интеллектуальных» указателей (см. правило 13), включая те, что вошли в TR1 (но не только). Одними из таких «интеллектуальных» указателей, не включенных в TR1, являются scoped_array – похожая на auto_ptr конструкция для динамически выделенных массивов; в правиле 44 приведен пример его использования.</p>
      <p class="calibre2">• <strong class="calibre4">Разное.</strong> К этой категории отнесены библиотеки для вычисления CRC, манипуляций с датами и временем, а также прохода по файловой системе.</p>
      <p class="calibre2">Это всего лишь небольшая часть библиотек, которые имеются на сайте проекта Boost. Список далеко не полный.</p>
      <p class="calibre2">Boost предлагает библиотеки для решения самых разных задач, но они, конечно, не покрывают всех тем, которыми занимаются программисты. Так, например, нет библиотеки для разработки графических интерфейсов, как нет и библиотек для доступа к базам данных. По крайней мере, их нет сейчас (когда я пишу эти строки). Но к тому времени, когда вы будете читать эту книгу, они могут появиться. Единственный способ узнать точно – зайти на сайт и проверить. Надеюсь, вы сделаете это прямо сейчас: <a href="http://boost.org/" class="calibre6">http://boost.org</a>. Даже если вы не найдете там в точности того, что ищете, все равно обязательно обнаружите что-то интересное для себя.</p>
      <div class="subtitle">
        <p class="subtitle1">
          <strong class="calibre4">
            <em class="calibre5">Что следует помнить</em>
          </strong>
        </p>
      </div>
      <p class="calibre2">• Boost – это сообщество и Web-сайт для разработки бесплатных библиотек на C++ с открытыми исходными текстами, подвергающихся публичному обсуждению. Boost оказывает немалое влияние на процедуру стандартизации C++.</p>
      <p class="calibre2">• Boost предоставляет реализацию многих компонентов TR1, но – кроме того – и множество других библиотек.</p>
    </div>
  </div>

{% endraw %}

