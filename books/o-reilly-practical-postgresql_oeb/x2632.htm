---
layout: page
title: "Unknown"
prev: x1428.htm
next: x4636.htm
book_path: books/o-reilly-practical-postgresql_oeb/
---
{% include JB/setup %}
{% raw %}
<div>
<div class="NAVHEADER"><table summary="Header navigation table" width="100%" border="0" cellpadding="0" cellspacing="0" class="calibre"><tr class="calibre1"><th colspan="3" class="calibre2">Practical PostgreSQL</th></tr><tr class="calibre1"><td width="10%" valign="bottom" class="calibre3"><a href="x1428.htm" accesskey="P">Prev</a></td><td width="80%" valign="bottom" class="calibre4">Chapter 3. Understanding SQL</td><td width="10%" valign="bottom" class="calibre5"><a href="x4636.htm" accesskey="N">Next</a></td></tr></table><hr width="100%" class="calibre6"/></div><div class="NAVHEADER"><h1 class="calibre7"><a name="DATATYPES" class="calibre8">Data Types</a></h1><p class="calibre9">SQL is considered a <span><i class="EMPHASIS">strongly typed language</i></span>. This means that any piece of data represented by
    PostgreSQL has an associated data type, even if it is not plainly obvious. A data value's type both defines and constrains
    the kinds of operations which may be performed on it.</p><p class="calibre9">Not only is every piece of data associated with a type, but types play a large part in the construction of tables.  As
    stated in <a href="x1277.htm">the Section called <i class="EMPHASIS">Introduction to Relational Databases</i></a>," tables are made up of one or more columns. These columns must,
    in addition to having a name, have a specific data type.</p><div class="NAVHEADER"><blockquote class="NOTE"><p class="calibre9"><b class="calibre10">Note: </b>While PostgreSQL provides a wide variety of built-in data types, you also have the option to add new data types to
      PostgreSQL using the <tt class="REPLACEABLE">CREATE TYPE</tt> command. See the reference entry on
      <tt class="REPLACEABLE">CREATE TYPE</tt> for more on this command.</p></blockquote></div><p class="calibre9"><a href="x2632.htm#POSTGRESQLSUPPORTEDDATATYPES">Table 3-10</a> lists the data types officially supported by PostgreSQL, as well as any
    PostgreSQL recognized <span><i class="EMPHASIS">aliases</i></span> (alternative names that are identical in connotation). There are many
    other internal (meaning they are no longer intended for normal use) or deprecated (outdated, and discouraged) data types
    available that are unlisted.</p><p class="calibre9">Additionally, while most of the data types implemented in PostgreSQL are directly derived from SQL standards, there are
    some actively maintained data types that are non-standard (such as the geometric and spacial types).  Therefore, you will not always be able to find equivalent types on other SQL-capable database management systems.</p><div class="NAVHEADER"><a name="POSTGRESQLSUPPORTEDDATATYPES"></a><p class="calibre9"><b class="calibre10">Table 3-10. PostgreSQL supported data types</b></p><table border="1" width="100%" class="calibre"><thead class="calibre11"><tr class="calibre12"><th width="3" valign="TOP" class="calibre13"><p class="calibre9">Category</p></th><th width="8" valign="TOP" class="calibre13"><p class="calibre9">Data type</p></th><th width="9" valign="TOP" class="calibre13"><p class="calibre9">Description</p></th><th width="7" valign="TOP" class="calibre13"><p class="calibre9">Standardization</p></th></tr></thead><tbody class="calibre14"><tr class="calibre12"><td rowspan="3" width="3" valign="TOP" class="calibre15"><p class="calibre9"><span><i class="EMPHASIS">Boolean and binary types</i></span></p></td><td width="8" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE">boolean</tt>, <tt class="REPLACEABLE">bool</tt></p></td><td width="9" valign="TOP" class="calibre15"><p class="calibre9">A single true or false value.</p></td><td width="7" valign="TOP" class="calibre15"><p class="calibre9">SQL99</p></td></tr><tr class="calibre12"><td width="8" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE">bit(</tt><tt class="REPLACEABLE"><i class="EMPHASIS">n</i></tt> )</p></td><td width="9" valign="TOP" class="calibre15"><p class="calibre9">An <tt class="REPLACEABLE"><i class="EMPHASIS">n</i></tt> -length bit string (exactly <tt class="REPLACEABLE"><i class="EMPHASIS">n</i></tt> binary bits).</p></td><td width="7" valign="TOP" class="calibre15"><p class="calibre9">SQL92</p></td></tr><tr class="calibre12"><td width="8" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE">bit varying(</tt><tt class="REPLACEABLE"><i class="EMPHASIS">n</i></tt> ), <tt class="REPLACEABLE">varbit(</tt><tt class="REPLACEABLE"><i class="EMPHASIS">n</i></tt> )</p></td><td width="9" valign="TOP" class="calibre15"><p class="calibre9">A variable <tt class="REPLACEABLE"><i class="EMPHASIS">n</i></tt> -length bit string (up to <tt class="REPLACEABLE"><i class="EMPHASIS">n</i></tt> binary bits)</p></td><td width="7" valign="TOP" class="calibre15"><p class="calibre9">SQL92</p></td></tr><tr class="calibre12"><td rowspan="3" width="3" valign="TOP" class="calibre15"><p class="calibre9"><span><i class="EMPHASIS">Character types</i></span></p></td><td width="8" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE">character (</tt><tt class="REPLACEABLE"><i class="EMPHASIS">n</i></tt> ), <tt class="REPLACEABLE">char(</tt><tt class="REPLACEABLE"><i class="EMPHASIS">n</i></tt> )</p></td><td width="9" valign="TOP" class="calibre15"><p class="calibre9">A fixed <tt class="REPLACEABLE"><i class="EMPHASIS">n</i></tt> -length character string.</p></td><td width="7" valign="TOP" class="calibre15"><p class="calibre9">SQL89</p></td></tr><tr class="calibre12"><td width="8" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE">character varying(</tt><tt class="REPLACEABLE"><i class="EMPHASIS">n</i></tt> ), <tt class="REPLACEABLE">varchar(</tt><tt class="REPLACEABLE"><i class="EMPHASIS">n</i></tt> )</p></td><td width="9" valign="TOP" class="calibre15"><p class="calibre9">A variable length character string of up to <tt class="REPLACEABLE"><i class="EMPHASIS">n</i></tt> characters.</p></td><td width="7" valign="TOP" class="calibre15"><p class="calibre9">SQL92</p></td></tr><tr class="calibre12"><td width="8" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE">text</tt></p></td><td width="9" valign="TOP" class="calibre15"><p class="calibre9">A variable length character string, of unlimited length.</p></td><td width="7" valign="TOP" class="calibre15"><p class="calibre9">PostgreSQL-specific</p></td></tr><tr class="calibre12"><td rowspan="8" width="3" valign="TOP" class="calibre15"><p class="calibre9"><span><i class="EMPHASIS">Numeric types</i></span></p></td><td width="8" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE">smallint</tt>, <tt class="REPLACEABLE">int2</tt></p></td><td width="9" valign="TOP" class="calibre15"><p class="calibre9">A signed 2-byte integer.</p></td><td width="7" valign="TOP" class="calibre15"><p class="calibre9">SQL89</p></td></tr><tr class="calibre12"><td width="8" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE">integer</tt>, <tt class="REPLACEABLE">int</tt>, <tt class="REPLACEABLE">int4</tt></p></td><td width="9" valign="TOP" class="calibre15"><p class="calibre9">A signed, fixed-precision 4-byte number.</p></td><td width="7" valign="TOP" class="calibre15"><p class="calibre9">SQL92</p></td></tr><tr class="calibre12"><td width="8" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE">bigint</tt>, <tt class="REPLACEABLE">int8</tt></p></td><td width="9" valign="TOP" class="calibre15"><p class="calibre9">A signed 8-byte integer, up to 18 digits in length.</p></td><td width="7" valign="TOP" class="calibre15"><p class="calibre9">PostgreSQL-specific</p></td></tr><tr class="calibre12"><td width="8" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE">real</tt>, <tt class="REPLACEABLE">float4</tt></p></td><td width="9" valign="TOP" class="calibre15"><p class="calibre9">A 4-byte floating-point number.</p></td><td width="7" valign="TOP" class="calibre15"><p class="calibre9">SQL89</p></td></tr><tr class="calibre12"><td width="8" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE">double precision</tt>, <tt class="REPLACEABLE">float8</tt>, <tt class="REPLACEABLE">float</tt></p></td><td width="9" valign="TOP" class="calibre15"><p class="calibre9">An 8-byte floating-point number.</p></td><td width="7" valign="TOP" class="calibre15"><p class="calibre9">SQL89</p></td></tr><tr class="calibre12"><td width="8" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE">numeric(</tt><tt class="REPLACEABLE"><i class="EMPHASIS">p</i></tt>,<tt class="REPLACEABLE"><i class="EMPHASIS">s</i></tt> ), <tt class="REPLACEABLE">decimal(</tt><tt class="REPLACEABLE"><i class="EMPHASIS">p</i></tt>,<tt class="REPLACEABLE"><i class="EMPHASIS">s</i></tt> )</p></td><td width="9" valign="TOP" class="calibre15"><p class="calibre9">An exact numeric type with arbitrary precision <tt class="REPLACEABLE"><i class="EMPHASIS">p</i></tt>, and scale <tt class="REPLACEABLE"><i class="EMPHASIS">s</i></tt>.</p></td><td width="7" valign="TOP" class="calibre15"><p class="calibre9">SQL99</p></td></tr><tr class="calibre12"><td width="8" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE">money</tt></p></td><td width="9" valign="TOP" class="calibre15"><p class="calibre9">A fixed precision, U.S.-style currency.</p></td><td width="7" valign="TOP" class="calibre15"><p class="calibre9">PostgreSQL-specific, deprecated.</p></td></tr><tr class="calibre12"><td width="8" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE">serial</tt></p></td><td width="9" valign="TOP" class="calibre15"><p class="calibre9">An auto-incrementing 4-byte integer.</p></td><td width="7" valign="TOP" class="calibre15"><p class="calibre9">PostgreSQL-specific</p></td></tr><tr class="calibre12"><td rowspan="5" width="3" valign="TOP" class="calibre15"><p class="calibre9"><span><i class="EMPHASIS">Date and time types</i></span></p></td><td width="8" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE">date</tt></p></td><td width="9" valign="TOP" class="calibre15"><p class="calibre9">The calendar date (day, month and year).</p></td><td width="7" valign="TOP" class="calibre15"><p class="calibre9">SQL92</p></td></tr><tr class="calibre12"><td width="8" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE">time</tt></p></td><td width="9" valign="TOP" class="calibre15"><p class="calibre9">The time of day.</p></td><td width="7" valign="TOP" class="calibre15"><p class="calibre9">SQL92</p></td></tr><tr class="calibre12"><td width="8" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE">time with time zone</tt></p></td><td width="9" valign="TOP" class="calibre15"><p class="calibre9">The time of day, including time zone information.</p></td><td width="7" valign="TOP" class="calibre15"><p class="calibre9">SQL92</p></td></tr><tr class="calibre12"><td width="8" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE">timestamp (includes time zone)</tt></p></td><td width="9" valign="TOP" class="calibre15"><p class="calibre9">Both the date and time.</p></td><td width="7" valign="TOP" class="calibre15"><p class="calibre9">SQL92</p></td></tr><tr class="calibre12"><td width="8" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE">interval</tt></p></td><td width="9" valign="TOP" class="calibre15"><p class="calibre9">An arbitrarily specified length of time.</p></td><td width="7" valign="TOP" class="calibre15"><p class="calibre9">SQL92</p></td></tr><tr class="calibre12"><td rowspan="7" width="3" valign="TOP" class="calibre15"><p class="calibre9"><span><i class="EMPHASIS">Geometric types</i></span></p></td><td width="8" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE">box</tt></p></td><td width="9" valign="TOP" class="calibre15"><p class="calibre9">A rectangular box in a 2D plane.</p></td><td width="7" valign="TOP" class="calibre15"><p class="calibre9">PostgreSQL-specific</p></td></tr><tr class="calibre12"><td width="8" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE">line</tt></p></td><td width="9" valign="TOP" class="calibre15"><p class="calibre9">An infinite line in a 2D plane.</p></td><td width="7" valign="TOP" class="calibre15"><p class="calibre9">PostgreSQL-specific</p></td></tr><tr class="calibre12"><td width="8" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE">lseg</tt></p></td><td width="9" valign="TOP" class="calibre15"><p class="calibre9">A finite line segment in a 2D plane.</p></td><td width="7" valign="TOP" class="calibre15"><p class="calibre9">PostgreSQL-specific</p></td></tr><tr class="calibre12"><td width="8" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE">circle</tt></p></td><td width="9" valign="TOP" class="calibre15"><p class="calibre9">A circle with center and radius.</p></td><td width="7" valign="TOP" class="calibre15"><p class="calibre9">PostgreSQL-specific</p></td></tr><tr class="calibre12"><td width="8" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE">path</tt></p></td><td width="9" valign="TOP" class="calibre15"><p class="calibre9">Open and closed geometric paths in a two-dimensional plane.</p></td><td width="7" valign="TOP" class="calibre15"><p class="calibre9">PostgreSQL-specific</p></td></tr><tr class="calibre12"><td width="8" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE">point</tt></p></td><td width="9" valign="TOP" class="calibre15"><p class="calibre9">geometric point in a 2D plane</p></td><td width="7" valign="TOP" class="calibre15"><p class="calibre9">PostgreSQL-specific</p></td></tr><tr class="calibre12"><td width="8" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE">polygon</tt></p></td><td width="9" valign="TOP" class="calibre15"><p class="calibre9">A closed geometric path in a 2D plane.</p></td><td width="7" valign="TOP" class="calibre15"><p class="calibre9">PostgreSQL-specific</p></td></tr><tr class="calibre12"><td rowspan="3" width="3" valign="TOP" class="calibre15"><p class="calibre9"><span><i class="EMPHASIS">Network types</i></span></p></td><td width="8" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE">cidr</tt></p></td><td width="9" valign="TOP" class="calibre15"><p class="calibre9">An IP network specification.</p></td><td width="7" valign="TOP" class="calibre15"><p class="calibre9">PostgreSQL-specific</p></td></tr><tr class="calibre12"><td width="8" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE">inet</tt></p></td><td width="9" valign="TOP" class="calibre15"><p class="calibre9">A network IP address, with optional subnet bits.</p></td><td width="7" valign="TOP" class="calibre15"><p class="calibre9">PostgreSQL-specific</p></td></tr><tr class="calibre12"><td width="8" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE">macaddr</tt></p></td><td width="9" valign="TOP" class="calibre15"><p class="calibre9">A MAC address (e.g., an Ethernet card's hardware address).</p></td><td width="7" valign="TOP" class="calibre15"><p class="calibre9">PostgreSQL-specific</p></td></tr><tr class="calibre12"><td rowspan="2" width="3" valign="TOP" class="calibre15"><p class="calibre9"><span><i class="EMPHASIS">System types</i></span></p></td><td width="8" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE">oid</tt></p></td><td width="9" valign="TOP" class="calibre15"><p class="calibre9">An object (row) identifier.</p></td><td width="7" valign="TOP" class="calibre15"><p class="calibre9">PostgreSQL-specific</p></td></tr><tr class="calibre12"><td width="8" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE">xid</tt></p></td><td width="9" valign="TOP" class="calibre15"><p class="calibre9">A transaction identifier.</p></td><td width="7" valign="TOP" class="calibre15"><p class="calibre9">PostgreSQL-specific</p></td></tr></tbody></table></div><p class="calibre9">Remaining true to theme, the following sections on data types will describe in further detail each of the most widely
    used and practical types. This book will not go into detail on the non-standard and/or more esoteric types, such as the
    geometric, network and bitwise types.  These sections include information on valid usage, storage considerations, input and output formats and general
    syntactic conventions.  Before we go much further on specific data types there are a couple of topics worth discussing,
    including the <tt class="REPLACEABLE">NULL</tt> keyword.</p><div class="NAVHEADER"><h2 class="SECT"><a name="NULLVALUES" class="calibre8">NULL Values</a></h2><p class="calibre9">Despite the previously discussed rule that a column can have
      only one data type and logically accept only that type,
      there is a value that <span><i class="EMPHASIS">all</i></span> columns can be defined
      as, no matter what their data type.  This is the value a column is set
      to when you use the SQL keyword <tt class="REPLACEABLE">NULL</tt>.
      Essentially, <tt class="REPLACEABLE">NULL</tt> has no data value,
      so it is not considered a type; it is a system value that indicates to
      the database that the field it is located within contains no value.
     The only exception to the rule that any column can contain a
     <tt class="REPLACEABLE">NULL</tt>
     is when the <tt class="REPLACEABLE">NOT NULL</tt>
      constraint is specified for a column.
     </p><p class="calibre9"><tt class="REPLACEABLE">NULL</tt> is often used in places
      where a value is optional. It can be a convenient way of omitting data
      without having to resort to strange or arbitrary conventions, such as
      storing negative values in an integer field to represent omitted data.
      While your system requirements may change over time, the connotation
      of <tt class="REPLACEABLE">NULL</tt> is always
      <tt class="REPLACEABLE">NULL</tt>.</p><p class="calibre9"><tt class="REPLACEABLE">NULL</tt> can be thought of as a
      meta-value: a value that represents a <span><i class="EMPHASIS">lack of a value</i></span>,
      which will <span><i class="EMPHASIS">never</i></span> be equivalent
      to a non-<tt class="REPLACEABLE">NULL</tt> value.  One problem
      often encountered when working with <tt class="REPLACEABLE">NULL</tt> values is that they are
      easily confused with empty character strings, which return a blank
      value to the client when selected.  The reason this can be confusing
      is that <tt class="REPLACEABLE">NULL</tt> values also return a blank value when selected; however, they
      are completely different than empty character strings and this must
      be understood in order to avoid creating faulty queries or code.  A
      character string column that contains a blank value still contains a
      string of characters, though the characters that compose the string
      are blank; thus, there is still a value in the column.  A <tt class="REPLACEABLE">NULL</tt> value
      represents the complete absence of value within the column, not that
      it is merely blank. </p><p class="calibre9">This is an important distinction, as the rules for SQL
      operations involving the <tt class="REPLACEABLE">NULL</tt> value
      are quite different than the rules for operations involving empty
      string values. This internal distinction is especially important in reference to
      <span><i class="EMPHASIS">joins</i></span>, which are discussed in <a href="c4890.htm">Chapter 4</a>.</p><p class="calibre9">The return of both <tt class="REPLACEABLE">NULL</tt> and empty 
      values is shown in <a href="x2632.htm#OBSERVINGNULLVALUES">Example 3-15</a>, which
      retrieves a set of five books from the <tt class="REPLACEABLE">books</tt> table.
      The first <tt class="REPLACEABLE">SELECT</tt> query shows that there appear
      to be two books which have been inserted without titles. Upon
      successive querying, however, it becomes clear that while neither have
      visible titles, one of the books has an <span><i class="EMPHASIS">empty</i></span>
      value for its title (<tt class="REPLACEABLE">id</tt> 100), while
      the other has a <tt class="REPLACEABLE">NULL</tt> value.</p><div class="NAVHEADER"><a name="OBSERVINGNULLVALUES"></a><p class="calibre9"><b class="calibre10">Example 3-15. Observing NULL values</b></p><pre class="SCREEN">booktown=# <tt class="REPLACEABLE"><b class="calibre10">SELECT id, title FROM books;</b></tt>
  id  |        title
------+---------------------
 7808 | The Shining
  156 | The Tell-Tale Heart
 4513 | Dune
  100 |
  101 |
(5 rows)

booktown=# <tt class="REPLACEABLE"><b class="calibre10">SELECT id, title FROM books WHERE title = '';</b></tt>
 id  | title
-----+-------
 100 |
(1 row)

booktown=# <tt class="REPLACEABLE"><b class="calibre10">SELECT id, title FROM books WHERE title IS NULL;</b></tt>
 id  | title
-----+-------
 101 |
(1 row)
</pre></div><p class="calibre9"><a href="x2632.htm#USINGNULLVALUES">Example 3-16</a> demonstrates a more practical
      (and likely) use of <tt class="REPLACEABLE">NULL</tt> in a table
      called <tt class="REPLACEABLE">editions</tt>, which relates a
      book's ISBN number to its publication date.</p><div class="NAVHEADER"><a name="USINGNULLVALUES"></a><p class="calibre9"><b class="calibre10">Example 3-16. Using NULL values</b></p><pre class="SCREEN">booktown=# <tt class="REPLACEABLE"><b class="calibre10">SELECT isbn, publication FROM editions;</b></tt>
    isbn    | publication
------------+-------------
 039480001X | 1957-03-01
 0394800753 | 1949-03-01
 0385121679 |
(3 rows)

booktown=# <tt class="REPLACEABLE"><b class="calibre10">SELECT isbn, publication FROM editions WHERE publication IS NULL;</b></tt>
    isbn    | publication
------------+-------------
 0385121679 |
(1 row)</pre></div><p class="calibre9"><tt class="REPLACEABLE">NULL</tt> might be used in this manner in order to represent books with editions that
      are not yet published, or for books whose publication date was unknown when entered into the database. It could be
      misleading to supply some arbitrarily illogical date for a book fitting either of these criteria, and in both cases,
      <tt class="REPLACEABLE">NULL</tt> makes sense as a solution.</p></div><div class="NAVHEADER"><h2 class="SECT"><a name="AEN3031" class="calibre8">Boolean Values</a></h2><p class="calibre9">A <span><i class="EMPHASIS">Boolean</i></span> value is a simple data structure which can only represent values of
      true or false. PostgreSQL supports the SQL99-defined <tt class="REPLACEABLE">boolean</tt> data type, with a 
      PostgreSQL-specific alias of <tt class="REPLACEABLE">bool</tt>.</p><p class="calibre9">Like all other data types, Boolean values can also be set to <tt class="REPLACEABLE">NULL</tt>.  If a Boolean is set to <tt class="REPLACEABLE">NULL</tt>, it will never be interpreted as either true or false; it
      will be interpreted as <tt class="REPLACEABLE">NULL</tt>.  This may seem obvious, but it is significant in situations where you may think to check for <tt class="REPLACEABLE">NULL</tt>
      Booleans by checking for false values (which won't work).  You must use <tt class="REPLACEABLE">IS NULL</tt> to check for <tt class="REPLACEABLE">NULL</tt> Booleans.  The ability to
      be true, false, or <tt class="REPLACEABLE">NULL</tt> (and its related rules regarding the designation of <tt class="REPLACEABLE">NULL</tt> as not being true or false) is known as
      three-valued logic.
      </p><p class="calibre9"><a href="x2632.htm#TRUEFALSEVALUES">Table 3-11</a> shows the valid constant values for a true or false state that are recognized by
      PostgreSQL.  Which convention you choose to employ is dependent solely on your own preference.  All variations of true,
      as well as all variations of false, are interpreted identically by the server.</p><div class="NAVHEADER"><a name="TRUEFALSEVALUES"></a><p class="calibre9"><b class="calibre10">Table 3-11. Supported true or false constants</b></p><table border="1" class="calibre"><thead class="calibre11"><tr class="calibre12"><th width="4" valign="TOP" class="calibre13"><p class="calibre9">True</p></th><th width="4" valign="TOP" class="calibre13"><p class="calibre9">False</p></th></tr></thead><tbody class="calibre14"><tr class="calibre12"><td width="4" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE">true</tt></p></td><td width="4" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE">false</tt></p></td></tr><tr class="calibre12"><td width="4" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE">'t'</tt></p></td><td width="4" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE">'f '</tt></p></td></tr><tr class="calibre12"><td width="4" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE">'true'</tt></p></td><td width="4" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE">'false'</tt></p></td></tr><tr class="calibre12"><td width="4" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE">'y'</tt></p></td><td width="4" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE">'n'</tt></p></td></tr><tr class="calibre12"><td width="4" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE">'yes'</tt></p></td><td width="4" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE">'no'</tt></p></td></tr><tr class="calibre12"><td width="4" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE">'1'</tt></p></td><td width="4" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE">'0'</tt></p></td></tr></tbody></table></div><div class="NAVHEADER"><p class="calibre9"></p><table class="calibre" border="1" width="100%"><tr class="calibre1"><td class="calibre23"><b class="calibre10">Warning</b></td></tr><tr class="calibre1"><td class="calibre15"><p class="calibre9">If you decide to use the constants listed in <a href="x2632.htm#TRUEFALSEVALUES">Table 3-11</a>, every value (except for
        <tt class="REPLACEABLE">true</tt> and <tt class="REPLACEABLE">false</tt>) must be enclosed within single quotes. Failure to do so will
        result in a server error.</p></td></tr></table></div><p class="calibre9"><a href="x2632.htm#ASIMPLEBOOLEANTABLE">Example 3-17</a> creates a simple table named <tt class="REPLACEABLE">daily_inventory</tt>
      that logs what books are stock and which are not, correlating an ISBN number with a Boolean value. Once created, the table
      is populated with data via a series of <tt class="REPLACEABLE">INSERT</tt> statements involving a string constant (the
      ISBN number), and a variety of valid Boolean constants.</p><div class="NAVHEADER"><a name="ASIMPLEBOOLEANTABLE"></a><p class="calibre9"><b class="calibre10">Example 3-17. Simple Boolean table</b></p><pre class="SCREEN">booktown=# <tt class="REPLACEABLE"><b class="calibre10">CREATE TABLE daily_inventory (isbn text, in_stock boolean);</b></tt>
CREATE
booktown=# <tt class="REPLACEABLE"><b class="calibre10">INSERT INTO daily_inventory VALUES ('0385121679', true);</b></tt>
INSERT 3390926 1
booktown=# <tt class="REPLACEABLE"><b class="calibre10">INSERT INTO daily_inventory VALUES ('039480001X', 't');</b></tt>
INSERT 3390927 1
booktown=# <tt class="REPLACEABLE"><b class="calibre10">INSERT INTO daily_inventory VALUES ('044100590X', 'true');</b></tt>
INSERT 3390928 1
booktown=# <tt class="REPLACEABLE"><b class="calibre10">INSERT INTO daily_inventory VALUES ('0451198492', false);</b></tt>
INSERT 3390929 1
booktown=# <tt class="REPLACEABLE"><b class="calibre10">INSERT INTO daily_inventory VALUES ('0394900014', '0');</b></tt>
INSERT 3390930 1
booktown=# <tt class="REPLACEABLE"><b class="calibre10">INSERT INTO daily_inventory VALUES ('0441172717', '1');</b></tt>
INSERT 3390931 1
booktown=# <tt class="REPLACEABLE"><b class="calibre10">INSERT INTO daily_inventory VALUES ('0451160916');</b></tt>
INSERT 3390932 1</pre></div><p class="calibre9">Now that the table has been populated with records, a <tt class="REPLACEABLE">SELECT</tt> query may
      be issued to easily check which books are in stock, as shown in <a href="x2632.htm#CHECKINGBOOLEANVALUES">Example 3-18</a>.</p><div class="NAVHEADER"><a name="CHECKINGBOOLEANVALUES"></a><p class="calibre9"><b class="calibre10">Example 3-18. Checking Boolean values</b></p><pre class="SCREEN">booktown=# <tt class="REPLACEABLE"><b class="calibre10">SELECT * FROM daily_inventory WHERE in_stock = 'yes';</b></tt>
    isbn    | in_stock
------------+----------
 0385121679 | t
 039480001X | t
 044100590X | t
 0441172717 | t
(4 rows)</pre></div><p class="calibre9">With a Boolean column you have the ability to <span><i class="EMPHASIS">imply</i></span> a true value by referencing the
      column name without any kind of operator or modifying keyword. This can lead to more intuitive looking queries for
      well-designed tables, as shown in <a href="x2632.htm#IMPLYINGBOOLEANTRUE">Example 3-19</a>.</p><div class="NAVHEADER"><a name="IMPLYINGBOOLEANTRUE"></a><p class="calibre9"><b class="calibre10">Example 3-19. Implying Boolean 'true'</b></p><pre class="SCREEN">booktown=# <tt class="REPLACEABLE"><b class="calibre10">SELECT * FROM daily_inventory WHERE in_stock;</b></tt>
    isbn    | in_stock
------------+----------
 0385121679 | t
 039480001X | t
 044100590X | t
 0441172717 | t
(4 rows)</pre></div><p class="calibre9">Although the second query does not specify 'true' or 'false', it implicitly looks for a value of 'true' by omitting a
      comparison operator.</p><p class="calibre9">Similarly, if you want to search for false values, you may either compare the named column's value against any of the
      valid <tt class="REPLACEABLE">boolean</tt> constants in <a href="x2632.htm#TRUEFALSEVALUES">Table 3-11</a>, or you may use the SQL
      keyword <tt class="REPLACEABLE">NOT</tt> just before the column name. Each method is demonstrated in <a href="x2632.htm#CHECKINGBOOLEANFALSE">Example 3-20</a>.</p><div class="NAVHEADER"><a name="CHECKINGBOOLEANFALSE"></a><p class="calibre9"><b class="calibre10">Example 3-20. Checking for 'false' Boolean values</b></p><pre class="SCREEN">booktown=# <tt class="REPLACEABLE"><b class="calibre10">SELECT * FROM daily_inventory WHERE in_stock = 'no';</b></tt>
    isbn    | in_stock
------------+----------
 0451198492 | f
 0394900014 | f
(2 rows)

booktown=# <tt class="REPLACEABLE"><b class="calibre10">SELECT * FROM daily_inventory WHERE NOT in_stock;</b></tt>
    isbn    | in_stock
------------+----------
 0451198492 | f
 0394900014 | f
(2 rows)</pre></div><p class="calibre9">In this way, you can see how SQL was designed with human readability in mind. By naming your tables and columns in
      well-designed terms, a SQL query can read almost as plainly as an English sentence.</p><p class="calibre9">For the more programming-oriented readers, it may be of interest that you can use the inequality
      (<tt class="REPLACEABLE">!=</tt>) operator to compare the value of a <tt class="REPLACEABLE">boolean</tt> field
      against any of the values in <a href="x2632.htm#TRUEFALSEVALUES">Table 3-11</a> (e.g., <tt class="REPLACEABLE">WHERE in_stock != 't'</tt>).
      As such, the following three syntactic variations are each equivalent:

<pre class="SCREEN"> SELECT * FROM daily_inventory WHERE NOT in_stock;
 SELECT * FROM daily_inventory WHERE in_stock = 'no';
 SELECT * FROM daily_inventory WHERE in_stock != 't';</pre>
</p><p class="calibre9">You may have noticed that while seven rows were inserted into the table in <a href="x2632.htm#ASIMPLEBOOLEANTABLE">Example 3-17</a>, only six
      rows were returned between the books found in stock, and those found out of stock. This is due to the last insertion in
      <a href="x2632.htm#ASIMPLEBOOLEANTABLE">Example 3-17</a> not supplying a value at all for the <tt class="REPLACEABLE">in_stock</tt> column,
      leaving the record for the book with ISBN <span><i class="EMPHASIS">0451160916</i></span> with a <tt class="REPLACEABLE">NULL</tt>
      value in the <tt class="REPLACEABLE">in_stock</tt> column.</p><p class="calibre9">As stated previously, <tt class="REPLACEABLE">NULL</tt> will not register as either true or false. As such,
      you may use the SQL phrase <tt class="REPLACEABLE">IS NULL</tt> to check for rows with <tt class="REPLACEABLE">NULL</tt>
      values. Alternatively, you may use <tt class="REPLACEABLE">!=</tt> but you will risk portability issues with other databases. The following
      syntax demonstrates a SQL query which uses the <tt class="REPLACEABLE">IS NULL</tt> phrase:</p><pre class="SCREEN">booktown=# <tt class="REPLACEABLE"><b class="calibre10">SELECT * FROM daily_inventory WHERE in_stock IS NULL;</b></tt>
    isbn    | in_stock
------------+----------
 0451160916 |
(1 row)</pre><p class="calibre9">Since <tt class="REPLACEABLE">IS NULL</tt> is a general SQL phrase, you can use the same
      <tt class="REPLACEABLE">WHERE</tt> clause in an <tt class="REPLACEABLE">UPDATE</tt> statement to correct
      any accidental <tt class="REPLACEABLE">NULL</tt> values.
    </p><div class="NAVHEADER"><a name="CORRECTINGNULLVALUES"></a><p class="calibre9"><b class="calibre10">Example 3-21. Correcting Null values</b></p><pre class="SCREEN">booktown=# <tt class="REPLACEABLE"><b class="calibre10">UPDATE daily_inventory SET in_stock = 'f' WHERE in_stock IS NULL;</b></tt>
UPDATE 1</pre></div></div><div class="NAVHEADER"><h2 class="SECT"><a name="CHARACTERTYPES" class="calibre8">Character Types</a></h2><p class="calibre9">Character types are required any time that you wish to reference character data, such as blocks of ASCII text. They
      are commonly used for storing names, addresses, and so on.</p><p class="calibre9">        SQL provides two character types called <tt class="REPLACEABLE">character</tt>, and <tt class="REPLACEABLE">character varying</tt>.
        In addition to these, a general <tt class="REPLACEABLE">text</tt> type is supported by
        PostgreSQL, which does not require an explicitly declared upper limit on the size of the field.  Columns of type
        <tt class="REPLACEABLE">text</tt> are automatically re-sized according to the data you put in them, and they may
        re-size without boundaries (discounting, of course, the 1GB limit for a single field).  <a href="x2632.htm#CHARACTERTYPESTABLE">Table 3-12</a>
        shows the available character data types within PostgreSQL.
      </p><div class="NAVHEADER"><a name="CHARACTERTYPESTABLE"></a><p class="calibre9"><b class="calibre10">Table 3-12. Character types</b></p><table border="1" width="100%" class="calibre"><thead class="calibre11"><tr class="calibre12"><th width="8" valign="TOP" class="calibre13"><p class="calibre9">Type</p></th><th width="7" valign="TOP" class="calibre13"><p class="calibre9">Storage</p></th><th width="14" valign="TOP" class="calibre13"><p class="calibre9">Description</p></th></tr></thead><tbody class="calibre14"><tr class="calibre12"><td width="8" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE">character(</tt><tt class="REPLACEABLE"><i class="EMPHASIS">n</i></tt> ), <tt class="REPLACEABLE">char(</tt><tt class="REPLACEABLE"><i class="EMPHASIS">n</i></tt> )</p></td><td width="7" valign="TOP" class="calibre15"><p class="calibre9">(4 + <tt class="REPLACEABLE"><i class="EMPHASIS">n</i></tt> ) bytes</p></td><td width="14" valign="TOP" class="calibre15"><p class="calibre9">A fixed-length character string, padded with spaces so that it is <tt class="REPLACEABLE"><i class="EMPHASIS">n</i></tt> characters in length.</p></td></tr><tr class="calibre12"><td width="8" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE">character varying(</tt><tt class="REPLACEABLE"><i class="EMPHASIS">n</i></tt> ), <tt class="REPLACEABLE">varchar(</tt><tt class="REPLACEABLE"><i class="EMPHASIS">n</i></tt> )</p></td><td width="7" valign="TOP" class="calibre15"><p class="calibre9">Up to (4 + <tt class="REPLACEABLE"><i class="EMPHASIS">n</i></tt> ) bytes</p></td><td width="14" valign="TOP" class="calibre15"><p class="calibre9">A variable-length character string with a limit of <tt class="REPLACEABLE"><i class="EMPHASIS">n</i></tt> characters</p></td></tr><tr class="calibre12"><td width="8" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE">text</tt></p></td><td width="7" valign="TOP" class="calibre15"><p class="calibre9">Variable</p></td><td width="14" valign="TOP" class="calibre15"><p class="calibre9">A variable, unlimited-length character string</p></td></tr></tbody></table></div><p class="calibre9">The <tt class="REPLACEABLE"><i class="EMPHASIS">n</i></tt> in <a href="x2632.htm#CHARACTERTYPESTABLE">Table 3-12</a> represents an arbitrarily specified number of
      characters. This number is specified for a column when a table is created.</p><div class="NAVHEADER"><blockquote class="NOTE"><p class="calibre9"><b class="calibre10">Note: </b>Although the <tt class="REPLACEABLE">text</tt> data type is not part of the ANSI/ISO SQL standards, many other
        Relational Database Management Systems (RDBMS) provide this functionality, including Sybase and MS SQL Server.</p></blockquote></div></div><div class="NAVHEADER"><h2 class="SECT"><a name="NUMERICTYPES" class="calibre8">Numeric Types</a></h2><p class="calibre9">PostgreSQL's numeric types are used to represent both integers and decimal floating-point values. From a
      general perspective, PostgreSQL's supported numeric types consist of:

      </p><p class="calibre9"></p><ul class="calibre21"><li class="calibre22"><p class="calibre9">Two-, four-, and eight-byte integers</p></li><li class="calibre22"><p class="calibre9">Four- and eight-byte floating-point numbers</p></li><li class="calibre22"><p class="calibre9">Fixed precision decimals</p></li></ul>
<p class="calibre9">PostgreSQL has support for special types which fall under the family of numeric types, including the deprecated
      <tt class="REPLACEABLE">money</tt> type, and the special <tt class="REPLACEABLE">serial</tt> construct.</p><div class="NAVHEADER"><a name="NUMERICTYPESOVERVIEW"></a><p class="calibre9"><b class="calibre10">Table 3-13. Numeric types overview</b></p><table border="1" width="100%" class="calibre"><thead class="calibre11"><tr class="calibre12"><th width="7" valign="TOP" class="calibre13"><p class="calibre9">Data type</p></th><th width="5" valign="TOP" class="calibre13"><p class="calibre9">Storage</p></th><th width="16" valign="TOP" class="calibre13"><p class="calibre9">Range</p></th></tr></thead><tbody class="calibre14"><tr class="calibre12"><td width="7" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE">bigint</tt>, <tt class="REPLACEABLE">int8</tt></p></td><td width="5" valign="TOP" class="calibre15"><p class="calibre9">8 bytes</p></td><td width="16" valign="TOP" class="calibre15"><p class="calibre9">Whole integer values, –9,223,372,036,854,775,807 to +9,223,372,036,854,775,807</p></td></tr><tr class="calibre12"><td width="7" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE">double precision</tt>, <tt class="REPLACEABLE">float8</tt>, <tt class="REPLACEABLE">float</tt></p></td><td width="5" valign="TOP" class="calibre15"><p class="calibre9">8 bytes</p></td><td width="16" valign="TOP" class="calibre15"><p class="calibre9">Floating-point integer values, 15 significant digits, unlimited size (with limited precision)</p></td></tr><tr class="calibre12"><td width="7" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE">integer</tt>, <tt class="REPLACEABLE">int</tt>, <tt class="REPLACEABLE">int4</tt></p></td><td width="5" valign="TOP" class="calibre15"><p class="calibre9">4 bytes</p></td><td width="16" valign="TOP" class="calibre15"><p class="calibre9">Whole integer values, –2147483648 to +2147483647</p></td></tr><tr class="calibre12"><td width="7" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE">numeric(</tt><tt class="REPLACEABLE"><i class="EMPHASIS">p</i></tt>,<tt class="REPLACEABLE"><i class="EMPHASIS">s</i></tt> ), <tt class="REPLACEABLE">decimal (</tt><tt class="REPLACEABLE"><i class="EMPHASIS">p</i></tt>,<tt class="REPLACEABLE"><i class="EMPHASIS">s</i></tt> )</p></td><td width="5" valign="TOP" class="calibre15"><p class="calibre9">Variable</p></td><td width="16" valign="TOP" class="calibre15"><p class="calibre9">Whole or floating point integers defined as <tt class="REPLACEABLE"><i class="EMPHASIS">p</i></tt> total digits (including digits to the right of the decimal) with <tt class="REPLACEABLE"><i class="EMPHASIS">s</i></tt> digits to the right of the decimal point</p></td></tr><tr class="calibre12"><td width="7" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE">real</tt>, <tt class="REPLACEABLE">float4</tt></p></td><td width="5" valign="TOP" class="calibre15"><p class="calibre9">4 bytes</p></td><td width="16" valign="TOP" class="calibre15"><p class="calibre9">Floating-point integer values, six significant digits, unlimited size (with limited precision)</p></td></tr><tr class="calibre12"><td width="7" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE">smallint</tt>, <tt class="REPLACEABLE">int2</tt></p></td><td width="5" valign="TOP" class="calibre15"><p class="calibre9">2 bytes</p></td><td width="16" valign="TOP" class="calibre15"><p class="calibre9">Whole integers, –32768 to +32767</p></td></tr><tr class="calibre12"><td width="7" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE">money</tt></p></td><td width="5" valign="TOP" class="calibre15"><p class="calibre9">4 bytes</p></td><td width="16" valign="TOP" class="calibre15"><p class="calibre9">Floating-point integer values with a scale of two digits to the right of the decimal, —21474836.48 to +21474836.47</p></td></tr><tr class="calibre12"><td width="7" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE">serial</tt></p></td><td width="5" valign="TOP" class="calibre15"><p class="calibre9">4 bytes</p></td><td width="16" valign="TOP" class="calibre15"><p class="calibre9">Whole integers, 0 to 2147483647</p></td></tr></tbody></table></div><p class="calibre9">        As shown in <a href="x2632.htm#NUMERICTYPESOVERVIEW">Table 3-13</a>, several of PostgreSQL's data types have aliases that are equivalent
        to their associated data types.  This was done for ease of use, but at times it can be confusing, due to the
        fact that some of the aliases sound familiar.  If you are not careful to understand what data type an alias you are
        using is associated with, you may accidentally reference the wrong data type.  For example, in PostgreSQL the
        <tt class="REPLACEABLE">real</tt> and <tt class="REPLACEABLE">double precision</tt> data types represent numbers you may be
        more familiar to using a <tt class="REPLACEABLE">float</tt> variable in other languages; however, because they both have
        aliases that contain the word "float" (<tt class="REPLACEABLE">float</tt> and <tt class="REPLACEABLE">float8</tt> link to <tt class="REPLACEABLE">double precision</tt>;
        <tt class="REPLACEABLE">float4</tt> links to <tt class="REPLACEABLE">real</tt>).
        Problems may result if if you attempt to use the <tt class="REPLACEABLE">float</tt> alias, thinking it is linked
        to <tt class="REPLACEABLE">real</tt>, when in fact it is associated with <tt class="REPLACEABLE">double precision</tt>.
      </p><div class="NAVHEADER"><h3 class="AUTHOR"><a name="AEN3386" class="calibre8">The numeric type</a></h3><p class="calibre9">The <tt class="REPLACEABLE">numeric</tt> (also known as <tt class="REPLACEABLE">decimal</tt>) type is a
        specially designed numeric data type that can represent arbitrarily large and precise values within a fixed length
        that is given by the user.  When you create a table with a column of type <tt class="REPLACEABLE">numeric</tt>, you may specify in
        parentheses two values: the <span><i class="EMPHASIS">precision</i></span> and the <span><i class="EMPHASIS">scale</i></span>.</p><p class="calibre9">The precision is the maximum number of digits that the numeric value may hold (including digits to the
        right of the decimal point), while the scale describes how many of those digits of precision are to be to the right of
        the decimal point. If left unspecified, the precision will default to 30 digits, and scale to 6 digits.
        The maximum precision (and, hence, the maximum scale) you can set this to is 1,000.  Setting the precision to 1,000 would
        allow a maximum 1,000 digits, which should be fairly adequate for most needs.</p><div class="NAVHEADER"><blockquote class="NOTE"><p class="calibre9"><b class="calibre10">Note: </b>        PostgreSQL will not always return an error if you violate the precision and scale of a numeric column.
        </p></blockquote></div><p class="calibre9">Unlike the floating-point data types, you will receive an overflow error if you attempt to insert a number that
        is larger than the allotted precision range.  Beside this limitation, you should be able to insert any number that fits
        within the provided precision and scale of the <tt class="REPLACEABLE">numeric</tt> type column.</p><p class="calibre9">For example, in a <tt class="REPLACEABLE">numeric(11,6)</tt> column, you may safely insert the value
        9.999999 with two digits too many to the right of the decimal point (though the value is rounded up to
        10.000000). However, an attempt to insert the value 99999.99999999 will fail,
        as shown in <a href="x2632.htm#AVOIDINGOVERFLOWERRORS">Example 3-22</a>.</p><p class="calibre9">Problems that arise from trying to insert values that are two large can be avoided by using the
        <tt class="REPLACEABLE">trunc()</tt> numeric truncating function within an
        <tt class="REPLACEABLE">INSERT</tt> command to make sure a number is truncated to a size
        suitable for the column it is being inserted into.  You must provide the length it should be truncated to,
        which means you'll have to be aware of the precisions you've previously specified.  The use of <tt class="REPLACEABLE">trunc()</tt>
        is also illustrated within <a href="x2632.htm#AVOIDINGOVERFLOWERRORS">Example 3-22</a>.</p><div class="NAVHEADER"><a name="AVOIDINGOVERFLOWERRORS"></a><p class="calibre9"><b class="calibre10">Example 3-22. Avoiding overflow errors</b></p><pre class="SCREEN">booktown=# <tt class="REPLACEABLE"><b class="calibre10">INSERT INTO numbers VALUES (9.99999999);</b></tt>
INSERT 3390697 1
booktown=# <tt class="REPLACEABLE"><b class="calibre10">SELECT * FROM numbers;</b></tt>
    number
--------------
    10.000000
(1 row)

booktown=# <tt class="REPLACEABLE"><b class="calibre10">INSERT INTO numbers VALUES (99999.99999999);</b></tt>
ERROR:  overflow on numeric ABS(value) &gt;= 10^5 for field with precision 11 scale 6
booktown=# <tt class="REPLACEABLE"><b class="calibre10">INSERT INTO numbers VALUES (trunc(99999.99999999, 6));</b></tt>
INSERT 3390698 1
booktown=# <tt class="REPLACEABLE"><b class="calibre10">SELECT * FROM numbers;</b></tt>
    number
--------------
    10.000000
 99999.999999
(2 rows)

booktown=# <tt class="REPLACEABLE"><b class="calibre10">INSERT INTO numbers VALUES (trunc(9.99999999, 6));</b></tt>
INSERT 3390699 1
booktown=# <tt class="REPLACEABLE"><b class="calibre10">SELECT * FROM numbers;</b></tt>
    number
--------------
    10.000000
 99999.999999
     9.999999
(3 rows)</pre></div></div><div class="NAVHEADER"><h3 class="AUTHOR"><a name="AEN3425" class="calibre8">The monetary type</a></h3><p class="calibre9">The <tt class="REPLACEABLE">money</tt> type stores U.S.-style currency notation and plain numeric values. As of the writing of this book, the
        <tt class="REPLACEABLE">money</tt> type is deprecated, and is discouraged from being actively used. It is only
        presented here as it is still a functional data type, and may be in use on existing PostgreSQL systems.</p><p class="calibre9">The suggested alternative to the <tt class="REPLACEABLE">money</tt> type is the
        <tt class="REPLACEABLE">numeric</tt> type, with a scale of 2 to represent coin values, and a precision large enough
        to store the largest necessary monetary value (including two digits for the coin precision). Formatting similar to that
        of the <tt class="REPLACEABLE">money</tt> type can be achieved with the <tt class="REPLACEABLE">to_char()</tt>
        function, as shown in <a href="x2632.htm#ANUMERICALTERNATIVETOMONEY">Example 3-23</a>. This example demonstrates the text concatenation
        operator, and the <tt class="REPLACEABLE">ltrim()</tt> text formatting function, each described in <a href="c4890.htm">Chapter 4</a>.</p><div class="NAVHEADER"><a name="ANUMERICALTERNATIVETOMONEY"></a><p class="calibre9"><b class="calibre10">Example 3-23. A numeric alternative to money</b></p><pre class="SCREEN">booktown=# <tt class="REPLACEABLE"><b class="calibre10">CREATE TABLE money_example (money_cash money, numeric_cash numeric(10,2));    </b></tt>
CREATE
booktown=# <tt class="REPLACEABLE"><b class="calibre10">INSERT INTO money_example VALUES ('$12.24', 12.24);</b></tt>
INSERT 3391095 1
booktown=# <tt class="REPLACEABLE"><b class="calibre10">SELECT * FROM money_example;</b></tt>
 money_cash | numeric_cash
------------+--------------
     $12.24 |        12.24
(1 row)

booktown=# <tt class="REPLACEABLE"><b class="calibre10">SELECT money_cash, </b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">       '$' || ltrim(to_char(numeric_cash, '9999.99')) </b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">       AS numeric_cashified </b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">       FROM money_example;</b></tt>
 money_cash | numeric_cashified
------------+-------------------
     $12.24 | $12.24
(1 row)</pre></div></div><div class="NAVHEADER"><h3 class="AUTHOR"><a name="THESERIALTYPE" class="calibre8">The serial type</a></h3><p class="calibre9">The <tt class="REPLACEABLE">serial</tt> type is a non-standard but useful shortcut which allows you to easily
        create an identifier column within a table that contains a unique value for each row.  The <tt class="REPLACEABLE">serial</tt>
        type literally combines the functionality of a 4-byte <tt class="REPLACEABLE">integer</tt> data type, an index, and a sequence.
        <a href="x2632.htm#USINGTHESERIALDATATYPEA">Example 3-24</a> shows the serial type being used to generate a unique identifier for each
        row in a table named <tt class="REPLACEABLE">auto_identifier</tt>.  <a href="x2632.htm#USINGTHESERIALDATATYPEB">Example 3-25</a> shows the same
        thing being accomplished using an integer column, the <tt class="REPLACEABLE">nextval()</tt> function ,
        and a sequence.  As of the writing of this book, these two methods are functionally identical.</p><p class="calibre9">See <a href="c13329.htm">Chapter 7</a> for more information on using sequences.</p><div class="NAVHEADER"><a name="USINGTHESERIALDATATYPEA"></a><p class="calibre9"><b class="calibre10">Example 3-24. Using the serial data type</b></p><pre class="SCREEN">booktown=# <tt class="REPLACEABLE"><b class="calibre10">CREATE TABLE auto_identified (id serial);</b></tt>
NOTICE:  CREATE TABLE will create implicit sequence 'auto_identified_id_seq'
for SERIAL column 'auto_identified.id'
NOTICE:  CREATE TABLE/UNIQUE will create implicit index 'auto_identified_id_key'
for table 'auto_identified'
CREATE</pre></div><div class="NAVHEADER"><a name="USINGTHESERIALDATATYPEB"></a><p class="calibre9"><b class="calibre10">Example 3-25. Accomplishing the same goal manually</b></p><pre class="SCREEN">booktown=# <tt class="REPLACEABLE"><b class="calibre10">CREATE SEQUENCE auto_identified_id_seq;</b></tt>
CREATE
booktown=# <tt class="REPLACEABLE"><b class="calibre10">CREATE TABLE auto_identified </b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">(id integer UNIQUE DEFAULT nextval('auto_identified_id_seq'));</b></tt>
NOTICE:  CREATE TABLE/UNIQUE will create implicit index 'auto_identified_id_key' for table 'auto_identified'
CREATE</pre></div><div class="NAVHEADER"><p class="calibre9"></p><table class="calibre" border="1" width="100%"><tr class="calibre1"><td class="calibre23"><b class="calibre10">Caution with Implicit Sequences</b></td></tr><tr class="calibre1"><td class="calibre15"><p class="calibre9">Upon dropping a table, the implicit sequence created for the serial types are not automatically dropped. You must
          clean up after these types of sequences if you destroy a table which had a serial column, as shown in <a href="x2632.htm#USINGTHESERIALDATATYPEA">Example 3-24</a>, with the <tt class="REPLACEABLE">DROP SEQUENCE</tt> command.</p></td></tr></table></div></div></div><div class="NAVHEADER"><h2 class="SECT"><a name="DATEANDTIMETYPES" class="calibre8">Date and Time Types</a></h2><p class="calibre9">Date and time types are a convenient way to store date and time
      related data in a uniform SQL data structure, without having to worry
      about the conventions involved with storage (e.g., if you were to try
      to store such information in a character data type).  PostgreSQL uses
      Julian dates for all date and time calculations.  Julian date
      representation is the commonly used January through December calendar
      that you are most likely familiar with.  By fixing the length of a
      year at about 365.24 days, Julian dates can correctly
      calculate any date after 4713 BC, as well as far into the
      future.</p><p class="calibre9">PostgreSQL supports all of the SQL92-defined date and time
      types shown in <a href="x2632.htm#DATEANDTIMETYPESTABLE">Table 3-14</a>, as well as
      some PostgreSQL-specific extensions to help with SQL92's timezone
      limitations.  </p><div class="NAVHEADER"><a name="DATEANDTIMETYPESTABLE"></a><p class="calibre9"><b class="calibre10">Table 3-14. Date and time types</b></p><table border="1" width="100%" class="calibre"><thead class="calibre11"><tr class="calibre12"><th width="10" valign="TOP" class="calibre13"><p class="calibre9">Name</p></th><th width="3" valign="TOP" class="calibre13"><p class="calibre9">Storage</p></th><th width="8" valign="TOP" class="calibre13"><p class="calibre9">Description</p></th><th width="7" valign="TOP" class="calibre13"><p class="calibre9">Range</p></th></tr></thead><tbody class="calibre14"><tr class="calibre12"><td width="10" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE">date</tt></p></td><td width="3" valign="TOP" class="calibre15"><p class="calibre9">4 bytes</p></td><td width="8" valign="TOP" class="calibre15"><p class="calibre9">A calendar date (year, month, and day)</p></td><td width="7" valign="TOP" class="calibre15"><p class="calibre9">4713 BC to 32767 AD</p></td></tr><tr class="calibre12"><td width="10" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE">time</tt></p></td><td width="3" valign="TOP" class="calibre15"><p class="calibre9">4 bytes</p></td><td width="8" valign="TOP" class="calibre15"><p class="calibre9">The time of day only, without time zone information</p></td><td width="7" valign="TOP" class="calibre15"><p class="calibre9">00:00:00.00 to 23:59:59.99</p></td></tr><tr class="calibre12"><td width="10" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE">time with time zone</tt></p></td><td width="3" valign="TOP" class="calibre15"><p class="calibre9">4 bytes</p></td><td width="8" valign="TOP" class="calibre15"><p class="calibre9">The time of day only, including a time zone</p></td><td width="7" valign="TOP" class="calibre15"><p class="calibre9">00:00:00.00+12 to 23:59:59.99-12</p></td></tr><tr class="calibre12"><td width="10" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE">timestamp (includes time zone)</tt></p></td><td width="3" valign="TOP" class="calibre15"><p class="calibre9">8 bytes</p></td><td width="8" valign="TOP" class="calibre15"><p class="calibre9">Both the calendar date and time, with time zone information</p></td><td width="7" valign="TOP" class="calibre15"><p class="calibre9">1903 AD to 2037 AD</p></td></tr><tr class="calibre12"><td width="10" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE">interval</tt></p></td><td width="3" valign="TOP" class="calibre15"><p class="calibre9">12 bytes</p></td><td width="8" valign="TOP" class="calibre15"><p class="calibre9">A general time span interval</p></td><td width="7" valign="TOP" class="calibre15"><p class="calibre9">–1780000000 years to 17800000 years</p></td></tr></tbody></table></div><div class="NAVHEADER"><h3 class="AUTHOR"><a name="AEN3591" class="calibre8">Backward compatibility</a></h3><p class="calibre9">To ensure compatibility with earlier versions of PostgreSQL, the developers have continued to provide the older
        <tt class="REPLACEABLE">datetime</tt> and <tt class="REPLACEABLE">timespan</tt> data types. The
        <tt class="REPLACEABLE">datetime</tt> type is now equivalent to <tt class="REPLACEABLE">timestamp</tt>, while
        the <tt class="REPLACEABLE">timespan</tt> is now equivalent to the <tt class="REPLACEABLE">interval</tt> types.
        </p><p class="calibre9">Other date/time data types include <tt class="REPLACEABLE">abstime</tt> and
        <tt class="REPLACEABLE">reltime</tt>, which are lower precision types. However, these types are internal to
        PostgreSQL, and any or all of these types may disappear in a future release. It is advised therefore to design new
        applications with the SQL-compliant data types in mind, and to convert older applications from any of these data types as
        soon as is possible.</p></div><div class="NAVHEADER"><h3 class="AUTHOR"><a name="DATECONVENTIONS" class="calibre8">Date conventions</a></h3><p class="calibre9">Date input can be accepted by PostgreSQL in many common formats, including the ISO-8601 format, the traditional SQL
        format, the original PostgreSQL format, and more. <a href="x2632.htm#VALIDDATEFORMATS">Table 3-15</a> lists several of these date formats.</p><p class="calibre9">These formats are relevant to the <tt class="REPLACEABLE">date</tt> and the
        <tt class="REPLACEABLE">timestamp</tt> data types.</p><div class="NAVHEADER"><a name="VALIDDATEFORMATS"></a><p class="calibre9"><b class="calibre10">Table 3-15. Valid date formats</b></p><table border="1" width="100%" class="calibre"><thead class="calibre11"><tr class="calibre12"><th width="6" valign="TOP" class="calibre13"><p class="calibre9">Format Example</p></th><th width="22" valign="TOP" class="calibre13"><p class="calibre9">Description</p></th></tr></thead><tbody class="calibre14"><tr class="calibre12"><td width="6" valign="TOP" class="calibre15"><p class="calibre9">July 1, 2001</p></td><td width="22" valign="TOP" class="calibre15"><p class="calibre9">Named month, day and year</p></td></tr><tr class="calibre12"><td width="6" valign="TOP" class="calibre15"><p class="calibre9">Sunday July 1, 2001</p></td><td width="22" valign="TOP" class="calibre15"><p class="calibre9">Named day, named month, day and year</p></td></tr><tr class="calibre12"><td width="6" valign="TOP" class="calibre15"><p class="calibre9">July 15, 01 BC</p></td><td width="22" valign="TOP" class="calibre15"><p class="calibre9">Named month, day and year before the Common Era</p></td></tr><tr class="calibre12"><td width="6" valign="TOP" class="calibre15"><p class="calibre9">2001-07-01</p></td><td width="22" valign="TOP" class="calibre15"><p class="calibre9">Standard ISO-8601 format: numeric year, month and day</p></td></tr><tr class="calibre12"><td width="6" valign="TOP" class="calibre15"><p class="calibre9">20010715</p></td><td width="22" valign="TOP" class="calibre15"><p class="calibre9">ISO-8601: formatted numerically as complete year, month, day</p></td></tr><tr class="calibre12"><td width="6" valign="TOP" class="calibre15"><p class="calibre9">010715</p></td><td width="22" valign="TOP" class="calibre15"><p class="calibre9">ISO-8601: formatted numerically as 2-digit year, month, day</p></td></tr><tr class="calibre12"><td width="6" valign="TOP" class="calibre15"><p class="calibre9">7/01/2001</p></td><td width="22" valign="TOP" class="calibre15"><p class="calibre9">Non-European (U.S.) format: numeric month, day and year</p></td></tr><tr class="calibre12"><td width="6" valign="TOP" class="calibre15"><p class="calibre9">1/7/2001</p></td><td width="22" valign="TOP" class="calibre15"><p class="calibre9">European format: numeric day, month and year</p></td></tr><tr class="calibre12"><td width="6" valign="TOP" class="calibre15"><p class="calibre9">2001.182</p></td><td width="22" valign="TOP" class="calibre15"><p class="calibre9">Numeric format, with complete year, and sequential day of the year</p></td></tr></tbody></table></div><p class="calibre9">When specifying a named month in a date value to PostgreSQL, you may either type the complete month name, or choose
        from a set of defined abbreviations for each month.  These abbreviations are listed in <a href="x2632.htm#MONTHABBREVIATIONS">Table 3-16</a>.</p><div class="NAVHEADER"><a name="MONTHABBREVIATIONS"></a><p class="calibre9"><b class="calibre10">Table 3-16. Month abbreviations</b></p><table border="1" class="calibre"><thead class="calibre11"><tr class="calibre12"><th width="5" valign="TOP" class="calibre13"><p class="calibre9">Month</p></th><th width="5" valign="TOP" class="calibre13"><p class="calibre9">Abbreviation</p></th></tr></thead><tbody class="calibre14"><tr class="calibre12"><td width="5" valign="TOP" class="calibre15"><p class="calibre9">January</p></td><td width="5" valign="TOP" class="calibre15"><p class="calibre9">Jan</p></td></tr><tr class="calibre12"><td width="5" valign="TOP" class="calibre15"><p class="calibre9">February</p></td><td width="5" valign="TOP" class="calibre15"><p class="calibre9">Feb</p></td></tr><tr class="calibre12"><td width="5" valign="TOP" class="calibre15"><p class="calibre9">March</p></td><td width="5" valign="TOP" class="calibre15"><p class="calibre9">Mar</p></td></tr><tr class="calibre12"><td width="5" valign="TOP" class="calibre15"><p class="calibre9">April</p></td><td width="5" valign="TOP" class="calibre15"><p class="calibre9">Apr</p></td></tr><tr class="calibre12"><td width="5" valign="TOP" class="calibre15"><p class="calibre9">May</p></td><td width="5" valign="TOP" class="calibre15"><p class="calibre9">May</p></td></tr><tr class="calibre12"><td width="5" valign="TOP" class="calibre15"><p class="calibre9">June</p></td><td width="5" valign="TOP" class="calibre15"><p class="calibre9">Jun</p></td></tr><tr class="calibre12"><td width="5" valign="TOP" class="calibre15"><p class="calibre9">July</p></td><td width="5" valign="TOP" class="calibre15"><p class="calibre9">Jul</p></td></tr><tr class="calibre12"><td width="5" valign="TOP" class="calibre15"><p class="calibre9">August</p></td><td width="5" valign="TOP" class="calibre15"><p class="calibre9">Aug</p></td></tr><tr class="calibre12"><td width="5" valign="TOP" class="calibre15"><p class="calibre9">September</p></td><td width="5" valign="TOP" class="calibre15"><p class="calibre9">Sep, Sept</p></td></tr><tr class="calibre12"><td width="5" valign="TOP" class="calibre15"><p class="calibre9">October</p></td><td width="5" valign="TOP" class="calibre15"><p class="calibre9">Oct</p></td></tr><tr class="calibre12"><td width="5" valign="TOP" class="calibre15"><p class="calibre9">November</p></td><td width="5" valign="TOP" class="calibre15"><p class="calibre9">Nov</p></td></tr><tr class="calibre12"><td width="5" valign="TOP" class="calibre15"><p class="calibre9">December</p></td><td width="5" valign="TOP" class="calibre15"><p class="calibre9">Dec</p></td></tr></tbody></table></div><p class="calibre9">Similarly, <a href="x2632.htm#DAYOFTHEWEEKABBREVIATIONS">Table 3-17</a> lists PostgreSQL-recognized abbreviations for weekday names.</p><div class="NAVHEADER"><a name="DAYOFTHEWEEKABBREVIATIONS"></a><p class="calibre9"><b class="calibre10">Table 3-17. Day of the week abbreviations</b></p><table border="1" class="calibre"><thead class="calibre11"><tr class="calibre12"><th width="7" valign="TOP" class="calibre13"><p class="calibre9">Day</p></th><th width="8" valign="TOP" class="calibre13"><p class="calibre9">Abbreviation</p></th></tr></thead><tbody class="calibre14"><tr class="calibre12"><td width="7" valign="TOP" class="calibre15"><p class="calibre9">Sunday</p></td><td width="8" valign="TOP" class="calibre15"><p class="calibre9">Sun</p></td></tr><tr class="calibre12"><td width="7" valign="TOP" class="calibre15"><p class="calibre9">Monday</p></td><td width="8" valign="TOP" class="calibre15"><p class="calibre9">Mon</p></td></tr><tr class="calibre12"><td width="7" valign="TOP" class="calibre15"><p class="calibre9">Tuesday</p></td><td width="8" valign="TOP" class="calibre15"><p class="calibre9">Tue, Tues</p></td></tr><tr class="calibre12"><td width="7" valign="TOP" class="calibre15"><p class="calibre9">Wednesday</p></td><td width="8" valign="TOP" class="calibre15"><p class="calibre9">Wed, Weds</p></td></tr><tr class="calibre12"><td width="7" valign="TOP" class="calibre15"><p class="calibre9">Thursday</p></td><td width="8" valign="TOP" class="calibre15"><p class="calibre9">Thu, Thur, Thurs</p></td></tr><tr class="calibre12"><td width="7" valign="TOP" class="calibre15"><p class="calibre9">Friday</p></td><td width="8" valign="TOP" class="calibre15"><p class="calibre9">Fri</p></td></tr><tr class="calibre12"><td width="7" valign="TOP" class="calibre15"><p class="calibre9">Saturday</p></td><td width="8" valign="TOP" class="calibre15"><p class="calibre9">Sat</p></td></tr></tbody></table></div><p class="calibre9">Despite the wide variety of ways in which PostgreSQL can interpret date values, the values are always stored
        uniformally, and will be returned in a consistent format. As such, you have a variety of methods available to you to
        customize the default behavior with which date and time values are returned to you.</p><div class="NAVHEADER"><blockquote class="NOTE"><p class="calibre9"><b class="calibre10">Note: </b>While date values can always be formatted during selection via several formatting functions (e.g.,
          <tt class="REPLACEABLE">to_char()</tt>), it is more efficient to configure your defaults as close to the most
          commonly used conventions as you can before having to resort to manual type conversion and text formatting.</p></blockquote></div><p class="calibre9">To set the general date/time output format, the <tt class="REPLACEABLE">SET</tt> command can be applied to the
        run-time variable <tt class="REPLACEABLE">DATESTYLE</tt>. This variable may be set to one of four available
        general styles shown in <a href="x2632.htm#DATEOUTPUTFORMATS">Table 3-18</a>.</p><div class="NAVHEADER"><a name="DATEOUTPUTFORMATS"></a><p class="calibre9"><b class="calibre10">Table 3-18. Date output formats</b></p><table border="1" width="100%" class="calibre"><thead class="calibre11"><tr class="calibre12"><th width="6" valign="TOP" class="calibre13"><p class="calibre9">General format</p></th><th width="10" valign="TOP" class="calibre13"><p class="calibre9">Description</p></th><th width="13" valign="TOP" class="calibre13"><p class="calibre9">Example</p></th></tr></thead><tbody class="calibre14"><tr class="calibre12"><td width="6" valign="TOP" class="calibre15"><p class="calibre9">ISO</p></td><td width="10" valign="TOP" class="calibre15"><p class="calibre9">ISO-8601 standard</p></td><td width="13" valign="TOP" class="calibre15"><p class="calibre9">2001-06-25 12:24:00-07</p></td></tr><tr class="calibre12"><td width="6" valign="TOP" class="calibre15"><p class="calibre9">SQL</p></td><td width="10" valign="TOP" class="calibre15"><p class="calibre9">Traditional SQL style</p></td><td width="13" valign="TOP" class="calibre15"><p class="calibre9">06/25/2001 12:24:00.00 PDT</p></td></tr><tr class="calibre12"><td width="6" valign="TOP" class="calibre15"><p class="calibre9">Postgres</p></td><td width="10" valign="TOP" class="calibre15"><p class="calibre9">Original PostgreSQL style</p></td><td width="13" valign="TOP" class="calibre15"><p class="calibre9">Mon 25 Jun 12:24:00 2001 PDT</p></td></tr><tr class="calibre12"><td width="6" valign="TOP" class="calibre15"><p class="calibre9">German</p></td><td width="10" valign="TOP" class="calibre15"><p class="calibre9">Regional style for Germany</p></td><td width="13" valign="TOP" class="calibre15"><p class="calibre9">25.06.2001 12:24:00.00 PDT</p></td></tr></tbody></table></div><p class="calibre9">As an example, you can use the following SQL statement to set the date style to <span><i class="EMPHASIS">SQL</i></span>: </p><pre class="SCREEN">booktown=# <tt class="REPLACEABLE"><b class="calibre10">SET DATESTYLE TO SQL;</b></tt>
SET VARIABLE</pre><p class="calibre9">If you perform a <tt class="REPLACEABLE">SELECT current_timestamp</tt> query after setting this variable,
        PostgreSQL should return the current time using the ISO format as instructed:</p><pre class="SCREEN">booktown=# <tt class="REPLACEABLE"><b class="calibre10">SELECT current_timestamp;</b></tt>
         timestamp
----------------------------
 08/10/2001 13:25:55.00 PDT
(1 row)</pre><p class="calibre9">          The <tt class="REPLACEABLE">SHOW</tt> command can be used to display the current value of the
          <tt class="REPLACEABLE">DATESTYLE</tt> variable while PostgreSQL is running.
        </p><pre class="SCREEN">booktown=# <tt class="REPLACEABLE"><b class="calibre10">SHOW DATESTYLE;</b></tt>
NOTICE:  DateStyle is SQL with US (NonEuropean) conventions
SHOW VARIABLE</pre><p class="calibre9">In addition to these general formats, PostgreSQL's date output format has two other variants which further describe
        how to display the date, shown in <a href="x2632.htm#EXTENDEDDATEOUTPUTFORMATS">Table 3-19</a>: European and non-European (U.S.). These
        determine whether the format is day followed by month, or vice versa. This variation can be applied on top of the
        previous four general formats with the same syntax to <tt class="REPLACEABLE">SET DATESTYLE</tt> and will not modify
        your chosen format except for the arrangement of the month and day.</p><div class="NAVHEADER"><a name="EXTENDEDDATEOUTPUTFORMATS"></a><p class="calibre9"><b class="calibre10">Table 3-19. Extended date output formats</b></p><table border="1" width="100%" class="calibre"><thead class="calibre11"><tr class="calibre12"><th width="9" valign="TOP" class="calibre13"><p class="calibre9">Month/day format</p></th><th width="8" valign="TOP" class="calibre13"><p class="calibre9">Description</p></th><th width="11" valign="TOP" class="calibre13"><p class="calibre9">Example</p></th></tr></thead><tbody class="calibre14"><tr class="calibre12"><td width="9" valign="TOP" class="calibre15"><p class="calibre9">European</p></td><td width="8" valign="TOP" class="calibre15"><p class="calibre9">day/month/year</p></td><td width="11" valign="TOP" class="calibre15"><p class="calibre9">12/07/2001 17:34:50.00 MET</p></td></tr><tr class="calibre12"><td width="9" valign="TOP" class="calibre15"><p class="calibre9">U.S., or Non-European</p></td><td width="8" valign="TOP" class="calibre15"><p class="calibre9">month/day/year</p></td><td width="11" valign="TOP" class="calibre15"><p class="calibre9">07/12/2001 17:34:50.0 PST</p></td></tr></tbody></table></div><p class="calibre9">Furthermore, you may set both the general format and day/month convention by supplying both variables to the
        <tt class="REPLACEABLE">SET</tt> command, comma delimited. The order of these variables is not important to the
        <tt class="REPLACEABLE">SET</tt> command as long as the variables are not mutually exclusive (e.g.,
        <span><i class="EMPHASIS">SQL</i></span> and <span><i class="EMPHASIS">ISO</i></span>), as shown in <a href="x2632.htm#SETTINGDATEFORMATS">Example 3-26</a>.</p><div class="NAVHEADER"><a name="SETTINGDATEFORMATS"></a><p class="calibre9"><b class="calibre10">Example 3-26. Setting date formats</b></p><pre class="SCREEN">booktown=# <tt class="REPLACEABLE"><b class="calibre10">SET DATESTYLE TO ISO,US;</b></tt>
SET VARIABLE
booktown=# <tt class="REPLACEABLE"><b class="calibre10">SHOW DATESTYLE;</b></tt>
NOTICE:  DateStyle is ISO with US (NonEuropean) conventions
SHOW VARIABLE
booktown=# <tt class="REPLACEABLE"><b class="calibre10">SET DATESTYLE TO NONEUROPEAN, GERMAN;</b></tt>
SET VARIABLE
booktown=# <tt class="REPLACEABLE"><b class="calibre10">SHOW DATESTYLE;</b></tt>
NOTICE:  DateStyle is German with European conventions
SHOW VARIABLE</pre></div><p class="calibre9">If you do not specify a month/day format, a reasonable default will usually be chosen (e.g., European is the default for the German regional format).</p><p class="calibre9">While <tt class="REPLACEABLE">SET DATESTYLE</tt> is a
        convenient way to set the output format, it is important to note
        that this is a <span><i class="EMPHASIS">run-time variable</i></span>, which means
        that it exists only for the lifespan of your connected session. There
        are two methods available that allow you to  provide a default value
        for the <tt class="REPLACEABLE">DATESTYLE</tt> variable, which
        lets you avoid explicitly setting the variable for each new session
        you begin:</p><p class="calibre9"> </p><p class="calibre9"></p><ul class="calibre21"><li class="calibre22"><p class="calibre9">You may change the <tt class="REPLACEABLE">PGDATESTYLE</tt> environment variable on the
            server running <span><i class="EMPHASIS">postmaster</i></span>.  For example, with the bash shell, you could add
            the <tt class="REPLACEABLE">export PGDATESTYLE="SQL US"</tt> line to the <span><i class="EMPHASIS">postgres</i></span>
            user's <span><i class="EMPHASIS">.bash_ profile</i></span> file.  When the <span><i class="EMPHASIS">postgres</i></span>
            user starts <span><i class="EMPHASIS">postmaster</i></span>, the <tt class="REPLACEABLE">PGDATESTYLE</tt> variable
            will be read and applied globally to all date and time formatting performed by PostgreSQL.</p></li><li class="calibre22"><p class="calibre9">You may change the <tt class="REPLACEABLE">PGDATESTYLE</tt> environment variable used by a client
            application (assuming it was written with the <span><i class="EMPHASIS">libpq</i></span> library) on its session
            start-up, if you wish the client rather than the server to configure the output. For example, setting the
            <tt class="REPLACEABLE">PGDATESTYLE</tt> variable at a bash prompt with the
            <tt class="REPLACEABLE">export</tt> command before starting <span><i class="EMPHASIS">psql</i></span> sets the format
            for <span><i class="EMPHASIS">psql</i></span> to use.</p></li></ul>
</div><div class="NAVHEADER"><h3 class="AUTHOR"><a name="TIMECONVENTIONS" class="calibre8">Time conventions</a></h3><p class="calibre9">Time values, like date values, may be entered in to a table in a number of ways. Commonly used formats are listed in <a href="x2632.htm#VALIDTIMEFORMATS">Table 3-20</a>. These apply to values of type <tt class="REPLACEABLE">time</tt> and
        <tt class="REPLACEABLE">time with time zone</tt>.</p><div class="NAVHEADER"><a name="VALIDTIMEFORMATS"></a><p class="calibre9"><b class="calibre10">Table 3-20. Valid time formats</b></p><table border="1" width="100%" class="calibre"><thead class="calibre11"><tr class="calibre12"><th width="6" valign="TOP" class="calibre13"><p class="calibre9">Format example</p></th><th width="23" valign="TOP" class="calibre13"><p class="calibre9">Description</p></th></tr></thead><tbody class="calibre14"><tr class="calibre12"><td width="6" valign="TOP" class="calibre15"><p class="calibre9">01:24</p></td><td width="23" valign="TOP" class="calibre15"><p class="calibre9">ISO-8601, detailed to minutes</p></td></tr><tr class="calibre12"><td width="6" valign="TOP" class="calibre15"><p class="calibre9">01:24 AM</p></td><td width="23" valign="TOP" class="calibre15"><p class="calibre9">Equivalent to 01:24 (the "AM" attached is for readability only, and does not affect the value)</p></td></tr><tr class="calibre12"><td width="6" valign="TOP" class="calibre15"><p class="calibre9">01:24 PM</p></td><td width="23" valign="TOP" class="calibre15"><p class="calibre9">Equivalent to 13:24 (the hour must be less-than or equal to 12 to use "PM")</p></td></tr><tr class="calibre12"><td width="6" valign="TOP" class="calibre15"><p class="calibre9">13:24</p></td><td width="23" valign="TOP" class="calibre15"><p class="calibre9">24-hour time, equivalent to 01:24 PM</p></td></tr><tr class="calibre12"><td width="6" valign="TOP" class="calibre15"><p class="calibre9">01:24:11</p></td><td width="23" valign="TOP" class="calibre15"><p class="calibre9">ISO-8601, detailed to seconds</p></td></tr><tr class="calibre12"><td width="6" valign="TOP" class="calibre15"><p class="calibre9">01:24:11.112</p></td><td width="23" valign="TOP" class="calibre15"><p class="calibre9">ISO-8601, detailed to microseconds</p></td></tr><tr class="calibre12"><td width="6" valign="TOP" class="calibre15"><p class="calibre9">012411</p></td><td width="23" valign="TOP" class="calibre15"><p class="calibre9">ISO-8601, detailed to seconds, formatted numerically</p></td></tr></tbody></table></div><p class="calibre9">In addition to these formats, PostgreSQL allows for further description of a time value which is defined as
        <tt class="REPLACEABLE">time with time zone</tt> by supporting extra time zone parameters following the time
        value. The supported formats are illustrated in <a href="x2632.htm#VALIDTIMEZONEFORMATS">Table 3-21</a>.</p><div class="NAVHEADER"><a name="VALIDTIMEZONEFORMATS"></a><p class="calibre9"><b class="calibre10">Table 3-21. Valid time zone formats</b></p><table border="1" width="100%" class="calibre"><thead class="calibre11"><tr class="calibre12"><th width="6" valign="TOP" class="calibre13"><p class="calibre9">Format example</p></th><th width="23" valign="TOP" class="calibre13"><p class="calibre9">Description</p></th></tr></thead><tbody class="calibre14"><tr class="calibre12"><td width="6" valign="TOP" class="calibre15"><p class="calibre9">01:24:11-7</p></td><td width="23" valign="TOP" class="calibre15"><p class="calibre9">ISO-8601, 7 hours behind GMT</p></td></tr><tr class="calibre12"><td width="6" valign="TOP" class="calibre15"><p class="calibre9">01:24:11-07:00</p></td><td width="23" valign="TOP" class="calibre15"><p class="calibre9">ISO-8601, 7 hours, zero minutes behind GMT</p></td></tr><tr class="calibre12"><td width="6" valign="TOP" class="calibre15"><p class="calibre9">01:24:11-0700</p></td><td width="23" valign="TOP" class="calibre15"><p class="calibre9">ISO-8601, 7 hours, zero minutes behind GMT</p></td></tr><tr class="calibre12"><td width="6" valign="TOP" class="calibre15"><p class="calibre9">01:24:11 PST</p></td><td width="23" valign="TOP" class="calibre15"><p class="calibre9">ISO-8601, Pacific Standard Time (7 hours behind GMT)</p></td></tr></tbody></table></div><div class="NAVHEADER"><blockquote class="NOTE"><p class="calibre9"><b class="calibre10">Note: </b>            PostgreSQL supports the use of all ISO standard time zone abbreviations.
          </p></blockquote></div><p class="calibre9">The <tt class="REPLACEABLE">time with time zone</tt> data type is mainly supported by PostgreSQL to adhere to
        existing SQL standards and for portability with other database management systems. If you need to work with time zones,
        it is recommended that you use the <tt class="REPLACEABLE">timestamp</tt> data type discussed in <a href="x2632.htm#TIMESTAMPS">the Section called <i class="EMPHASIS">Timestamps</i></a>." This is primarily because of the fact that, due to daylight savings, time zones cannot always be
        meaningfully interpreted without an associated date.</p><p class="calibre9">Internally, PostgreSQL keeps track of all time  zone information as a numeric offset of GMT (Greenwich Mean Time),
        which is also known as UTC (Universal Coordinated Time). By default, PostgreSQL's time display will use the time zone that your
        server's operating system is configured for. If you wish the time value to operate under a different time zone, there are four ways
        in which you can modify the output:</p><p class="calibre9"> </p><p class="calibre9"></p><div class="NAVHEADER"><dl class="calibre9"><dt class="NAVHEADER">Set the <tt class="REPLACEABLE">TZ</tt> environment variable on the server</dt><dd class="calibre16"><p class="calibre9">This variable is found by the backend server as the default time zone when the
                <span><i class="EMPHASIS">postmaster</i></span> starts up. It can be set, for example, in the postgres user's
                <span><i class="EMPHASIS">.bash_ profile</i></span> file with a bash <tt class="REPLACEABLE">export TZ='zone'</tt>
                command.</p></dd><dt class="NAVHEADER">Set the <tt class="REPLACEABLE">PGTZ</tt> environment variable on the client</dt><dd class="calibre16"><p class="calibre9">                  If the <tt class="REPLACEABLE">PGTZ</tt> environment variable is set, it can be read by
                  any client written with <span><i class="EMPHASIS">libpq</i></span> and interpreted as the
                  client's default time zone.</p></dd><dt class="NAVHEADER">Use the <tt class="REPLACEABLE">SET TIMEZONE TO</tt> SQL statement</dt><dd class="calibre16"><p class="calibre9">This SQL command sets the time zone for the session to <span><i class="EMPHASIS">zone</i></span> (e.g.,
                <tt class="REPLACEABLE">SET TIMEZONE TO UTC</tt>)</p></dd><dt class="NAVHEADER">Use the <tt class="REPLACEABLE">AT TIME ZONE</tt> SQL clause</dt><dd class="calibre16"><p class="calibre9">This SQL92 clause can be used to specify <span><i class="EMPHASIS">zone</i></span> as a text time zone (e.g.,
                <span><i class="EMPHASIS">PST</i></span> ) or as an interval (e.g., <tt class="REPLACEABLE">interval('—07:00')</tt>). This clause may be
                applied in the middle of a SQL statement following a value which contains a timestamp (e.g.,
                <tt class="REPLACEABLE">SELECT my_timestamp AT TIME ZONE 'PST'</tt>).</p></dd></dl></div>
<div class="NAVHEADER"><blockquote class="NOTE"><p class="calibre9"><b class="calibre10">Note: </b>Most systems will default to GMT when a time zone variable is set to an invalid time zone.</p><p class="calibre9">Additionally, if the compiler option <tt class="REPLACEABLE">USE_AUSTRALIAN_RULES</tt> was set when
          PostgreSQL was built, the <span><i class="EMPHASIS">EST</i></span> time zone will refer to Australian Eastern Standard Time (with an
          offset of +10:00 hours from GMT) rather than U.S. Eastern Standard Time.</p></blockquote></div></div><div class="NAVHEADER"><h3 class="AUTHOR"><a name="TIMESTAMPS" class="calibre8">Timestamps</a></h3><p class="calibre9">The PostgreSQL <tt class="REPLACEABLE">timestamp</tt> combines the functionality of the PostgreSQL
        <tt class="REPLACEABLE">date</tt> and <tt class="REPLACEABLE">time</tt> types into a single data type.  The
        syntax of a timestamp value consists of a valid date format, followed by at least one whitespace character, and a
        valid time format. It can be followed optionally by a time zone value, if specified.</p><p class="calibre9">Combinations of all date and time formats listed in <a href="x2632.htm#VALIDDATEFORMATS">Table 3-15</a> and <a href="x2632.htm#VALIDTIMEFORMATS">Table 3-20</a> are each supported in this fashion. <a href="x2632.htm#SOMEVALIDTIMESTAMPFORMATS">Table 3-22</a> illustrates some examples of
        valid <tt class="REPLACEABLE">timestamp</tt> input.</p><div class="NAVHEADER"><a name="SOMEVALIDTIMESTAMPFORMATS"></a><p class="calibre9"><b class="calibre10">Table 3-22. Some valid timestamp formats</b></p><table border="1" width="100%" class="calibre"><thead class="calibre11"><tr class="calibre12"><th width="8" valign="TOP" class="calibre13"><p class="calibre9">Format Example</p></th><th width="21" valign="TOP" class="calibre13"><p class="calibre9">Description</p></th></tr></thead><tbody class="calibre14"><tr class="calibre12"><td width="8" valign="TOP" class="calibre15"><p class="calibre9">1980-06-25 11:11-7</p></td><td width="21" valign="TOP" class="calibre15"><p class="calibre9">ISO-8601 date format, detailed to minutes, and PST time zone</p></td></tr><tr class="calibre12"><td width="8" valign="TOP" class="calibre15"><p class="calibre9">25/06/1980 12:24:11.112</p></td><td width="21" valign="TOP" class="calibre15"><p class="calibre9">European date format, detailed to microseconds</p></td></tr><tr class="calibre12"><td width="8" valign="TOP" class="calibre15"><p class="calibre9">06/25/1980 23:11</p></td><td width="21" valign="TOP" class="calibre15"><p class="calibre9">U.S. date format, detailed to minutes in 24-hour time</p></td></tr><tr class="calibre12"><td width="8" valign="TOP" class="calibre15"><p class="calibre9">25.06.1980 23:11:12 PM</p></td><td width="21" valign="TOP" class="calibre15"><p class="calibre9">German regional date format, detailed to seconds, and PM attached</p></td></tr></tbody></table></div><div class="NAVHEADER"><p class="calibre9"></p><table class="calibre" border="1" width="100%"><tr class="calibre1"><td class="calibre23"><b class="calibre10">Warning</b></td></tr><tr class="calibre1"><td class="calibre15"><p class="calibre9">While PostgreSQL supports the syntax of creating a column or value with the type
          <tt class="REPLACEABLE">timestamp without time zone</tt>, as of PostgreSQL 7.1.2
          the resultant data type still contains a time zone.</p></td></tr></table></div></div><div class="NAVHEADER"><h3 class="AUTHOR"><a name="AEN4145" class="calibre8">Intervals</a></h3><p class="calibre9">The SQL92 standard specifies a data typed called an <span><i class="EMPHASIS">interval</i></span>, which represents a fixed span of
        time.  By itself, an interval represents only a <span><i class="EMPHASIS">quantity of time</i></span>, and does not begin or end at any set date or
        time. These intervals can be useful when applied to date and time values to calculate a new date or time,
        either by subtracting or adding the quantity. They can also be handy for quickly determining the precise interval between
        two date or time values. This can be achieved by subtracting date values, time values or timestamps from one another.</p><p class="calibre9">The two syntax variations below can specify an interval within PostgreSQL: </p><pre class="SCREEN"> <tt class="REPLACEABLE"><i class="EMPHASIS">qty</i></tt> <tt class="REPLACEABLE"><i class="EMPHASIS">unit</i></tt>  [ ago ]
  <tt class="REPLACEABLE"><i class="EMPHASIS">qty1</i></tt> <tt class="REPLACEABLE"><i class="EMPHASIS">unit</i></tt> [, <tt class="REPLACEABLE"><i class="EMPHASIS">qty2</i></tt> <tt class="REPLACEABLE"><i class="EMPHASIS">unit2</i></tt> ... ] [ ago ]</pre><p class="calibre9">        Where:

        </p><p class="calibre9"></p><div class="NAVHEADER"><dl class="calibre9"><dt class="NAVHEADER"><tt class="REPLACEABLE"><i class="EMPHASIS">qty</i></tt></dt><dd class="calibre16"><p class="calibre9">Specifies the quantity of your interval, which may be any whole integer, or floating-point number in the case
              of microseconds. The literal meaning of this number is qualified by the subsequent <tt class="REPLACEABLE"><i class="EMPHASIS">unit</i></tt>.</p></dd><dt class="NAVHEADER"><tt class="REPLACEABLE"><i class="EMPHASIS">unit</i></tt></dt><dd class="calibre16"><p class="calibre9">Qualifies the <tt class="REPLACEABLE"><i class="EMPHASIS">qty</i></tt> provided. The
              <tt class="REPLACEABLE"><i class="EMPHASIS">unit</i></tt> may be any one of the following
              keywords: second, minute, hour, day, week, month, year,
              decade, century, millennium. It can also be an abbreviation
              (as short as you want, as long as it cannot be
              confused with another keyword) or plurals of the previously
              mentioned units.</p></dd><dt class="NAVHEADER"><tt class="REPLACEABLE">ago</tt></dt><dd class="calibre16"><p class="calibre9">The optional <tt class="REPLACEABLE">ago</tt> keyword of the interval determines whether or not you are describing a
              period of time <span><i class="EMPHASIS">before</i></span> the associated time, rather than after. You can think of it as a negative sign for
              date and time types.</p></dd></dl></div>
<p class="calibre9"><a href="x2632.htm#INTERPRETINGINTERVALFORMATS">Example 3-27</a> shows functional syntax for <tt class="REPLACEABLE">date</tt> and
        <tt class="REPLACEABLE">interval</tt> values being meaningfully combined. You can see that subtracting an inverted
        time interval (e.g., one with the term <tt class="REPLACEABLE">ago</tt>) is functionally identical to adding a normal interval.
        This can be thought of as similar to the effect of adding negative numbers to integer values.</p><div class="NAVHEADER"><a name="INTERPRETINGINTERVALFORMATS"></a><p class="calibre9"><b class="calibre10">Example 3-27. Interpreting interval formats</b></p><pre class="SCREEN">booktown=# <tt class="REPLACEABLE"><b class="calibre10">SELECT date('1980-06-25');</b></tt>
    date
------------
 1980-06-25
(1 row)

booktown=# <tt class="REPLACEABLE"><b class="calibre10">SELECT interval('21 years 8 days');</b></tt>
    interval
-----------------
 21 years 8 days
(1 row)

booktown=# <tt class="REPLACEABLE"><b class="calibre10">SELECT date('1980-06-25') + interval('21 years 8 days') </b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">AS spanned_date;</b></tt>
      spanned_date
------------------------
 2001-07-03 00:00:00-07
(1 row)

booktown=# <tt class="REPLACEABLE"><b class="calibre10">SELECT date('1980-06-25') - interval('21 years 8 days ago') </b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">AS twice_inverted_interval_date;</b></tt>
 twice_inverted_interval_date
------------------------------
 2001-07-03 00:00:00-07
(1 row)</pre></div></div><div class="NAVHEADER"><h3 class="AUTHOR"><a name="AEN4201" class="calibre8">Built-in date and time constants</a></h3><p class="calibre9">PostgreSQL supports many special constants for use when referencing dates and times.  These
        constants represent common date/time values, such as <span><i class="EMPHASIS">now</i></span>, <span><i class="EMPHASIS">tomorrow</i></span>, and
        <span><i class="EMPHASIS">yesterday</i></span>. The predefined date and time constants supported by PostgreSQL are listed in <a href="x2632.htm#DATEANDTIMECONSTANTSTABLE">Table 3-23</a>.</p><p class="calibre9">PostgreSQL also provides three built-in functions for retrieving the current time, date, and timestamp. These are
        aptly named <tt class="REPLACEABLE">current_date</tt>, <tt class="REPLACEABLE">current_time</tt>, and
        <tt class="REPLACEABLE">current_timestamp</tt>.</p><div class="NAVHEADER"><a name="DATEANDTIMECONSTANTSTABLE"></a><p class="calibre9"><b class="calibre10">Table 3-23. Date and time constants</b></p><table border="1" width="100%" class="calibre"><thead class="calibre11"><tr class="calibre12"><th width="4" valign="TOP" class="calibre13"><p class="calibre9">Constant</p></th><th width="25" valign="TOP" class="calibre13"><p class="calibre9">Description</p></th></tr></thead><tbody class="calibre14"><tr class="calibre12"><td width="4" valign="TOP" class="calibre15"><p class="calibre9"><span><i class="EMPHASIS">current</i></span></p></td><td width="25" valign="TOP" class="calibre15"><p class="calibre9">The current transaction time, deferred.  Unlike a <span><i class="EMPHASIS">now</i></span>, <span><i class="EMPHASIS">current</i></span> is not a timestamp; it represents the current system time and can be used to reference whatever that time may be.</p></td></tr><tr class="calibre12"><td width="4" valign="TOP" class="calibre15"><p class="calibre9"><span><i class="EMPHASIS">epoch</i></span></p></td><td width="25" valign="TOP" class="calibre15"><p class="calibre9">1970-01-01 00:00:00+00 (UNIX's "Birthday")</p></td></tr><tr class="calibre12"><td width="4" valign="TOP" class="calibre15"><p class="calibre9"><span><i class="EMPHASIS">infinity</i></span></p></td><td width="25" valign="TOP" class="calibre15"><p class="calibre9">An abstract constant later than all other valid dates and times</p></td></tr><tr class="calibre12"><td width="4" valign="TOP" class="calibre15"><p class="calibre9"><span><i class="EMPHASIS">-infinity</i></span></p></td><td width="25" valign="TOP" class="calibre15"><p class="calibre9">An abstract constant earlier than all other valid dates and times</p></td></tr><tr class="calibre12"><td width="4" valign="TOP" class="calibre15"><p class="calibre9"><span><i class="EMPHASIS">now</i></span></p></td><td width="25" valign="TOP" class="calibre15"><p class="calibre9">The current transaction timestamp</p></td></tr><tr class="calibre12"><td width="4" valign="TOP" class="calibre15"><p class="calibre9"><span><i class="EMPHASIS">today</i></span></p></td><td width="25" valign="TOP" class="calibre15"><p class="calibre9">Midnight, on the current day</p></td></tr><tr class="calibre12"><td width="4" valign="TOP" class="calibre15"><p class="calibre9"><span><i class="EMPHASIS">tomorrow</i></span></p></td><td width="25" valign="TOP" class="calibre15"><p class="calibre9">Midnight, on the day after the current day</p></td></tr><tr class="calibre12"><td width="4" valign="TOP" class="calibre15"><p class="calibre9"><span><i class="EMPHASIS">yesterday</i></span></p></td><td width="25" valign="TOP" class="calibre15"><p class="calibre9">Midnight on the day before the current day</p></td></tr></tbody></table></div><p class="calibre9">The <span><i class="EMPHASIS">now</i></span> and <span><i class="EMPHASIS">current</i></span> timestamp constants may seem to be identical, looking
        solely at their names. They are, however, very different in terms of storing them in a table.  The
        <span><i class="EMPHASIS">now</i></span> constant is <span><i class="EMPHASIS">translated</i></span> into the timestamp of the system time at the execution
        of whichever command referenced it (e.g., the time of insertion, it <span><i class="EMPHASIS">now</i></span> had been referenced in an
        <tt class="REPLACEABLE">INSERT</tt> statement).  In contrast, the
        <span><i class="EMPHASIS">current</i></span> constant, as it is a deferred identifier, will actually appear as the phrase <span><i class="EMPHASIS">current</i></span> in
        the database.  From there, it can be translated (e.g., via the <tt class="REPLACEABLE">to_char()</tt>
        function) to the timestamp associated with the transaction time of <span><i class="EMPHASIS">any query which requests that value</i></span>.</p><p class="calibre9">In other words, <span><i class="EMPHASIS">current</i></span> will always tell you the "current" time when queried,
        regardless of when it was stored to the table.  The <span><i class="EMPHASIS">current</i></span> constant can be used in special situations,
        such as process tracking, where you may need to calculate the difference between a timestamp made with <span><i class="EMPHASIS">now</i></span>
        and the current date and time to find the total time the process has been running.  <a href="x2632.htm#USINGTHECURRENTCONSTANT">Example 3-28</a>
        demonstrates using the <span><i class="EMPHASIS">now</i></span> and <span><i class="EMPHASIS">current</i></span> constants to create a log of tasks.  First,
        a table is created to house the task's name, its start date and time, and its finished date and time.  Two tasks are then
        added to the table, using the <span><i class="EMPHASIS">now</i></span> constant to set the start date and <span><i class="EMPHASIS">current</i></span> to set the
        completed date.  The reason this is done is to show that both of these tasks are uncompleted.  If a task were to be completed,
        the table could be updated to show a <span><i class="EMPHASIS">now</i></span> timestamp for that task's <tt class="REPLACEABLE">timefinished</tt> column.
        </p><div class="NAVHEADER"><blockquote class="NOTE"><p class="calibre9"><b class="calibre10">Note: </b>The use of time/date constants requires the use of single-quotes around their respective names. See <a href="x2632.htm#USINGTHECURRENTCONSTANT">Example 3-28</a> for a valid representation of single-quoted time/date constants.</p></blockquote></div><div class="NAVHEADER"><a name="USINGTHECURRENTCONSTANT"></a><p class="calibre9"><b class="calibre10">Example 3-28. Using the current and now constants</b></p><pre class="SCREEN">booktown=# <tt class="REPLACEABLE"><b class="calibre10">CREATE TABLE tasklog</b></tt>
booktown=# <tt class="REPLACEABLE"><b class="calibre10">  (taskname char(15),</b></tt>
booktown=# <tt class="REPLACEABLE"><b class="calibre10">   timebegun timestamp,</b></tt>
booktown=# <tt class="REPLACEABLE"><b class="calibre10">   timefinished timestamp);</b></tt>
CREATE
booktown=# <tt class="REPLACEABLE"><b class="calibre10">INSERT INTO tasklog VALUES</b></tt>
booktown=# <tt class="REPLACEABLE"><b class="calibre10">   ('delivery', 'now', 'current');</b></tt>
INSERT 169936 1
booktown=# <tt class="REPLACEABLE"><b class="calibre10">INSERT INTO tasklog VALUES</b></tt>
booktown=# <tt class="REPLACEABLE"><b class="calibre10">   ('remodeling', 'now', 'current');</b></tt>
INSERT 169937 1
booktown=# <tt class="REPLACEABLE"><b class="calibre10">SELECT taskname, timefinished - timebegun AS timespent FROM tasklog;</b></tt>
    taskname     | timespent
-----------------+-----------
 delivery        | 00:15:32
 remodeling      | 00:04:42
(2 rows)
</pre></div><p class="calibre9">Therefore, you generally want to use <span><i class="EMPHASIS">now</i></span> when storing a transaction timestamp in a
        table, or even the <tt class="REPLACEABLE">current_timestamp</tt> function, which is equivalent to the output of
        <span><i class="EMPHASIS">now</i></span>. <a href="x2632.htm#COMPARINGNOWTOCURRENTEXAMPLE">Example 3-29</a> shows how this could be a potentially disastrous
        SQL design issue if not properly understood. It shows a pair of <tt class="REPLACEABLE">INSERT</tt> statements;
        one which uses <span><i class="EMPHASIS">now</i></span>, another which uses <tt class="REPLACEABLE">current</tt>.  If you watch the first row
         returned from the two queries (the row with a <span><i class="EMPHASIS">current</i></span> timestamp), you'll notice it changes in
         each query to show the updated system time, while the second row remains the same (this is he the row in which <span><i class="EMPHASIS">now</i></span>
         was used). </p><div class="NAVHEADER"><a name="COMPARINGNOWTOCURRENTEXAMPLE"></a><p class="calibre9"><b class="calibre10">Example 3-29. Comparing now to current</b></p><pre class="SCREEN">booktown=# <tt class="REPLACEABLE"><b class="calibre10">INSERT INTO shipments (customer_id, isbn, ship_date) </b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">       VALUES (1, '039480001X', 'current');</b></tt>
INSERT 3391221 1
booktown=# <tt class="REPLACEABLE"><b class="calibre10">INSERT INTO shipments (customer_id, isbn, ship_date) </b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">       VALUES (2, '0394800753', 'now');</b></tt>
INSERT 3391222 1
booktown=# <tt class="REPLACEABLE"><b class="calibre10">SELECT isbn, ship_date FROM shipments;</b></tt>
    isbn    |       ship_date
------------+------------------------
 039480001X | current
 0394800753 | 2001-08-10 18:17:49-07
(2 rows)

booktown=# <tt class="REPLACEABLE"><b class="calibre10">SELECT isbn, </b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">       to_char(ship_date, 'YYYY-MM-DD HH24:MI:SS') </b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">       AS value</b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">  FROM shipments;</b></tt>
    isbn    |        value
------------+---------------------
 039480001X | 2001-08-10 18:21:22
 0394800753 | 2001-08-10 18:17:49
(2 rows)

booktown=# <tt class="REPLACEABLE"><b class="calibre10">SELECT isbn, to_char(ship_date, 'YYYY-MM-DD HH24:MI:SS') AS value</b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">  FROM shipments;</b></tt>
    isbn    |        value
------------+---------------------
 039480001X | 2001-08-10 18:22:35
 0394800753 | 2001-08-10 18:17:49
(2 rows)</pre></div></div></div><div class="NAVHEADER"><h2 class="SECT"><a name="GEOMETRICTYPES" class="calibre8">Geometric types</a></h2><p class="calibre9">Geometric types in PostgreSQL represent two dimensional spatial objects. These types are not standard SQL data types,
      and will not be discussed in depth in this book. <a href="x2632.htm#GEOMETRICTYPESTABLE">Table 3-24</a> gives a brief overview of each of
      the available geometric types.</p><div class="NAVHEADER"><a name="GEOMETRICTYPESTABLE"></a><p class="calibre9"><b class="calibre10">Table 3-24. Geometric types</b></p><table border="1" width="100%" class="calibre"><thead class="calibre11"><tr class="calibre12"><th width="4" valign="TOP" class="calibre13"><p class="calibre9">Type Name</p></th><th width="6" valign="TOP" class="calibre13"><p class="calibre9">Storage</p></th><th width="11" valign="TOP" class="calibre13"><p class="calibre9">Description</p></th><th width="7" valign="TOP" class="calibre13"><p class="calibre9">Syntax</p></th></tr></thead><tbody class="calibre14"><tr class="calibre12"><td width="4" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE">point</tt></p></td><td width="6" valign="TOP" class="calibre15"><p class="calibre9">16 bytes</p></td><td width="11" valign="TOP" class="calibre15"><p class="calibre9">A dimensionless object with no properties except for its location, where x and y are floating-point numbers.</p></td><td width="7" valign="TOP" class="calibre15"><p class="calibre9">(<tt class="REPLACEABLE"><i class="EMPHASIS">x</i></tt> , <tt class="REPLACEABLE"><i class="EMPHASIS">y</i></tt> )</p></td></tr><tr class="calibre12"><td width="4" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE">lseg</tt></p></td><td width="6" valign="TOP" class="calibre15"><p class="calibre9">32 bytes</p></td><td width="11" valign="TOP" class="calibre15"><p class="calibre9">Finite line segment. The points specified are the end points of the line segment.</p></td><td width="7" valign="TOP" class="calibre15"><p class="calibre9">((<tt class="REPLACEABLE"><i class="EMPHASIS">x1</i></tt> , <tt class="REPLACEABLE"><i class="EMPHASIS">y1</i></tt> ), (<tt class="REPLACEABLE"><i class="EMPHASIS">x2</i></tt> , <tt class="REPLACEABLE"><i class="EMPHASIS">y2</i></tt> ))</p></td></tr><tr class="calibre12"><td width="4" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE">box</tt></p></td><td width="6" valign="TOP" class="calibre15"><p class="calibre9">32 bytes</p></td><td width="11" valign="TOP" class="calibre15"><p class="calibre9">Rectangular box. The points specified are the opposite corners of the box.</p></td><td width="7" valign="TOP" class="calibre15"><p class="calibre9">((<tt class="REPLACEABLE"><i class="EMPHASIS">x1</i></tt> , <tt class="REPLACEABLE"><i class="EMPHASIS">y1</i></tt> ), (<tt class="REPLACEABLE"><i class="EMPHASIS">x2</i></tt> , <tt class="REPLACEABLE"><i class="EMPHASIS">y2</i></tt> ))</p></td></tr><tr class="calibre12"><td width="4" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE">path</tt></p></td><td width="6" valign="TOP" class="calibre15"><p class="calibre9">4 + 32 * <tt class="REPLACEABLE"><i class="EMPHASIS">n</i></tt> bytes</p></td><td width="11" valign="TOP" class="calibre15"><p class="calibre9">Closed path (similar to polygon). A connected set of <tt class="REPLACEABLE"><i class="EMPHASIS">n</i></tt> points.</p></td><td width="7" valign="TOP" class="calibre15"><p class="calibre9">((<tt class="REPLACEABLE"><i class="EMPHASIS">x1</i></tt> , <tt class="REPLACEABLE"><i class="EMPHASIS">y1</i></tt> ), ...)</p></td></tr><tr class="calibre12"><td width="4" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE">path</tt></p></td><td width="6" valign="TOP" class="calibre15"><p class="calibre9">4 + 32 * <tt class="REPLACEABLE"><i class="EMPHASIS">n</i></tt> bytes</p></td><td width="11" valign="TOP" class="calibre15"><p class="calibre9">Open path. A connected set of <tt class="REPLACEABLE"><i class="EMPHASIS">n</i></tt> points.</p></td><td width="7" valign="TOP" class="calibre15"><p class="calibre9">[(<tt class="REPLACEABLE"><i class="EMPHASIS">x1</i></tt> , <tt class="REPLACEABLE"><i class="EMPHASIS">y1</i></tt> ), ...]</p></td></tr><tr class="calibre12"><td width="4" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE">polygon</tt></p></td><td width="6" valign="TOP" class="calibre15"><p class="calibre9">4 + 32 * <tt class="REPLACEABLE"><i class="EMPHASIS">n</i></tt> bytes</p></td><td width="11" valign="TOP" class="calibre15"><p class="calibre9">Polygon (similar to closed path), with <tt class="REPLACEABLE"><i class="EMPHASIS">n</i></tt> end points defining line segments that makes up the boundary of the polygon.</p></td><td width="7" valign="TOP" class="calibre15"><p class="calibre9">((<tt class="REPLACEABLE"><i class="EMPHASIS">x1</i></tt> , <tt class="REPLACEABLE"><i class="EMPHASIS">y1</i></tt> ), ...)</p></td></tr><tr class="calibre12"><td width="4" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE">circle</tt></p></td><td width="6" valign="TOP" class="calibre15"><p class="calibre9">24 bytes</p></td><td width="11" valign="TOP" class="calibre15"><p class="calibre9">The point (<tt class="REPLACEABLE"><i class="EMPHASIS">x</i></tt> , <tt class="REPLACEABLE"><i class="EMPHASIS">y</i></tt> ) is the center, while <tt class="REPLACEABLE"><i class="EMPHASIS">r</i></tt> is the radius of the circle.</p></td><td width="7" valign="TOP" class="calibre15"><p class="calibre9">&lt;(<tt class="REPLACEABLE"><i class="EMPHASIS">x</i></tt> , <tt class="REPLACEABLE"><i class="EMPHASIS">y</i></tt> ), <tt class="REPLACEABLE"><i class="EMPHASIS">r</i></tt> &gt;</p></td></tr></tbody></table></div></div><div class="NAVHEADER"><h2 class="SECT"><a name="AEN4496" class="calibre8">Arrays</a></h2><p class="calibre9">The original relational model specifies that the values represented by columns within a table be an atomic piece of
      data, object-relational database systems such as PostgreSQL allow non-atomic values to be used through data
      structures called <span><i class="EMPHASIS">arrays</i></span>.</p><p class="calibre9">An array is a collection of data values referenced through a single identifier. The array may be a collection
      of values of a built-in data type or a user-defined data type, but every value in the array must be of the same type.
      Arrays can be accessed from a table through subscript notation via square brackets (e.g.,
      <tt class="REPLACEABLE">my_array[0]</tt>). You can also use an array constant via curly braces within single quotes (e.g.,
      <tt class="REPLACEABLE">'{value_one,value_two,value_three}'</tt>).</p><div class="NAVHEADER"><h3 class="AUTHOR"><a name="AEN4509" class="calibre8">Arrays in tables</a></h3><p class="calibre9">When defining an array, the syntax allows for the array to be defined either as fixed-length or variable-length;
        however as of PostgreSQL 7.1.2, the fixed-length size restriction is not enforced. This means that you may treat the
        array as having a fixed number of elements at all times, but it can still be dynamically sized.
        For example, it is perfectly acceptable for a single column defined as an array to contain three
        values in one record, four values in another, and no values in a third.</p><p class="calibre9">Additionally, arrays may be defined as being <span><i class="EMPHASIS">multi-dimensional</i></span>, meaning that each element of the
        array may actually represent <span><i class="EMPHASIS">another array</i></span>, rather than an atomic value. Values that are selected
        from a multi-dimensional array will consist of nested curly braces in order to show an array within an array, as follows:</p><pre class="SCREEN">booktown=# <tt class="REPLACEABLE"><b class="calibre10">SELECT editions FROM my_notes WHERE title='The Cat in the Hat';</b></tt>
                           editions
---------------------------------------------------------------
 {{"039480001X","1st Ed, Hard Cover"},{"0394900014","1st Ed"}}
(1 row)</pre></div><div class="NAVHEADER"><h3 class="AUTHOR"><a name="AEN4517" class="calibre8">Array constants</a></h3><p class="calibre9">In order to actually insert array values into a table column, you need a way to refer to several values
        as an array in a SQL statement. The formal syntax of an array constant is a grouping of values, separated by delimiters
        (commas, for built-in data types), enclosed by curly braces (<tt class="REPLACEABLE">{}</tt>), which are in turn
        enclosed by single quotes, as follows:</p><pre class="SCREEN"> '{ <tt class="REPLACEABLE"><i class="EMPHASIS">value1</i></tt> , <tt class="REPLACEABLE"><i class="EMPHASIS">value2</i></tt> [, ...] }'</pre><p class="calibre9">The <tt class="REPLACEABLE"><i class="EMPHASIS">values</i></tt> in this syntax can be any valid PostgreSQL data type.  As the entire array is
        constrained by single quotes, the use of single quotes <span><i class="EMPHASIS">within</i></span> an array value must be escaped, just
        as they must be within a string constant. The use of commas to delimit the values, however, poses an interesting problem
        pertaining to the use of character strings which contain commas themselves, as the commas will be interpreted as delimiters
        if not within single-quotes. However, as just mentioned, the singles quotes constrain the <span><i class="EMPHASIS">array</i></span>, not
        the array's <tt class="REPLACEABLE"><i class="EMPHASIS">values</i></tt>.</p><p class="calibre9">PostgreSQL's method of handling this is to use <span><i class="EMPHASIS">double-quotes</i></span> to quote string constants where
        single-quotes would ordinarily be used outside of an array context, as follows:</p><pre class="SCREEN"> '{"value1" , "value 2, which contains a comma" }'</pre><p class="calibre9">It's vital to remember that arrays <span><i class="EMPHASIS">require</i></span> the single quotes surrounding the curly braces in
        order to be interpreted correctly by PostgreSQL. You can think of array constants as being akin to a special type of
        string constant, which is interpreted as an array based on where it is used (e.g., when used to add records to a target
        column which is of an array data type). This is because unless used in an array context, a constant of the this format
        will be interpreted by PostgreSQL as a normal string constant (as it is bound by single quotes) which just happens to
        include curly braces.</p></div></div><div class="NAVHEADER"><h2 class="SECT"><a name="TYPECOERCION" class="calibre8">Type Coercion</a></h2><p class="calibre9">PostgreSQL supports three separate conventions for type coercion (also called <span><i class="EMPHASIS">type casting</i></span>, or
      <span><i class="EMPHASIS">explicit type casting</i></span>). Type coercion is a somewhat ugly looking term which refers to a
      PostgreSQL method for changing a value from one data type to another. In the middle of a SQL statement, this has the net
      effect of explicitly creating a constant of an arbitrary type.</p><p class="calibre9">Generally any of the following three methods can be used in order to cast the value contained within a string constant to
      another type: </p><p class="calibre9"> </p><p class="calibre9"></p><ul class="calibre21"><li class="calibre22"><p class="calibre9"><tt class="REPLACEABLE"/><tt class="REPLACEABLE"><i class="EMPHASIS">type</i></tt> '<tt class="REPLACEABLE"><i class="EMPHASIS">value</i></tt> '</p></li><li class="calibre22"><p class="calibre9"><tt class="REPLACEABLE">'</tt><tt class="REPLACEABLE"><i class="EMPHASIS">value</i></tt> '::<tt class="REPLACEABLE"><i class="EMPHASIS">type</i></tt></p></li><li class="calibre22"><p class="calibre9"><tt class="REPLACEABLE">CAST ('</tt><tt class="REPLACEABLE"><i class="EMPHASIS">value</i></tt> ' AS <tt class="REPLACEABLE"><i class="EMPHASIS">type</i></tt> )</p></li></ul>
<p class="calibre9">In the case of maintained numeric constants that you wish to cast to a character string, you will need to use one of the following
      syntax forms: </p><p class="calibre9"> </p><p class="calibre9"></p><ul class="calibre21"><li class="calibre22"><p class="calibre9"><tt class="REPLACEABLE"/><tt class="REPLACEABLE"><i class="EMPHASIS">value</i></tt> ::<tt class="REPLACEABLE"><i class="EMPHASIS">type</i></tt></p></li><li class="calibre22"><p class="calibre9"><tt class="REPLACEABLE">CAST (</tt><tt class="REPLACEABLE"><i class="EMPHASIS">value</i></tt> AS <tt class="REPLACEABLE"><i class="EMPHASIS">type</i></tt> )</p></li></ul>
<p class="calibre9">The <tt class="REPLACEABLE"><i class="EMPHASIS">value</i></tt> in this syntax represents the constant whose data type you wish to modify,
      and <tt class="REPLACEABLE"><i class="EMPHASIS">type</i></tt> represents the type that you wish to coerce, or cast, the value into. </p><div class="NAVHEADER"><blockquote class="NOTE"><p class="calibre9"><b class="calibre10">Note: </b>Remember that the <tt class="REPLACEABLE">money</tt> type is deprecated, and therefore not easily cast.</p></blockquote></div><p class="calibre9">Constants are not the only data values that may be coerced to different types. Columns of a data set returned by a SQL query
      may be cast by using its identifier in one of the following syntax forms:
      </p><p class="calibre9"> </p><p class="calibre9"></p><ul class="calibre21"><li class="calibre22"><p class="calibre9"><tt class="REPLACEABLE"/><tt class="REPLACEABLE"><i class="EMPHASIS">identifier</i></tt> ::<tt class="REPLACEABLE"><i class="EMPHASIS">type</i></tt></p></li><li class="calibre22"><p class="calibre9"><tt class="REPLACEABLE">CAST (</tt><tt class="REPLACEABLE"><i class="EMPHASIS">identifier</i></tt> AS <tt class="REPLACEABLE"><i class="EMPHASIS">type</i></tt> )</p></li></ul>
<p class="calibre9">Bear in mind that not every data type can be coerced into every other data type. For example, there is no meaningful way to convert the
      character string <span><i class="EMPHASIS">abcd</i></span> into a binary <tt class="REPLACEABLE">bit</tt> type. Invalid casting will result in an error from
      PostgreSQL. Common valid casts are from character string, date/time type, or a numeric type to text, or character strings to numeric values.</p><p class="calibre9">In addition to these type casting conventions, there are some functions that can be called to achieve
      essentially the same effect as an explicit cast of any of the previously mentioned forms. These often bear the name of the
      type itself (such as the <tt class="REPLACEABLE">text()</tt> function), though others are named more specifically
      (such as <tt class="REPLACEABLE">bitfromint4()</tt>). <a href="x2632.htm#USINGTYPECONVERSIONFUNCTIONS">Example 3-30</a> shows such a function, converting the integer 1000 to a character string of type
      <tt class="REPLACEABLE">text</tt> representing the characters <span><i class="EMPHASIS">1000</i></span>.
      </p><div class="NAVHEADER"><a name="USINGTYPECONVERSIONFUNCTIONS"></a><p class="calibre9"><b class="calibre10">Example 3-30. Using Type Conversion Functions</b></p><pre class="SCREEN">booktown=# <tt class="REPLACEABLE"><b class="calibre10">SELECT text(1000) </b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">AS explicit_text;</b></tt>
 explicit_text
---------------
 1000
(1 row)</pre></div><p class="calibre9">Because of conflicting semantics recognized by PostgreSQL's parser, the type coercion format of
        <tt class="REPLACEABLE"><i class="EMPHASIS">type</i></tt> <tt class="REPLACEABLE">'</tt><tt class="REPLACEABLE"><i class="EMPHASIS">value</i></tt> <tt class="REPLACEABLE">'</tt> can only
        be used to specify the data type of a single value (e.g., a string constant bound by single quotes). In contrast, the
        other available methods of type coercion 
        (<tt class="REPLACEABLE">'</tt><tt class="REPLACEABLE"><i class="EMPHASIS">value</i></tt> <tt class="REPLACEABLE">'::</tt><tt class="REPLACEABLE"><i class="EMPHASIS">type</i></tt>,
        <tt class="REPLACEABLE">CAST('</tt><tt class="REPLACEABLE"><i class="EMPHASIS">value</i></tt><tt class="REPLACEABLE">' AS </tt><tt class="REPLACEABLE"><i class="EMPHASIS">type</i></tt><tt class="REPLACEABLE"> )</tt> 
        and type conversion functions, where applicable) can be used to to specify the type of arbitrary expressions.</p><p class="calibre9">This is partially because attempting to follow a data type with a grouped expression (e.g., in parentheses) will
        cause PostgreSQL to expect a <span><i class="EMPHASIS">function</i></span> with the name of the provided data type (which will often
        cause an error) while each of the other methods are syntactically valid upon grouped expressions.

<pre class="SCREEN">booktown=# <tt class="REPLACEABLE"><b class="calibre10">SELECT 1 + integer ('1' || '2') AS add_one_to_twelve;</b></tt>
ERROR:  Function 'integer(text)' does not exist
        Unable to identify a function that satisfies the given argument types
        You may need to add explicit typecasts
booktown=# <tt class="REPLACEABLE"><b class="calibre10">SELECT 1 + ('1' || '2')::integer AS add_one_to_twelve;</b></tt>
 add_one_to_twelve
-------------------
                13
(1 row)

booktown=# <tt class="REPLACEABLE"><b class="calibre10">SELECT 1 + CAST('1' || '2' AS integer) AS add_on_to_twelve;</b></tt>
 add_on_to_twelve
------------------
               13
(1 row)</pre>
</p></div></div><div class="NAVHEADER"><hr width="100%" class="calibre6"/><table summary="Footer navigation table" width="100%" border="0" cellpadding="0" cellspacing="0" class="calibre"><tr class="calibre1"><td width="33%" valign="top" class="calibre3"><a href="x1428.htm" accesskey="P">Prev</a></td><td width="34%" valign="top" class="calibre4"><a href="book1.htm" accesskey="H">Home</a></td><td width="33%" valign="top" class="calibre5"><a href="x4636.htm" accesskey="N">Next</a></td></tr><tr class="calibre1"><td width="33%" valign="top" class="calibre3">SQL Statements</td><td width="34%" valign="top" class="calibre4"><a href="c1164.htm" accesskey="U">Up</a></td><td width="33%" valign="top" class="calibre5">Tables in PostgreSQL</td></tr></table></div></div>

{% endraw %}

