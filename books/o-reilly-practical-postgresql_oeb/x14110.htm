---
layout: page
title: "Unknown"
prev: x13546.htm
next: x14316.htm
book_path: books/o-reilly-practical-postgresql_oeb/
---
{% include JB/setup %}
{% raw %}
<div>
<div class="NAVHEADER"><table summary="Header navigation table" width="100%" border="0" cellpadding="0" cellspacing="0" class="calibre"><tr class="calibre1"><th colspan="3" class="calibre2">Practical PostgreSQL</th></tr><tr class="calibre1"><td width="10%" valign="bottom" class="calibre3"><a href="x13546.htm" accesskey="P">Prev</a></td><td width="80%" valign="bottom" class="calibre4">Chapter 7. Advanced Features</td><td width="10%" valign="bottom" class="calibre5"><a href="x14316.htm" accesskey="N">Next</a></td></tr></table><hr width="100%" class="calibre6"/></div><div class="NAVHEADER"><h1 class="calibre7"><a name="AEN14110" class="calibre8">Arrays</a></h1><p class="calibre9">As documented in <a href="c1164.htm">Chapter 3</a>, PostgreSQL supports non-atomic values in individual table columns
    through data constructs called <span><i class="EMPHASIS">arrays</i></span>. An array itself is not a data type, but an extension of any
    PostgreSQL data type.</p><div class="NAVHEADER"><h2 class="SECT"><a name="AEN14117" class="calibre8">Creating an Array Column</a></h2><p class="calibre9">A simple array column is created by appending a pair of square brackets to the data type of the intended array
      column within a <tt class="REPLACEABLE">CREATE TABLE</tt> or <tt class="REPLACEABLE">ALTER TABLE</tt> statement.
      These brackets indicate that more than a single value of the described data type may be inserted without limit into that
      column. For example: </p><pre class="SCREEN">  single_array type[]   -- A single array of values.</pre><p class="calibre9">Additional square brackets may be added to create <span><i class="EMPHASIS">multidimensional arrays</i></span>, which
      may store an array of array values. For example:</p><pre class="SCREEN">  multi_array  type[][] -- A multidimensional array of values.</pre><p class="calibre9">In theory, an integer value <tt class="REPLACEABLE"><i class="EMPHASIS">n</i></tt> could be supplied within the square brackets to produce a
      <span><i class="EMPHASIS">fixed-length</i></span> array (one which always has <tt class="REPLACEABLE"><i class="EMPHASIS">n</i></tt> members, and no more). As of
      PostgreSQL 7.1.x, however, this restriction is not enforced, and there is no practical difference between an array
      created with a fixed length and one created without.</p><p class="calibre9"><a href="x14110.htm#CREATINGATABLEWITHANARRAYCOLUMN">Example 7-16</a> creates a table named
      <tt class="REPLACEABLE">favorite_books</tt>.  This table associates an integer value of an employee with a
      one-dimensional character string array of type <tt class="REPLACEABLE">text</tt> called
      <tt class="REPLACEABLE">books</tt>.</p><div class="NAVHEADER"><a name="CREATINGATABLEWITHANARRAYCOLUMN"></a><p class="calibre9"><b class="calibre10">Example 7-16. Creating a table with an array column</b></p><pre class="SCREEN">booktown=# <tt class="REPLACEABLE"><b class="calibre10">CREATE TABLE favorite_books</b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">             (employee_id integer, books text[]);</b></tt>
CREATE</pre></div><p class="calibre9">The table created by <a href="x14110.htm#CREATINGATABLEWITHANARRAYCOLUMN">Example 7-16</a> allows any number of book titles to be stored
      in a single array column, for each employee. The advantage of such an array of discrete text values over a single text
      string (which also, of course, could contain multiple titles) is that each title is kept physically separate from each
      other title in the array column. Since the system knows where each array value begins and ends, you can choose titles by
      their subscript, rather than having to manually parse them out of a long text string.</p><p class="calibre9">Creating a multidimensional array column is very similar. The only distinction is that another pair of square
      brackets follows the first pair, as shown earlier in this section. <a href="x14110.htm#CREATINGATABLEWITHAMULTIDIMENSIONALARRAY">Example 7-17</a> creates a table called
      <tt class="REPLACEABLE">favorite_authors</tt>, with an <tt class="REPLACEABLE">employee_id</tt> column of type
      <tt class="REPLACEABLE">integer</tt>, and multidimensional text array of
      <tt class="REPLACEABLE">author_and_titles</tt>. This essentially creates an array of text arrays.</p><div class="NAVHEADER"><a name="CREATINGATABLEWITHAMULTIDIMENSIONALARRAY"></a><p class="calibre9"><b class="calibre10">Example 7-17. Creating a table with a multidimensional array column</b></p><pre class="SCREEN">booktown=# <tt class="REPLACEABLE"><b class="calibre10">CREATE TABLE favorite_authors (employee_id integer,</b></tt>
booktown(# <tt class="REPLACEABLE"><b class="calibre10">                               authors_and_titles text[][]);</b></tt>
CREATE</pre></div></div><div class="NAVHEADER"><h2 class="SECT"><a name="AEN14156" class="calibre8">Inserting Values into Array Columns</a></h2><p class="calibre9">A special kind of syntax is used in order to insert multiple values into a single column. This syntax allows you to
      describe an <span><i class="EMPHASIS">array constant</i></span>. As documented in <a href="c1164.htm">Chapter 3</a>, the syntax of an array constant (for referring to PostgreSQL
      array values in SQL statements) is a special arrangement of curly braces, double-quotes and commas, all bound by single-quotes.
      Double quotes are required only when working with an array of character strings. Therefore, the general forms of array constants are:</p><pre class="SCREEN">  '{ "text1" [, ...] }' -- A character string array.
  '{ numeric [, ...] }' -- A numeric array.</pre><p class="calibre9">These syntax forms illustrate how to handle string and numeric arrays, but a column may be defined as an array of any
      arbitrary type (including <tt class="REPLACEABLE">boolean</tt>, <tt class="REPLACEABLE">date</tt>, and
      <tt class="REPLACEABLE">time</tt> types). Generally, if you would ordinarily use single-quotes to describe a value in a
      non-array context (such as with a string constant, or timestamp value), double-quotes should be used for that value in an
      array constant.</p><p class="calibre9"><a href="x14110.htm#INSERTINGARRAYCONSTANTS">Example 7-18</a> inserts a pair of records into the
      <tt class="REPLACEABLE">favorite_books</tt> table. The first statement inserts a single favorite book for the employee
      with id 102, and the second statement inserts two titles for the employee with id 103.</p><p class="calibre9"><a href="x14110.htm#INSERTINGARRAYCONSTANTS">Example 7-18</a> executes two SQL <tt class="REPLACEABLE">INSERT</tt> statements, which
      insert a pair of array constant values.</p><div class="NAVHEADER"><a name="INSERTINGARRAYCONSTANTS"></a><p class="calibre9"><b class="calibre10">Example 7-18. Inserting array constants</b></p><pre class="SCREEN">booktown=# <tt class="REPLACEABLE"><b class="calibre10">INSERT INTO favorite_books VALUES </b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">            (102, '{"The Hitchhiker\'s Guide to the Galaxy"}');</b></tt>
INSERT 3628399 1
booktown=# <tt class="REPLACEABLE"><b class="calibre10">INSERT INTO favorite_books VALUES </b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">            (103, '{"The Hobbit", "Kitten, Squared"}');</b></tt>
INSERT 3628400 1</pre></div><p class="calibre9">Notice that, in <a href="x14110.htm#INSERTINGARRAYCONSTANTS">Example 7-18</a>, curly braces are still required to insert a single value
      into an array. Notice also that the single-quote in the title (first <tt class="REPLACEABLE">INSERT</tt> statement) still requires a backslash preceding it, even though it is
      surrounded by <span><i class="EMPHASIS">double-quotes</i></span>. This is because the array constant itself is parsed as if it were one
      long string constant, and subsequently interpreted as an array based on the context of its target column.</p><p class="calibre9">The insertion of values into a multidimensional array requires a pair of curly braces for each array; an array of
      arrays must therefore itself be bound in curly braces, while each of its member arrays should be separated by one another
      with commas. <a href="x14110.htm#INSERTINGVALUESINTOMULTIDIMENSIONALARRAYS">Example 7-19</a> inserts a single row containing a multidimensional
      array constant into the <tt class="REPLACEABLE">favorite_authors</tt> table, created in <a href="x14110.htm#CREATINGATABLEWITHAMULTIDIMENSIONALARRAY">Example 7-17</a>.</p><div class="NAVHEADER"><a name="INSERTINGVALUESINTOMULTIDIMENSIONALARRAYS"></a><p class="calibre9"><b class="calibre10">Example 7-19. Inserting values into multidimensional arrays</b></p><pre class="SCREEN">booktown=# <tt class="REPLACEABLE"><b class="calibre10">INSERT INTO favorite_authors</b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">            VALUES (102,</b></tt>
booktown(# <tt class="REPLACEABLE"><b class="calibre10">            '{{"J.R.R. Tolkien", "The Silmarillion"},</b></tt>
booktown'# <tt class="REPLACEABLE"><b class="calibre10">              {"Charles Dickens", "Great Expectations"},</b></tt>
booktown'# <tt class="REPLACEABLE"><b class="calibre10">              {"Ariel Denham", "Attic Lives"}}');</b></tt>
INSERT 3727961 1</pre></div><p class="calibre9">Notice that the inserted multidimensional array in <a href="x14110.htm#INSERTINGVALUESINTOMULTIDIMENSIONALARRAYS">Example 7-19</a>
      contains three text arrays, which each have two members. There is no systematic relationship between these arrays, though
      the implied relationship from the context is that the first members of each array are authors corresponding to the second
      members of each array, which are the favorite titles from the associated author.</p></div><div class="NAVHEADER"><h2 class="SECT"><a name="AEN14197" class="calibre8">Selecting Values From Array Columns</a></h2><p class="calibre9">Selecting an array column from a table will result in the entire array being returned in the same constant format
      described in the previous section. <a href="x14110.htm#SELECTINGENTIREARRAYVALUES">Example 7-20</a> retrieves the entire arrays for inserted
      rows in the <tt class="REPLACEABLE">books</tt> column of the <tt class="REPLACEABLE">favorite_books</tt>
      table.</p><div class="NAVHEADER"><a name="SELECTINGENTIREARRAYVALUES"></a><p class="calibre9"><b class="calibre10">Example 7-20. Selecting entire array values</b></p><pre class="SCREEN">booktown=# <tt class="REPLACEABLE"><b class="calibre10">SELECT books FROM favorite_books;</b></tt>
                  books
------------------------------------------
 {"The Hitchhiker's Guide to the Galaxy"}
 {"The Hobbit","Kitten, Squared"}
(2 rows)</pre></div><p class="calibre9"> While it is helpful to be able to return the entire array, the ability to retrieve only a specific portion of an
      array is often more useful. To this end, you need to learn how to work with array subscripts and slices. </p><div class="NAVHEADER"><h3 class="AUTHOR"><a name="ARRAYSUBSCRIPTS" class="calibre8">Array subscripts</a></h3><p class="calibre9">The usefulness of arrays lies largely in the fact that you can use <span><i class="EMPHASIS">subscripts</i></span> to specify the
        value that you wish to view. A subscript is an integer value surrounded by square brackets, that describes the value you
        want to select. This number describes the precedence of the value you wish to select, from left to right in the
        array.</p><p class="calibre9">Unlike arrays in programming languages such as C, PostgreSQL begins counting array elements at 1, not
        0. <a href="x14110.htm#SELECTINGARRAYVALUESWITHSUBSCRIPTS">Example 7-21</a> uses the <tt class="REPLACEABLE">[1]</tt>
        subscript on the <tt class="REPLACEABLE">books</tt> column of the <tt class="REPLACEABLE">favorite_books</tt> table
        to select only the first of an employee's favorite titles. Notice that the query returns values without braces or double-quotes.
        This is because a single text value need only be returned as a single text constant, not as an array.</p><div class="NAVHEADER"><a name="SELECTINGARRAYVALUESWITHSUBSCRIPTS"></a><p class="calibre9"><b class="calibre10">Example 7-21. Selecting array values with subscripts</b></p><pre class="SCREEN">booktown=# <tt class="REPLACEABLE"><b class="calibre10">SELECT books[1] FROM favorite_books;</b></tt>
                books
--------------------------------------
 The Hitchhiker's Guide to the Galaxy
 The Hobbit
(2 rows)</pre></div><p class="calibre9">Specifying a subscript for an array element which holds no value results in a <tt class="REPLACEABLE">NULL</tt>
        value being selected. The <tt class="REPLACEABLE">IS NOT NULL</tt> keywords may be useful in conjunction with such
        selections. <a href="x14110.htm#AVOIDINGNULLVALUESINARRAYS">Example 7-22</a> demonstrates two queries; the first returns two rows,
        <tt class="REPLACEABLE">NULL</tt> value as well as a title. The second query only returns the title (and not the row
        with the <tt class="REPLACEABLE">NULL</tt> value as a result of its use of the <tt class="REPLACEABLE">WHERE</tt>
        clause, with the <tt class="REPLACEABLE">IS NOT NULL</tt> condition.</p><div class="NAVHEADER"><a name="AVOIDINGNULLVALUESINARRAYS"></a><p class="calibre9"><b class="calibre10">Example 7-22. Avoiding NULL values in arrays</b></p><pre class="SCREEN">booktown=# <tt class="REPLACEABLE"><b class="calibre10">SELECT books[2] FROM favorite_books;</b></tt>
      books
-----------------
 
 Kitten, Squared
(2 rows)

booktown=# <tt class="REPLACEABLE"><b class="calibre10">SELECT books[2] FROM favorite_books </b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">                WHERE books[2] IS NOT NULL;</b></tt>
      books
-----------------
 Kitten, Squared
(1 row)</pre></div><p class="calibre9">Selecting from a multidimensional array requires an additional subscript following the initial subscript. The first
        subscript refers to which array that you are retrieving data from, while the second subscript refers to which member of
        the specified array is to be retrieved. <a href="x14110.htm#SELECTINGFROMAMULTIDIMENSIONALARRAY">Example 7-23</a> demonstrates selecting the
        first author, and associated title for that author, from the <tt class="REPLACEABLE">favorite_authors</tt> table created
        in <a href="x14110.htm#INSERTINGVALUESINTOMULTIDIMENSIONALARRAYS">Example 7-19</a>.</p><div class="NAVHEADER"><a name="SELECTINGFROMAMULTIDIMENSIONALARRAY"></a><p class="calibre9"><b class="calibre10">Example 7-23. Selecting From a Multi-Dimensional Array</b></p><pre class="SCREEN">booktown=# <tt class="REPLACEABLE"><b class="calibre10">SELECT authors_and_titles[1][1] AS author,</b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">       authors_and_titles[1][2] AS title</b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">       FROM favorite_authors;</b></tt>
     author     |      title
----------------+------------------
 J.R.R. Tolkien | The Silmarillion
(1 row)</pre></div></div><div class="NAVHEADER"><h3 class="AUTHOR"><a name="AEN14245" class="calibre8">Array slices</a></h3><p class="calibre9">PostgreSQL also supports <span><i class="EMPHASIS">slices</i></span> in array selection. These are similar to array subscripts, but
        describe a <span><i class="EMPHASIS">range</i></span> of values to be returned. The syntax of a slice is a pair of integers, separated by a
        colon (<tt class="REPLACEABLE">:</tt>), surrounded by square brackets. For example,
        <tt class="REPLACEABLE">[2:5]</tt> specifies the second, third, fourth, and fifth array values of a given
        array. The result of a slice selection is returned as an array constant that is essentially a sub-array of the entire
        array (though a slice may extend from the beginning to the end of an array).</p><p class="calibre9"><a href="x14110.htm#SELECTINGARRAYVALUESWITHSLICES">Example 7-24</a> selects the range of the first two book titles in the
        <tt class="REPLACEABLE">books</tt> test array column from the <tt class="REPLACEABLE">favorite_books</tt> table.
        Even though the first returned row has only one title, it is still returned as an array with one member value.</p><div class="NAVHEADER"><a name="SELECTINGARRAYVALUESWITHSLICES"></a><p class="calibre9"><b class="calibre10">Example 7-24. Selecting array values with slices</b></p><pre class="SCREEN">booktown=# <tt class="REPLACEABLE"><b class="calibre10">SELECT books[1:2] FROM favorite_books;</b></tt>
                  books
------------------------------------------
 {"The Hitchhiker's Guide to the Galaxy"}
 {"The Hobbit","Kitten, Squared"}
(2 rows)</pre></div><p class="calibre9">Array slices can be somewhat unpredictable with multidimensional arrays as of PostgreSQL 7.1.x. It is therefore
        recommended to stick to exact subscript values when working with multidimensional arrays until this support is
        improved.</p></div><div class="NAVHEADER"><h3 class="AUTHOR"><a name="AEN14261" class="calibre8">Array dimensions</a></h3><p class="calibre9">It can be useful to know the number of values stored in an array. You may use the
        <tt class="REPLACEABLE">array_dims()</tt> function to accomplish this. It accepts as a parameter a single identifier,
        which is the name of the array column that you wish to perform the function on. The result is returned as a character
        string describing the array with the same syntax used in array slices.  <a href="x14110.htm#USINGARRAYDIMS">Example 7-25</a> calls the
        <tt class="REPLACEABLE">array_dims()</tt> function on the <tt class="REPLACEABLE">books</tt> column of the
        <tt class="REPLACEABLE">favorite_books</tt> table.</p><div class="NAVHEADER"><a name="USINGARRAYDIMS"></a><p class="calibre9"><b class="calibre10">Example 7-25. Using array_dims( )</b></p><pre class="SCREEN">booktown=# <tt class="REPLACEABLE"><b class="calibre10">SELECT array_dims(books) FROM favorite_books;</b></tt>
 array_dims
------------
 [1:1]
 [1:2]
(2 rows)</pre></div></div></div><div class="NAVHEADER"><h2 class="SECT"><a name="AEN14273" class="calibre8">Updating Values in Array Columns</a></h2><p class="calibre9">Values in array columns may be modified in one of three ways:</p><p class="calibre9"></p><div class="NAVHEADER"><dl class="calibre9"><dt class="NAVHEADER">Complete modification</dt><dd class="calibre16"><p class="calibre9">            The entire array may be replaced with a new array constant.
          </p></dd><dt class="NAVHEADER">Slice modification</dt><dd class="calibre16"><p class="calibre9">            A slice of an array (range between two values) may be replaced with a new array constant. The new array
            constant should have the same number of values within it as the splice to be updated.
          </p></dd><dt class="NAVHEADER">Element modification</dt><dd class="calibre16"><p class="calibre9">            An individual value in the array may be replaced with a new constant of the base type of the array. You
            use a subscript to specify which array value to replace.
          </p></dd></dl></div><p class="calibre9">Replacing an array value with a new array puts no restriction on the number of values within the new array. There
      need not be the same number of values in the new array as in the existing one.
      For instance, suppose that the employee with id 102 wishes to add another favorite book to his
      list in the <tt class="REPLACEABLE">favorite_books</tt> table. This is achieved with an
      <tt class="REPLACEABLE">UPDATE</tt> statement in <a href="x14110.htm#COMPLETELYMODIFYINGANARRAY">Example 7-26</a> which completely
      overwrites the previous value.</p><div class="NAVHEADER"><a name="COMPLETELYMODIFYINGANARRAY"></a><p class="calibre9"><b class="calibre10">Example 7-26. Completely modifying an array</b></p><pre class="SCREEN">booktown=# <tt class="REPLACEABLE"><b class="calibre10">UPDATE favorite_books</b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">       SET books='{"The Hitchhiker\'s Guide to the Galaxy",</b></tt>
booktown'# <tt class="REPLACEABLE"><b class="calibre10">                   "The Restaurant at the End of the Universe"}'</b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">       WHERE employee_id = 102;</b></tt>
UPDATE 1</pre></div><p class="calibre9">The same approach used in <a href="x14110.htm#COMPLETELYMODIFYINGANARRAY">Example 7-26</a> can be used to set a slice of an array by
      attaching a slice descriptor to the end of the target identifier (e.g., <tt class="REPLACEABLE">books[1:3]</tt> would
      refer to the first, second and third values in the <tt class="REPLACEABLE">books</tt> array column). More commonly,
      though, situations arise where a single value within an array needs to be modified, instead of the entire array, or a slice
      of an array.</p><p class="calibre9">Updating a single value in an array is done by attaching a subscript to the target identifier to indicate the
      specific value to be modified.  <a href="x14110.htm#MODIFYINGANARRAYSUBSCRIPT">Example 7-27</a> updates the first array value of the
      <tt class="REPLACEABLE">books</tt> column, in the <tt class="REPLACEABLE">favorite_books</tt> table.</p><div class="NAVHEADER"><a name="MODIFYINGANARRAYSUBSCRIPT"></a><p class="calibre9"><b class="calibre10">Example 7-27. Modifying an array subscript</b></p><pre class="SCREEN">booktown=# <tt class="REPLACEABLE"><b class="calibre10">SELECT books[1] FROM favorite_books;</b></tt>
                  
                  books
------------------------------------------
 The Hitchhiker's Guide to the Galaxy
 The Hobbit
(2 rows)

booktown=# <tt class="REPLACEABLE"><b class="calibre10">UPDATE favorite_books</b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">       SET books[1] = 'There and Back Again: A Hobbit\'s Holiday'</b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">       WHERE books[1] = 'The Hobbit';</b></tt>
UPDATE 1
booktown=# <tt class="REPLACEABLE"><b class="calibre10">SELECT books[1] FROM favorite_books;</b></tt>
                  
                  books
------------------------------------------
 The Hitchhiker's Guide to the Galaxy
 There and Back Again: A Hobbit's Holiday
(2 rows)</pre></div></div></div><div class="NAVHEADER"><hr width="100%" class="calibre6"/><table summary="Footer navigation table" width="100%" border="0" cellpadding="0" cellspacing="0" class="calibre"><tr class="calibre1"><td width="33%" valign="top" class="calibre3"><a href="x13546.htm" accesskey="P">Prev</a></td><td width="34%" valign="top" class="calibre4"><a href="book1.htm" accesskey="H">Home</a></td><td width="33%" valign="top" class="calibre5"><a href="x14316.htm" accesskey="N">Next</a></td></tr><tr class="calibre1"><td width="33%" valign="top" class="calibre3">Advanced Table Techniques</td><td width="34%" valign="top" class="calibre4"><a href="c13329.htm" accesskey="U">Up</a></td><td width="33%" valign="top" class="calibre5">Automating Common Routines</td></tr></table></div></div>

{% endraw %}

