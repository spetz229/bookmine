---
layout: page
title: "Unknown"
prev: x20238.htm
next: c20820.htm
book_path: books/o-reilly-practical-postgresql_oeb/
---
{% include JB/setup %}
{% raw %}
<div>
<div class="NAVHEADER"><table summary="Header navigation table" width="100%" border="0" cellpadding="0" cellspacing="0" class="calibre"><tr class="calibre1"><th colspan="3" class="calibre2">Practical PostgreSQL</th></tr><tr class="calibre1"><td width="10%" valign="bottom" class="calibre3"><a href="x20238.htm" accesskey="P">Prev</a></td><td width="80%" valign="bottom" class="calibre4">Chapter 11. PL/pgSQL</td><td width="10%" valign="bottom" class="calibre5"><a href="c20820.htm" accesskey="N">Next</a></td></tr></table><hr width="100%" class="calibre6"/></div><div class="NAVHEADER"><h1 class="calibre7"><a name="PLPGSQLANDTRIGGERS" class="calibre8">PL/pgSQL and Triggers</a></h1><p class="calibre9">Trigger functions can be created with PL/pgSQL and referenced within a PostgreSQL <span><i class="EMPHASIS">trigger</i></span>
    definition. The term "trigger function" is a simply a way of referring to a function that is intended to be invoked by a
    trigger. Triggers define operations that are performed when a specific event occurs within the database.  A PL/pgSQL trigger
    function can be referenced by a trigger as the operation to be performed when the trigger's event occurs.</p><p class="calibre9">The definition of a trigger and the definition of its associated trigger function are two different things.  A trigger
    is defined with the SQL <tt class="REPLACEABLE">CREATE TRIGGER</tt> command, whereas trigger functions are defined using
    the SQL <tt class="REPLACEABLE">CREATE FUNCTION</tt> command.  Trigger definitions are explained in detail in <a href="c13329.htm">Chapter 7</a>.</p><p class="calibre9">A trigger function should be defined as accepting no arguments, and returns a value of the special
    <tt class="REPLACEABLE">opaque</tt> data type.  The <tt class="REPLACEABLE">CREATE FUNCTION</tt> syntax for defining
    a PL/pgSQL trigger function is shown in <a href="x20655.htm#CREATINGTRIGGERFUNCTIONS">Example 11-52</a>.</p><div class="NAVHEADER"><a name="CREATINGTRIGGERFUNCTIONS"></a><p class="calibre9"><b class="calibre10">Example 11-52. Creating trigger functions</b></p><pre class="SCREEN">CREATE FUNCTION function_identifier () RETURNS opaque AS '
  DECLARE
    <tt class="REPLACEABLE"><i class="EMPHASIS">declarations</i></tt>;
    [...]
  BEGIN
    <tt class="REPLACEABLE"><i class="EMPHASIS">statements</i></tt>;
    [...]
  END;
' LANGUAGE 'plpgsql';</pre></div><p class="calibre9">Every trigger function created has access to a number of special variables that exist to provide information about the
    calling trigger, and to allow the trigger function to manipulate table data.  All special trigger function variables are
    listed in <a href="x20655.htm#TRIGGERFUNCTIONVARIABLES">Table 11-2</a>.</p><div class="NAVHEADER"><a name="TRIGGERFUNCTIONVARIABLES"></a><p class="calibre9"><b class="calibre10">Table 11-2. Trigger function variables</b></p><table border="1" class="calibre"><thead class="calibre11"><tr class="calibre12"><th width="4" valign="TOP" class="calibre13">Name</th><th width="4" valign="TOP" class="calibre13">Data type</th><th width="18" valign="TOP" class="calibre13">Description</th></tr></thead><tbody class="calibre14"><tr class="calibre12"><td width="4" valign="TOP" class="calibre15"><p class="calibre9">NEW</p></td><td width="4" valign="TOP" class="calibre15"><p class="calibre9">RECORD</p></td><td width="18" valign="TOP" class="calibre15"><p class="calibre9">Contains the new database row created after <tt class="REPLACEABLE">INSERT</tt> and <tt class="REPLACEABLE">UPDATE</tt> operations run by <tt class="REPLACEABLE">ROW</tt> level triggers.  Use this variable to make modifications to the new row.</p></td></tr><tr class="calibre12"><td width="4" valign="TOP" class="calibre15"><p class="calibre9">OLD</p></td><td width="4" valign="TOP" class="calibre15"><p class="calibre9">RECORD</p></td><td width="18" valign="TOP" class="calibre15"><p class="calibre9">Contains the old database row left after <tt class="REPLACEABLE">UPDATE</tt> AND <tt class="REPLACEABLE">DELETE</tt> operations performed by <tt class="REPLACEABLE">ROW</tt> level triggers.</p></td></tr><tr class="calibre12"><td width="4" valign="TOP" class="calibre15"><p class="calibre9">TG_NAME</p></td><td width="4" valign="TOP" class="calibre15"><p class="calibre9">name</p></td><td width="18" valign="TOP" class="calibre15"><p class="calibre9">Contains the name of the fired trigger.</p></td></tr><tr class="calibre12"><td width="4" valign="TOP" class="calibre15"><p class="calibre9">TG_WHEN</p></td><td width="4" valign="TOP" class="calibre15"><p class="calibre9">text</p></td><td width="18" valign="TOP" class="calibre15"><p class="calibre9">Contains either a <tt class="REPLACEABLE">BEFORE</tt> or <tt class="REPLACEABLE">AFTER</tt> string, depending on whether the trigger was defined as running after or before its specified event.</p></td></tr><tr class="calibre12"><td width="4" valign="TOP" class="calibre15"><p class="calibre9">TG_LEVEL</p></td><td width="4" valign="TOP" class="calibre15"><p class="calibre9">text</p></td><td width="18" valign="TOP" class="calibre15"><p class="calibre9">Contains either a <tt class="REPLACEABLE">ROW</tt> or <tt class="REPLACEABLE">STATEMENT</tt> string, depending on the defined level of the trigger.</p></td></tr><tr class="calibre12"><td width="4" valign="TOP" class="calibre15"><p class="calibre9">TG_OP</p></td><td width="4" valign="TOP" class="calibre15"><p class="calibre9">text</p></td><td width="18" valign="TOP" class="calibre15"><p class="calibre9">Contains an <tt class="REPLACEABLE">INSERT</tt>, <tt class="REPLACEABLE">UPDATE</tt>, or <tt class="REPLACEABLE">DELETE</tt> string that indicates the operation the trigger is invoked on.</p></td></tr><tr class="calibre12"><td width="4" valign="TOP" class="calibre15"><p class="calibre9">TG_RELID</p></td><td width="4" valign="TOP" class="calibre15"><p class="calibre9">oid</p></td><td width="18" valign="TOP" class="calibre15"><p class="calibre9">Contains the object ID of the table that invoked the trigger.</p></td></tr><tr class="calibre12"><td width="4" valign="TOP" class="calibre15"><p class="calibre9">TG_RELNAME</p></td><td width="4" valign="TOP" class="calibre15"><p class="calibre9">name</p></td><td width="18" valign="TOP" class="calibre15"><p class="calibre9">Contains the name of the table for which the trigger was invoked.</p></td></tr><tr class="calibre12"><td width="4" valign="TOP" class="calibre15"><p class="calibre9">TG_NARGS</p></td><td width="4" valign="TOP" class="calibre15"><p class="calibre9">integer</p></td><td width="18" valign="TOP" class="calibre15"><p class="calibre9">Contains the number of arguments the trigger's definition specifies the trigger function as having.</p></td></tr><tr class="calibre12"><td width="4" valign="TOP" class="calibre15"><p class="calibre9">TG_ARGV[â€‰]</p></td><td width="4" valign="TOP" class="calibre15"><p class="calibre9">array of text</p></td><td width="18" valign="TOP" class="calibre15"><p class="calibre9">Contains the arguments specified by the <tt class="REPLACEABLE">CREATE TRIGGER</tt> statement.  The array index begins at zero.</p></td></tr></tbody></table></div><p class="calibre9"><a href="x20655.htm#PLPGSQLTRIGGERFUNCTION">Example 11-53</a> illustrates the definition of a PL/pgSQL trigger function and demonstrates the
    usage of the previously listed special variables.  The <tt class="REPLACEABLE">check_shipment_addition</tt> trigger
    function is called after an <tt class="REPLACEABLE">INSERT</tt> or <tt class="REPLACEABLE">UPDATE</tt> operation is
    performed upon the <tt class="REPLACEABLE">shipments</tt> table.</p><p class="calibre9">The <tt class="REPLACEABLE">check_shipment_addition()</tt> function checks to make sure each added shipment
    contains a valid customer ID number and a valid ISBN for the book specified.  It then subtracts one from the total amount of
    stock in the <tt class="REPLACEABLE">stock</tt> table for the specified book if the calling SQL operation is an
    <tt class="REPLACEABLE">INSERT</tt> statement (but <span><i class="EMPHASIS">not</i></span> an <tt class="REPLACEABLE">UPDATE</tt>
    statement).</p><div class="NAVHEADER"><a name="PLPGSQLTRIGGERFUNCTION"></a><p class="calibre9"><b class="calibre10">Example 11-53. The check_shipment_addition() PL/pgSQL trigger function</b></p><pre class="SCREEN">CREATE FUNCTION check_shipment_addition () RETURNS opaque AS '
  DECLARE
    -- Declare a variable to hold the customer ID.
    id_number INTEGER;
    
    -- Declare a variable to hold the ISBN.
    book_isbn TEXT;
  BEGIN
    
    -- If there is an ID number that matches the customer ID in
    -- the new table, retrieve it from the customers table.
    SELECT INTO id_number id FROM customers WHERE id = NEW.customer_id;
    
    -- If there was no matching ID number, raise an exception.
    IF NOT FOUND THEN
      RAISE EXCEPTION ''Invalid customer ID number.'';
    END IF;
    
    -- If there is an ISBN that matches the ISBN specified in the
    -- new table, retrieve it from the editions table.
    SELECT INTO book_isbn isbn FROM editions WHERE isbn = NEW.isbn;
    
    -- If there is no matching ISBN, raise an exception.
    IF NOT FOUND THEN
      RAISE EXCEPTION ''Invalid ISBN.'';
    END IF;
    
    -- If the previous checks succeeded, update the stock amount
    -- for INSERT commands.
    IF TG_OP = ''INSERT'' THEN
       UPDATE stock SET stock = stock -1 WHERE isbn = NEW.isbn;
    END IF;
    
    RETURN NEW;
  END;
' LANGUAGE 'plpgsql';</pre></div><p class="calibre9">Once the <tt class="REPLACEABLE">check_shipment_addition()</tt> function has been created, a trigger may be set on
    the <tt class="REPLACEABLE">shipments</tt> table to call it. <a href="x20655.htm#THECHECKSHIPMENTTRIGGER">Example 11-54</a> shows the syntax to
    create the <tt class="REPLACEABLE">check_shipment</tt> trigger in the <tt class="REPLACEABLE">booktown</tt> database
    from within <span><i class="EMPHASIS">psql</i></span>.</p><div class="NAVHEADER"><a name="THECHECKSHIPMENTTRIGGER"></a><p class="calibre9"><b class="calibre10">Example 11-54. The check_shipment trigger</b></p><pre class="SCREEN">booktown=# <tt class="REPLACEABLE"><b class="calibre10">CREATE TRIGGER check_shipment</b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">               BEFORE INSERT OR UPDATE</b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">               ON shipments FOR EACH ROW</b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">               EXECUTE PROCEDURE check_shipment_addition();</b></tt>
CREATE</pre></div><p class="calibre9">Note that the <tt class="REPLACEABLE">check_shipment_addition</tt> trigger function <span><i class="EMPHASIS">must</i></span> be
    defined within the <tt class="REPLACEABLE">booktown</tt> database before its associated trigger is defined.  Always
    define trigger functions before defining the triggers that reference them.</p><p class="calibre9">See <a href="c13329.htm">Chapter 7</a> for more in-depth information on triggers.</p></div><div class="NAVHEADER"><hr width="100%" class="calibre6"/><table summary="Footer navigation table" width="100%" border="0" cellpadding="0" cellspacing="0" class="calibre"><tr class="calibre1"><td width="33%" valign="top" class="calibre3"><a href="x20238.htm" accesskey="P">Prev</a></td><td width="34%" valign="top" class="calibre4"><a href="book1.htm" accesskey="H">Home</a></td><td width="33%" valign="top" class="calibre5"><a href="c20820.htm" accesskey="N">Next</a></td></tr><tr class="calibre1"><td width="33%" valign="top" class="calibre3">Controlling Program Flow</td><td width="34%" valign="top" class="calibre4"><a href="c19610.htm" accesskey="U">Up</a></td><td width="33%" valign="top" class="calibre5">JDBC</td></tr></table></div></div>

{% endraw %}

