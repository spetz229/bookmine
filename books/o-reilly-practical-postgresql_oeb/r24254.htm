---
layout: page
title: "Unknown"
prev: r24172.htm
next: r24435.htm
book_path: books/o-reilly-practical-postgresql_oeb/
---
{% include JB/setup %}
{% raw %}
<div>
<div class="NAVHEADER"><table summary="Header navigation table" width="100%" border="0" cellpadding="0" cellspacing="0" class="calibre"><tr class="calibre1"><th colspan="3" class="calibre2">Practical PostgreSQL</th></tr><tr class="calibre1"><td width="10%" valign="bottom" class="calibre3"><a href="r24172.htm" accesskey="P">Prev</a></td><td width="80%" valign="bottom" class="calibre4"/><td width="10%" valign="bottom" class="calibre5"><a href="r24435.htm" accesskey="N">Next</a></td></tr></table><hr width="100%" class="calibre6"/></div><h1 class="calibre7"><a name="SQL-CREATEINDEX" class="calibre8">CREATE INDEX</a></h1><div class="NAVHEADER"><a name="AEN24258"></a><h2 class="SECT">Name</h2>CREATE INDEX -- Places an index on a table.</div><div class="NAVHEADER"><a name="AEN24261"></a><h2 class="SECT">Synopsis</h2><pre class="SCREEN">CREATE [ UNIQUE ] INDEX <tt class="REPLACEABLE"><i class="EMPHASIS">index_name</i></tt> ON <tt class="REPLACEABLE"><i class="EMPHASIS">table</i></tt>
       [ USING <tt class="REPLACEABLE"><i class="EMPHASIS">method</i></tt> ] ( <tt class="REPLACEABLE"><i class="EMPHASIS">column</i></tt> [ <tt class="REPLACEABLE"><i class="EMPHASIS">op_class</i></tt> ] [, ...] )
CREATE [ UNIQUE ] INDEX <tt class="REPLACEABLE"><i class="EMPHASIS">index_name</i></tt> ON <tt class="REPLACEABLE"><i class="EMPHASIS">table</i></tt>
       [ USING <tt class="REPLACEABLE"><i class="EMPHASIS">method</i></tt> ] ( <tt class="REPLACEABLE"><i class="EMPHASIS">func_name</i></tt> ( <tt class="REPLACEABLE"><i class="EMPHASIS">column</i></tt> [, ... ] ) [ <tt class="REPLACEABLE"><i class="EMPHASIS">op_class</i></tt> ] )</pre><div class="NAVHEADER"><a name="R2-SQL-CREATEINDEX-1"></a><h3 class="AUTHOR">Parameters</h3><p class="calibre9"> </p><p class="calibre9"></p><div class="NAVHEADER"><dl class="calibre9"><dt class="NAVHEADER"><tt class="REPLACEABLE">UNIQUE</tt></dt><dd class="calibre16"><p class="calibre9">The optional <tt class="REPLACEABLE">UNIQUE</tt> keyword. When used, this causes the database to check for, and prevent, duplicate values within the column (or combined columns) it is placed upon. This check will occur both when the index is created and each time data is added to the table.  PostgreSQL will then generate an error whenever an <tt class="REPLACEABLE">INSERT</tt> or <tt class="REPLACEABLE">UPDATE</tt> request is made that would place duplicate data within the index, and the command will fail.</p></dd><dt class="NAVHEADER"><tt class="REPLACEABLE"><i class="EMPHASIS">index_name</i></tt></dt><dd class="calibre16"><p class="calibre9">The name for the new index.</p></dd><dt class="NAVHEADER"><tt class="REPLACEABLE"><i class="EMPHASIS">table</i></tt></dt><dd class="calibre16"><p class="calibre9">The name of the table you are placing the index on.</p></dd><dt class="NAVHEADER"><tt class="REPLACEABLE"><i class="EMPHASIS">method</i></tt></dt><dd class="calibre16"><p class="calibre9">The type of indexing method you wish to use for the index.  There are three methods available to choose from, the default being <tt class="REPLACEABLE">btree</tt>:
            
            </p><p class="calibre9"></p><div class="NAVHEADER"><dl class="calibre17"><dt class="NAVHEADER"><tt class="REPLACEABLE">btree</tt></dt><dd class="calibre16"><p class="calibre9">The PostgreSQL implementation of Lehman-Yao high-concurrency B-trees.</p></dd><dt class="NAVHEADER"><tt class="REPLACEABLE">rtree</tt></dt><dd class="calibre16"><p class="calibre9">The PostgreSQL implementation of standard R-trees using Guttman's quadratic split algorithm.</p></dd><dt class="NAVHEADER"><tt class="REPLACEABLE">hash</tt></dt><dd class="calibre16"><p class="calibre9">The PostgreSQL implementation of Litwin's linear hashing.</p></dd></dl></div>
</dd><dt class="NAVHEADER"><tt class="REPLACEABLE"><i class="EMPHASIS">column</i></tt></dt><dd class="calibre16"><p class="calibre9">The name of the column (or comma-delimited list of columns) on which to place the index.</p></dd><dt class="NAVHEADER"><tt class="REPLACEABLE"><i class="EMPHASIS">op_class</i></tt></dt><dd class="calibre16"><p class="calibre9">The optionally specified associated operator class. For most users, this should not be specified.</p></dd><dt class="NAVHEADER"><tt class="REPLACEABLE"><i class="EMPHASIS">func_name</i></tt></dt><dd class="calibre16"><p class="calibre9">The name of a function you wish <tt class="REPLACEABLE">CREATE INDEX</tt> to use on the specified columns (rather than on the data values literally in those columns). The specified function must return a valid value that can be indexed (e.g., not a set of values).</p></dd></dl></div>
</div><div class="NAVHEADER"><a name="R2-SQL-CREATEINDEX-2"></a><h3 class="AUTHOR">Results</h3><p class="calibre9"> </p><p class="calibre9"></p><div class="NAVHEADER"><dl class="calibre9"><dt class="NAVHEADER"><tt class="REPLACEABLE">CREATE</tt></dt><dd class="calibre16"><p class="calibre9">The message returned when an index is created successfully.</p></dd><dt class="NAVHEADER"><tt class="REPLACEABLE">ERROR: Cannot create index: '</tt><tt class="REPLACEABLE"><i class="EMPHASIS">index_name</i></tt><tt class="REPLACEABLE">' already exists</tt></dt><dd class="calibre16"><p class="calibre9">The error returned if an index with the name you specified already exists.</p></dd><dt class="NAVHEADER"><tt class="REPLACEABLE">ERROR:  DefineIndex: attribute "</tt><tt class="REPLACEABLE"><i class="EMPHASIS">column</i></tt><tt class="REPLACEABLE">" not found</tt></dt><dd class="calibre16"><p class="calibre9">The error returned if the specified <tt class="REPLACEABLE"><i class="EMPHASIS">column</i></tt> does not exist in the specified <tt class="REPLACEABLE"><i class="EMPHASIS">table</i></tt> to index.</p></dd><dt class="NAVHEADER"><tt class="REPLACEABLE">ERROR:  DefineIndex: relation "</tt><tt class="REPLACEABLE"><i class="EMPHASIS">table</i></tt><tt class="REPLACEABLE">" not found</tt></dt><dd class="calibre16"><p class="calibre9">The error returned if the specified <tt class="REPLACEABLE"><i class="EMPHASIS">table</i></tt> does not exist in the connected database.</p></dd></dl></div>
</div></div><div class="NAVHEADER"><a name="R1-SQL-CREATEINDEX-1"></a><h2 class="SECT">Description</h2><p class="calibre9">Use <tt class="REPLACEABLE">CREATE INDEX</tt> to build an optimization index on a specified table, based on one or more of its
    columns. Remember that while indices are designed to improve the performance and effectiveness of your database, using them
    on tables whose cost of index maintenance outweighs the practical benefit actually <span><i class="EMPHASIS">decreases</i></span> overall
    performance.</p><div class="NAVHEADER"><a name="AEN24372"></a><h3 class="AUTHOR">Column index</h3><p class="calibre9">You may create an index specifying a list of one or more table columns. This is the "traditional" index type. It may be used by queries that directly reference the indexed columns in a <tt class="REPLACEABLE">WHERE</tt> clause. Note that R-tree and Hash indices may only index one column, though B-tree indices can index up to sixteen columns.</p></div><div class="NAVHEADER"><a name="AEN24376"></a><h3 class="AUTHOR">Functional index</h3><p class="calibre9">An alternate type of index is one called a <span><i class="EMPHASIS">functional index</i></span>. A functional index is an index based on the returned value of a function applied to one or more columns. Such an index is useful for queries that use the same function in a <tt class="REPLACEABLE">WHERE</tt> clause frequently.</p><p class="calibre9">For example, if you have a query that always references <tt class="REPLACEABLE">upper(last_name)</tt> in its <tt class="REPLACEABLE">WHERE</tt> clause, you could optimized that query by creating a functional index on <tt class="REPLACEABLE">upper(last_name)</tt>.</p></div><div class="NAVHEADER"><a name="AEN24385"></a><h3 class="AUTHOR">Operators and operator classes</h3><p class="calibre9">The PostgreSQL query optimizer will use different indices for different operators used in a comparison.  It will choose which type of index to used based on the pre-defined list shown in <a href="r24254.htm#OPERATORSVSINDEX">Table 14-1</a>.</p><div class="NAVHEADER"><a name="OPERATORSVSINDEX"></a><p class="calibre9"><b class="calibre10">Table 14-1. Operator/index correspondence</b></p><table border="1" class="calibre"><thead class="calibre11"><tr class="calibre12"><th width="4" valign="TOP" class="calibre13">Index</th><th width="10" valign="TOP" class="calibre13">Operator</th></tr></thead><tbody class="calibre14"><tr class="calibre12"><td width="4" valign="TOP" class="calibre15"><p class="calibre9">B-tree</p></td><td width="10" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE">&lt;, &lt;=, &gt;=, &gt;</tt></p></td></tr><tr class="calibre12"><td width="4" valign="TOP" class="calibre15"><p class="calibre9">R-tree</p></td><td width="10" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE">&lt;&lt;, &amp;&lt;, &amp;&gt;, &gt;&gt;, @, ~=, &amp;&amp;</tt></p></td></tr><tr class="calibre12"><td width="4" valign="TOP" class="calibre15"><p class="calibre9">Hash</p></td><td width="10" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE">=</tt></p></td></tr></tbody></table></div><p class="calibre9">You can optionally specify an <span><i class="EMPHASIS">operator class</i></span> for each column on which an index is placed. This is done by setting the optional <tt class="REPLACEABLE">op_class</tt> parameter to the class of operator you intend to use. This option only exists because, in some circumstances, there can be more than one meaningful way to order data. The default indexing method is generally sufficient for most users, however, and this option is best left unused unless you are creating your own custom types and operators.</p></div></div><div class="NAVHEADER"><a name="R1-SQL-CREATEINDEX-2"></a><h2 class="SECT">Examples</h2><p class="calibre9">The following example creates a unique index on the <tt class="REPLACEABLE">id</tt> column of the <tt class="REPLACEABLE">employees</tt> table:</p><pre class="SCREEN">booktown=# <tt class="REPLACEABLE"><b class="calibre10">CREATE UNIQUE INDEX employee_id_idx</b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">              ON employees (id);</b></tt>
CREATE</pre><p class="calibre9">The next example creates a functional index on the <tt class="REPLACEABLE">last_name</tt> column of the <tt class="REPLACEABLE">employees</tt> table, using the <tt class="REPLACEABLE">upper()</tt> function:</p><pre class="SCREEN">booktown=# <tt class="REPLACEABLE"><b class="calibre10">CREATE INDEX employee_upper_name_idx</b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">       ON employees (upper(last_name));</b></tt>
CREATE</pre></div><div class="NAVHEADER"><hr width="100%" class="calibre6"/><table summary="Footer navigation table" width="100%" border="0" cellpadding="0" cellspacing="0" class="calibre"><tr class="calibre1"><td width="33%" valign="top" class="calibre3"><a href="r24172.htm" accesskey="P">Prev</a></td><td width="34%" valign="top" class="calibre4"><a href="book1.htm" accesskey="H">Home</a></td><td width="33%" valign="top" class="calibre5"><a href="r24435.htm" accesskey="N">Next</a></td></tr><tr class="calibre1"><td width="33%" valign="top" class="calibre3">CREATE GROUP</td><td width="34%" valign="top" class="calibre4"><a href="c22759.htm" accesskey="U">Up</a></td><td width="33%" valign="top" class="calibre5">CREATE LANGUAGE</td></tr></table></div></div>

{% endraw %}

