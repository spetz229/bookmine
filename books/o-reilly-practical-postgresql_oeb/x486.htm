---
layout: page
title: "Unknown"
prev: x337.htm
next: c15679.htm
book_path: books/o-reilly-practical-postgresql_oeb/
---
{% include JB/setup %}
{% raw %}
<div>
<div class="NAVHEADER"><table summary="Header navigation table" width="100%" border="0" cellpadding="0" cellspacing="0" class="calibre"><tr class="calibre1"><th colspan="3" class="calibre2">Practical PostgreSQL</th></tr><tr class="calibre1"><td width="10%" valign="bottom" class="calibre3"><a href="c360.htm" accesskey="P">Prev</a></td><td width="80%" valign="bottom" class="calibre4">Chapter 2. Installing PostgreSQL</td><td width="10%" valign="bottom" class="calibre5"><a href="p1162.htm" accesskey="N">Next</a></td></tr></table><hr width="100%" class="calibre6"/></div><div class="NAVHEADER"><h1 class="calibre7"><a name="TENSTEPSTOINSTALLINGPOSTGRESQL" class="calibre8">10 Steps to Installing PostgreSQL</a></h1><p class="calibre9">PostgreSQL is included on the CD distributed with this book, but you may want to visit the PostgreSQL website to see if
    there is a newer version available. Many FTP sites make the source files for PostgreSQL available for download; a complete
    list of FTP mirrors can be found at <span><i class="EMPHASIS">http://www.postgresql.org</i></span>.</p><p class="calibre9">Once you have connected to a PostgreSQL FTP mirror, you will see the stable releases located within a directory
    beginning with <span><i class="EMPHASIS">v</i></span> followed by a version (such as <span><i class="EMPHASIS">v7.1.3/</i></span>). There should also be a
    symbolic link to the most recent stable release’s directory called <span><i class="EMPHASIS">latest/</i></span>.</p><p class="calibre9">Within this sub-directory is a list of package files.  The complete PostgreSQL installation package is named
    <span><i class="EMPHASIS">postgresql-[version].tar.gz</i></span> and should be the largest file in the list. The following sub-packages are
    also made available for download, and may be installed in any combination (though at least <span><i class="EMPHASIS">base</i></span> is
    required):</p><p class="calibre9"> </p><p class="calibre9"></p><div class="NAVHEADER"><dl class="calibre9"><dt class="NAVHEADER">postgresql-base-[version].tar.gz</dt><dd class="calibre16"><p class="calibre9">            The <span><i class="EMPHASIS">base</i></span> package contains the bare minimum of source code required to build and run PostgreSQL. 
          </p></dd><dt class="NAVHEADER">postgresql-docs-[version].tar.gz</dt><dd class="calibre16"><p class="calibre9">            The <span><i class="EMPHASIS">docs</i></span> package contains the PostgreSQL documentation in HTML format. Note that the PostgreSQL
            <span><i class="EMPHASIS">man</i></span> pages are automatically installed with the <span><i class="EMPHASIS">base</i></span> package.
          </p></dd><dt class="NAVHEADER">postgresql-opt-[version].tar.gz</dt><dd class="calibre16"><p class="calibre9">            The <span><i class="EMPHASIS">opt</i></span> package contains several optional extensions to PostgreSQL, such as the interfaces for
            C++ (<span><i class="EMPHASIS">libpq++</i></span>), JDBC, ODBC, Perl, Python, and Tcl. It also contains the source required for
            multibyte support.
          </p></dd><dt class="NAVHEADER">postgresql-test-[version].tar.gz</dt><dd class="calibre16"><p class="calibre9">            The <span><i class="EMPHASIS">test</i></span> package contains the regression test suite. This package is required to run regression
            tests after compiling PostgreSQL.
          </p></dd></dl></div>
<div class="NAVHEADER"><h2 class="SECT"><a name="AEN528" class="calibre8">Step 1: Creating the “postgres” User</a></h2><p class="calibre9">Create a UNIX user account to own and manage the PostgreSQL database files.  Typically, this user is named
      <span><i class="EMPHASIS">postgres</i></span>, but it can be named anything that you choose.  For consistency throughout the book, the user
      <span><i class="EMPHASIS">postgres</i></span> is considered the PostgreSQL root or superuser.</p><p class="calibre9">You will need to have root privileges to create the PostgreSQL superuser. On a Linux machine, you can use the
      command shown in <a href="x486.htm#ADDINGPOSTGRES">Example 2-5</a> to add the <span><i class="EMPHASIS">postgres</i></span> user.</p><div class="NAVHEADER"><a name="ADDINGPOSTGRES"></a><p class="calibre9"><b class="calibre10">Example 2-5. Adding the postgres User</b></p><pre class="SCREEN">$ <tt class="REPLACEABLE"><b class="calibre10">su - -c "useradd postgres"</b></tt></pre></div><div class="NAVHEADER"><p class="calibre9"></p><table class="calibre" border="1" width="100%"><tr class="calibre1"><td class="calibre23"><b class="calibre10">Warning</b></td></tr><tr class="calibre1"><td class="calibre15"><p class="calibre9">Do not try to use the <span><i class="EMPHASIS">root</i></span> user as the PostgreSQL superuser. Doing so presents a large
        security hole.</p></td></tr></table></div></div><div class="NAVHEADER"><h2 class="SECT"><a name="AEN547" class="calibre8">Step 2: Installing the PostgreSQL Source Package</a></h2><p class="calibre9">Once you have acquired the source for PostgreSQL, you should copy the PostgreSQL source package to a temporary
      compilation directory. This directory will be the path where you install and configure PostgreSQL. Within this path, you
      will extract the contents from the <span><i class="EMPHASIS">tar.gz</i></span> file and proceed with installation.</p><p class="calibre9">Bear in mind that this will not be the location of the installed database files. This is a temporary location for
      configuration and compilation of the source package itself.  If you have downloaded the PostgreSQL package from the
      Internet, it is probably not saved in your intended compilation directory (unless you explicitly chose to save there). A
      common convention for building source on UNIX and Linux machines is to build within the <span><i class="EMPHASIS">/usr/local/src</i></span>
      path. You will most likely need root privileges to access this path. As such, the remaining examples in this chapter will
      involve the <span><i class="EMPHASIS">root</i></span> user until otherwise specified.</p><div class="NAVHEADER"><blockquote class="NOTE"><p class="calibre9"><b class="calibre10">Note: </b>If you are a user of a commercial Linux distribution, we strongly suggest that you verify whether or not you have
	PostgreSQL already installed. On RPM-based systems, such as SuSe, Mandrake, or RedHat, this can be done by using the
	following command: <span><i class="EMPHASIS">rpm -qa | grep -i postgres</i></span>.  If you do have PostgreSQL installed, there is a good
	chance that it is outdated. You will want to download and install the latest version of PostgreSQL available.  An RPM
	installation of PostgreSQL will sometimes install scripts and programs such as <span><i class="EMPHASIS">postmaster</i></span> and
	<span><i class="EMPHASIS">psql</i></span> into globally accessible directories.  This can cause conflicts with source-built versions, so
	before installing a new version, be sure to remove the RPM by using the <span><i class="EMPHASIS">rpm -e &lt;package name&gt;</i></span>
	command.</p></blockquote></div><p class="calibre9">To unpack PostgreSQL source code on a Linux system, first move (or copy, from the CD) the compressed source file into
      <span><i class="EMPHASIS">/usr/local/src</i></span> (most people move their source files here to keep them separate from their home
      directories and/or other locations they may keep downloaded files). After moving it to the filesystem location where you
      wish to unpack it, use <span><i class="EMPHASIS">tar</i></span> to unpack the source files.  The commands to perform these actions are
      shown in <a href="x486.htm#UNPACKSOURCE">Example 2-6</a>.</p><div class="NAVHEADER"><a name="UNPACKSOURCE"></a><p class="calibre9"><b class="calibre10">Example 2-6. Unpacking the PostgreSQL source package</b></p><pre class="SCREEN">[root@host root]# <tt class="REPLACEABLE"><b class="calibre10">mv postgresql-7.1.3.tar.gz /usr/local/src</b></tt>
[root@host root]# <tt class="REPLACEABLE"><b class="calibre10">cd /usr/local/src</b></tt>
[root@host src]# <tt class="REPLACEABLE"><b class="calibre10">tar -xzvf postgresql-7.1.3.tar.gz</b></tt>
postgresql-7.1.3/
postgresql-7.1.3/ChangeLogs/
postgresql-7.1.3/ChangeLogs/ChangeLog-7.1-7.1.1
postgresql-7.1.3/ChangeLogs/ChangeLog-7.1RC1-to-7.1RC2
postgresql-7.1.3/ChangeLogs/ChangeLog-7.1RC2-to-7.1RC3
postgresql-7.1.3/ChangeLogs/ChangeLog-7.1RC3-to-7.1rc4
postgresql-7.1.3/ChangeLogs/ChangeLog-7.1beta1-to-7.1beta3
postgresql-7.1.3/ChangeLogs/ChangeLog-7.1beta3-to-7.1beta4
postgresql-7.1.3/ChangeLogs/ChangeLog-7.1beta4-to-7.1beta5
postgresql-7.1.3/ChangeLogs/ChangeLog-7.1beta5-to-7.1beta6
postgresql-7.1.3/ChangeLogs/ChangeLog-7.1beta6-7.1RC1
postgresql-7.1.3/ChangeLogs/ChangeLog-7.1rc4-7.1
postgresql-7.1.3/ChangeLogs/ChangeLog-7.1.1-7.1.2
postgresql-7.1.3/ChangeLogs/ChangeLog-7.1.2-7.1.3
postgresql-7.1.3/COPYRIGHT
[...]
[root@host root]# <tt class="REPLACEABLE"><b class="calibre10">chown -R postgres.postgres postgresql-7.1.3</b></tt></pre></div><p class="calibre9">Notice the last command used in <a href="x486.htm#UNPACKSOURCE">Example 2-6</a>. The command is 
      <span><i class="EMPHASIS">chown -R postgres.postgres postgresql-7.1.3</i></span>. This command grants the ownership of the PostgreSQL
      source directory tree to <span><i class="EMPHASIS">postgres</i></span>, which in turn enables you to compile PostgreSQL as the
      <span><i class="EMPHASIS">postgres</i></span> user. Once the extraction and ownership change has completed, you can switch to the
      <span><i class="EMPHASIS">postgres</i></span> user to compile PostgreSQL, resulting in all compiled files automatically being owned by 
      <span><i class="EMPHASIS">postgres</i></span>.</p><p class="calibre9">For reference purposes, the following list is a description of the <span><i class="EMPHASIS">tar</i></span> options used to extract
      the PostgreSQL source distribution:</p><p class="calibre9"> </p><p class="calibre9"></p><div class="NAVHEADER"><dl class="calibre9"><dt class="NAVHEADER">x (extract)</dt><dd class="calibre16"><p class="calibre9"><span><i class="EMPHASIS">tar</i></span> will extract from the passed filename (as opposed to creating a new
            file).</p></dd><dt class="NAVHEADER">v (verbose)</dt><dd class="calibre16"><p class="calibre9"><span><i class="EMPHASIS">tar</i></span> will print verbose output as files are extracted. You may omit this flag if you
            do not wish to see each file as it is unpacked.</p></dd><dt class="NAVHEADER">z (zipped)</dt><dd class="calibre16"><p class="calibre9"><span><i class="EMPHASIS">tar</i></span> will use <span><i class="EMPHASIS">gunzip</i></span> to decompress the source.  This option
            assumes that you are using the GNU tools; other versions of <span><i class="EMPHASIS">tar</i></span> may not support the
            <span><i class="EMPHASIS">z</i></span> flag. In the event that you are not using the GNU tools, you will need to manually unzip the file
            using <span><i class="EMPHASIS">gunzip</i></span> before you can unpack it with <span><i class="EMPHASIS">tar</i></span>.</p></dd><dt class="NAVHEADER">f (file)</dt><dd class="calibre16"><p class="calibre9"><span><i class="EMPHASIS">tar</i></span> will use the filename following the <span><i class="EMPHASIS">f</i></span> parameter to
            determine which file to extract. In our examples, this file is <span><i class="EMPHASIS">postgresql-7.1.3.tar.gz</i></span>.</p></dd></dl></div>
<p class="calibre9">After you have completed the extraction of the files, switch to the <span><i class="EMPHASIS">postgres</i></span> user and change
      into the newly created directory (e.g., <span><i class="EMPHASIS">/usr/local/src/postgres-7.1.3</i></span>). The remaining installation
      steps will take place in that directory.</p></div><div class="NAVHEADER"><h2 class="SECT"><a name="SECTCONFIGURINGSOURCETREE" class="calibre8">Step 3: Configuring the Source Tree</a></h2><p class="calibre9">Before compilation, you must configure the source, and specify installation options specific to your needs. This is done
      with the <span><i class="EMPHASIS">configure</i></span> script.</p><p class="calibre9">The <span><i class="EMPHASIS">configure</i></span> script is also used to check for software dependencies that are required to compile
      PostgreSQL. As <span><i class="EMPHASIS">configure</i></span> checks for dependencies, it will create the necessary files for use with
      the <span><i class="EMPHASIS">gmake</i></span> command.</p><p class="calibre9">To use the default installation script, issue the following command: <span><i class="EMPHASIS">./configure</i></span>.  To specify
      options that will enable certain non-default features, append the option to the <span><i class="EMPHASIS">./configure</i></span> command. 
      For a list of all the available configuration options, use <span><i class="EMPHASIS">./configure --help</i></span> </p><p class="calibre9">There is a good chance that the default source configuration that <span><i class="EMPHASIS">configure</i></span> uses will not be the
      setup you require.  For a well-rounded PostgreSQL installation, we recommend you use at least the following options:</p><p class="calibre9"> </p><p class="calibre9"></p><div class="NAVHEADER"><dl class="calibre9"><dt class="NAVHEADER">--with-CXX</dt><dd class="calibre16"><p class="calibre9">              Allows you to build C++ programs for use with PostgreSQL by building the <span><i class="EMPHASIS">libpq++</i></span> library.
            </p></dd><dt class="NAVHEADER">--enable-odbc</dt><dd class="calibre16"><p class="calibre9">            Allows you to connect to PostgreSQL with programs that have a compatible ODBC driver (such as Microsoft Access).
            </p></dd><dt class="NAVHEADER">--enable-multibyte</dt><dd class="calibre16"><p class="calibre9">              Allows multibyte characters to be used, such as non-English language characters (e.g., Kanji).
            </p></dd><dt class="NAVHEADER">--with-maxbackends=<tt class="REPLACEABLE"><i class="EMPHASIS">NUMBER</i></tt></dt><dd class="calibre16"><p class="calibre9">              Sets <tt class="REPLACEABLE"><i class="EMPHASIS">NUMBER</i></tt> as the maximum number of allowed connections (32, by default).
            </p></dd></dl></div>
<p class="calibre9">You can also specify anything from the following complete list of configuration options:</p><p class="calibre9"></p><div class="NAVHEADER"><dl class="calibre9"><dt class="NAVHEADER">--prefix=<tt class="REPLACEABLE"><i class="EMPHASIS">PREFIX</i></tt></dt><dd class="calibre16"><p class="calibre9">Specifies that files should be installed under the directory
                provided with <tt class="REPLACEABLE"><i class="EMPHASIS">PREFIX</i></tt>, instead of the
                default installation directory (<span><i class="EMPHASIS">/usr/local/pgsql</i></span>).
              </p></dd><dt class="NAVHEADER">--exec-prefix=<tt class="REPLACEABLE"><i class="EMPHASIS">EXEC-PREFIX</i></tt></dt><dd class="calibre16"><p class="calibre9">Specifies that architecture-dependent executable files should be installed
              under the directory supplied with <tt class="REPLACEABLE"><i class="EMPHASIS">EXEC-PREFIX</i></tt>.</p></dd><dt class="NAVHEADER">--bindir=<tt class="REPLACEABLE"><i class="EMPHASIS">DIRECTORY</i></tt></dt><dd class="calibre16"><p class="calibre9">Specifies that user executable files (such as <span><i class="EMPHASIS">psql</i></span>)
              should be installed into the directory supplied with <tt class="REPLACEABLE"><i class="EMPHASIS">DIRECTORY</i></tt>.
              </p></dd><dt class="NAVHEADER">--datadir=<tt class="REPLACEABLE"><i class="EMPHASIS">DIRECTORY</i></tt></dt><dd class="calibre16"><p class="calibre9">Specifies that the database should install data files
              used by PostgreSQL's program suite (as well as sample
              configuration files) into the directory supplied with
              <tt class="REPLACEABLE"><i class="EMPHASIS">DIRECTORY</i></tt>.  Note that the directory here
              is <tt class="REPLACEABLE"><i class="EMPHASIS">not</i></tt> used as an alternate
              database data directory; it is merely the directory where read-only files used
              by the program suite are installed.
              </p></dd><dt class="NAVHEADER">--sysconfdir=<tt class="REPLACEABLE"><i class="EMPHASIS">DIRECTORY</i></tt></dt><dd class="calibre16"><p class="calibre9">Specifies that system configuration files should be installed into the
              directory supplied with <tt class="REPLACEABLE"><i class="EMPHASIS">DIRECTORY</i></tt>.  By default, these are put
              into the <span><i class="EMPHASIS">etc</i></span> folder within the specified base installation directory.</p></dd><dt class="NAVHEADER">--libdir=<tt class="REPLACEABLE"><i class="EMPHASIS">DIRECTORY</i></tt></dt><dd class="calibre16"><p class="calibre9">Specifies that library files should be stored in the directory supplied
              with <tt class="REPLACEABLE"><i class="EMPHASIS">DIRECTORY</i></tt>.  If you are running Linux, this directory
              should also be entered into the <span><i class="EMPHASIS">ld.so.conf</i></span> file.</p></dd><dt class="NAVHEADER">--includedir=<tt class="REPLACEABLE"><i class="EMPHASIS">DIRECTORY</i></tt></dt><dd class="calibre16"><p class="calibre9">Specifies that C and C++ header files should be installed into the directory
              supplied with <tt class="REPLACEABLE"><i class="EMPHASIS">DIRECTORY</i></tt>.  By default, include files are stored in
              the <span><i class="EMPHASIS">include</i></span> folder within the base installation directory.</p></dd><dt class="NAVHEADER">--docdir=<tt class="REPLACEABLE"><i class="EMPHASIS">DIRECTORY</i></tt></dt><dd class="calibre16"><p class="calibre9">Specifies that documentation files should be installed into the directory
              supplied with <tt class="REPLACEABLE"><i class="EMPHASIS">DIRECTORY</i></tt>.  This does not include PostgreSQL's
              <span><i class="EMPHASIS">man</i></span> files.</p></dd><dt class="NAVHEADER">--mandir=<tt class="REPLACEABLE"><i class="EMPHASIS">DIRECTORY</i></tt></dt><dd class="calibre16"><p class="calibre9">Specifies that <span><i class="EMPHASIS">man</i></span> files should be installed into the
              directory supplied with <tt class="REPLACEABLE"><i class="EMPHASIS">DIRECTORY</i></tt>.</p></dd><dt class="NAVHEADER">--with-includes=<tt class="REPLACEABLE"><i class="EMPHASIS">DIRECTORIES</i></tt></dt><dd class="calibre16"><p class="calibre9">Specifies that the colon-separated list of directories supplied with
              <tt class="REPLACEABLE"><i class="EMPHASIS">DIRECTORIES</i></tt> should be searched with the purpose of locating additional header files.</p></dd><dt class="NAVHEADER">--with-libraries=<tt class="REPLACEABLE"><i class="EMPHASIS">DIRECTORIES</i></tt></dt><dd class="calibre16"><p class="calibre9">Specifies that the colon-separated list of directories supplied with
              <tt class="REPLACEABLE"><i class="EMPHASIS">DIRECTORIES</i></tt> should be searched with the purpose of locating additional libraries.</p></dd><dt class="NAVHEADER">--enable-locale</dt><dd class="calibre16"><p class="calibre9">Enables locale support.  The use of
              locale support will incur a performance penalty and should
              only be enabled if you are are not in an English-speaking
              location.</p></dd><dt class="NAVHEADER">--enable-recode</dt><dd class="calibre16"><p class="calibre9">Enables the use of the <span><i class="EMPHASIS">recode</i></span> translation library.</p></dd><dt class="NAVHEADER">--enable-multibyte</dt><dd class="calibre16"><p class="calibre9">Enables multibyte encoding.  Enabling this option allows the support of non-ASCII
              characters; this is most useful with languages such as Japanese, Korean, and Chinese, which all
              use nonstandard character encoding.</p></dd><dt class="NAVHEADER">--with-pgport=<tt class="REPLACEABLE"><i class="EMPHASIS">NUMBER</i></tt></dt><dd class="calibre16"><p class="calibre9">Specifies that the the port number supplied with <tt class="REPLACEABLE"><i class="EMPHASIS">NUMBER</i></tt>
              should be used as the default port by PostgreSQL.  This can be
              changed when starting the <span><i class="EMPHASIS">postmaster</i></span> application.</p></dd><dt class="NAVHEADER">--with-maxbackends=<tt class="REPLACEABLE"><i class="EMPHASIS">NUMBER</i></tt></dt><dd class="calibre16"><p class="calibre9">                Sets <tt class="REPLACEABLE"><i class="EMPHASIS">NUMBER</i></tt> as the maximum number of allowed connections (32, by default).
              </p></dd><dt class="NAVHEADER">--with-CXX</dt><dd class="calibre16"><p class="calibre9">Specifies that the C++ interface library should be compiled during installation.
              You will need this library if you plan to develop C++ applications for use with
              PostgreSQL.</p></dd><dt class="NAVHEADER">--with-perl</dt><dd class="calibre16"><p class="calibre9">Specifies that the PostgreSQL Perl interface module should be compiled during installation.
              This module will need to be installed in a directory that is usually owned by <span><i class="EMPHASIS">root</i></span>, so you will
              most likely need to be logged in as the <span><i class="EMPHASIS">root</i></span> user to complete installation with this option
              chosen.  This configuration option is only required if you plan to use the pl/Perl procedural
              language.</p></dd><dt class="NAVHEADER">--with-python</dt><dd class="calibre16"><p class="calibre9">Specifies that the PostgreSQL Python interface module should be compiled during installation.
              As with the <span><i class="EMPHASIS">--with-perl</i></span> option, you will most likely need to log in as
              the <span><i class="EMPHASIS">root</i></span> user to complete installation with this option.  This option is only required if you plan
              to use the pl/Python procedural language.</p></dd><dt class="NAVHEADER">--with-tcl</dt><dd class="calibre16"><p class="calibre9">Specifies that Tcl support should be included in the installation.  This option will install
              PostgreSQL applications and extensions that require Tcl, such as <span><i class="EMPHASIS">pgaccess</i></span> (a popular
               graphical database client) and the pl/Tcl procedural language.</p></dd><dt class="NAVHEADER">--without-tk</dt><dd class="calibre16"><p class="calibre9">Specifies that Tcl support should be compiled without additional support for Tk, the graphical
              application tool kit.  Using this option with the <span><i class="EMPHASIS">--with-tcl</i></span> option specifies that
              PostgreSQL Tcl applications that require Tk (such as <span><i class="EMPHASIS">pgtksh</i></span> and
              <span><i class="EMPHASIS">pgaccess</i></span>) should not be installed.</p></dd><dt class="NAVHEADER">--with-tclconfig=<tt class="REPLACEABLE"><i class="EMPHASIS">DIRECTORY</i></tt>, --with-tkconfig=<tt class="REPLACEABLE"><i class="EMPHASIS">DIRECTORY</i></tt></dt><dd class="calibre16"><p class="calibre9">Specifies that the Tcl or Tk (depending on the option) configuration file (either <span><i class="EMPHASIS">tclConfig.sh</i></span> or <span><i class="EMPHASIS">tkConfig.sh</i></span>)
              is located in the directory supplied with <tt class="REPLACEABLE"><i class="EMPHASIS">DIRECTORY</i></tt>, instead of the default directory.  These two files
              are installed by Tcl/Tk, and the information within them is required by PostgreSQL's Tcl/Tk interface modules.</p></dd><dt class="NAVHEADER">--enable-odbc</dt><dd class="calibre16"><p class="calibre9">Enables support for ODBC.</p></dd><dt class="NAVHEADER">--with-odbcinst=<tt class="REPLACEABLE"><i class="EMPHASIS">DIRECTORY</i></tt></dt><dd class="calibre16"><p class="calibre9">Specifies that the ODBC driver should look in the directory supplied with <tt class="REPLACEABLE"><i class="EMPHASIS">DIRECTORY</i></tt> for its <span><i class="EMPHASIS">odbcinst.ini</i></span> file.  By default, this file is held in the <span><i class="EMPHASIS">etc</i></span> directory,
              which is located in the installation directory.</p></dd><dt class="NAVHEADER">--with-krb4=<tt class="REPLACEABLE"><i class="EMPHASIS">DIRECTORY</i></tt>, --with-krb5=<tt class="REPLACEABLE"><i class="EMPHASIS">DIRECTORY</i></tt></dt><dd class="calibre16"><p class="calibre9">Enables support for the Kerberos authentication
              system. The use of Kerberos is not covered in this book.
              </p></dd><dt class="NAVHEADER">--with-krb-srvnam=<tt class="REPLACEABLE"><i class="EMPHASIS">NAME</i></tt></dt><dd class="calibre16"><p class="calibre9">Specifies the name of the Kerberos service principal.  By default, <span><i class="EMPHASIS">postgres</i></span> is
              set as the service principal name.</p></dd><dt class="NAVHEADER">--with-openssl=<tt class="REPLACEABLE"><i class="EMPHASIS">DIRECTORY</i></tt></dt><dd class="calibre16"><p class="calibre9">Enables the use of SSL to support encrypted database connections.  To build support for SSL,
              OpenSSL must be configured correctly and installed in the directory supplied with <tt class="REPLACEABLE"><i class="EMPHASIS">DIRECTORY</i></tt>.
              This option is required if you plan on using the <span><i class="EMPHASIS">stunnel</i></span> tool.
              </p></dd><dt class="NAVHEADER">--with-java</dt><dd class="calibre16"><p class="calibre9">Enables Java/JDBC support.  The <span><i class="EMPHASIS">Ant</i></span> and JDK packages
              are required for PostgreSQL to compile correctly with this feature enabled.</p></dd><dt class="NAVHEADER">--enable-syslog</dt><dd class="calibre16"><p class="calibre9">Enables the use of the <span><i class="EMPHASIS">syslog</i></span> daemon for logging.  You will need
              to specify that you wish to use <span><i class="EMPHASIS">syslog</i></span> for logging at runtime if you wish
              to use it.</p></dd><dt class="NAVHEADER">--enable-debug</dt><dd class="calibre16"><p class="calibre9">Enables the compilation of all PostgreSQL libraries and applications with debugging
              symbols.  This will slow down performance and increase binary file size, but the debugging symbols
              are useful for developers to help diagnose bugs and problems that can be encountered with PostgreSQL.
             </p></dd><dt class="NAVHEADER">--enable-cassert</dt><dd class="calibre16"><p class="calibre9">Enables assertion checking.  This feature slows down performance and should be used
              only during development of PostgreSQL
              database itself.
             </p></dd></dl></div><p class="calibre9">If you compile PostgreSQL and find that you are missing a feature, you can return to this step, reconfigure, and
      continue with the subsequent steps to build and install PostgreSQL. If you choose to come back to this step and reconfigure
      the PostgreSQL source before installing, be sure to use the <span><i class="EMPHASIS">gmake clean</i></span> command from the top-level
      directory of the source tree (usually, <span><i class="EMPHASIS">/usr/local/src/postgresql-[version]</i></span> ). This will remove any
      leftover object files and partially compiled files.</p></div><div class="NAVHEADER"><h2 class="SECT"><a name="AEN852" class="calibre8">Step 4: Compiling the Source</a></h2><p class="calibre9">After using the <span><i class="EMPHASIS">configure</i></span> command, you may begin compiling the PostgreSQL source by entering the
      <span><i class="EMPHASIS">gmake</i></span> command.</p><div class="NAVHEADER"><blockquote class="NOTE"><p class="calibre9"><b class="calibre10">Note: </b>On Linux machines, you should be able to use <span><i class="EMPHASIS">make</i></span> instead of <span><i class="EMPHASIS">gmake</i></span>.  BSD
        users should use <span><i class="EMPHASIS">gnumake</i></span>.</p></blockquote></div><div class="NAVHEADER"><a name="COMPILESOURCE"></a><p class="calibre9"><b class="calibre10">Example 2-7. Compiling the source with GNU make</b></p><pre class="SCREEN">[postgres@host postgresql-7.1.3]# <tt class="REPLACEABLE"><b class="calibre10">gmake</b></tt>
gmake -C doc all
gmake[1]: Entering directory /usr/local/src/postgresql-7.1.3/doc'
gmake[1]: Nothing to be done for all'.
gmake[1]: Leaving directory /usr/local/src/postgresql-7.1.3/doc'
gmake -C src all
gmake[1]: Entering directory /usr/local/src/postgresql-7.1.3/src'
gmake -C backend all
gmake[2]: Entering directory /usr/local/src/postgresql-7.1.3/src/backend'
gmake -C utils fmgroids.h
gmake[3]: Entering directory /usr/local/src/postgresql-7.1.3/src/backend/utils'
[...]</pre></div><p class="calibre9">At this point, depending on the speed of your machine, you may want to get some coffee because the PostgreSQL
      compilation could take 10 minutes, an hour, or even more. After the compilation has finished, the following message should
      appear: </p><pre class="SCREEN">All of PostgreSQL is successfully made.  Ready to install.</pre></div><div class="NAVHEADER"><h2 class="SECT"><a name="AEN872" class="calibre8">Step 5: Regression Testing</a></h2><p class="calibre9"><span><i class="EMPHASIS">Regression tests</i></span> are an optional but recommended step. The regression tests help verify that
      PostgreSQL will run as expected after you have compiled the source. The tests check tasks such as standard SQL operations,
      as well as extended capabilities of PostgreSQL. The regression tests can point out possible (but not necessarily probable)
      problems which may arise when running PostgreSQL.</p><p class="calibre9">If you decide you would like to run the regression tests, do so by using the following command: <span><i class="EMPHASIS">gmake check</i></span>,
      as shown in <a href="x486.htm#MAKEREGRESSIONTESTS">Example 2-8</a>.</p><div class="NAVHEADER"><a name="MAKEREGRESSIONTESTS"></a><p class="calibre9"><b class="calibre10">Example 2-8. Making regression tests</b></p><pre class="SCREEN">[postgres@host postgresql-7.1.3]# <tt class="REPLACEABLE"><b class="calibre10">gmake check</b></tt>
gmake -C doc all
gmake[1]: Entering directory /usr/local/src/postgresql-7.1.3/doc'
gmake[1]: Nothing to be done for all'.
gmake[1]: Leaving directory /usr/local/src/postgresql-7.1.3/doc'
[...]</pre></div><p class="calibre9">The <span><i class="EMPHASIS">gmake check</i></span> command will build a test installation of PostgreSQL within the source tree, and
      display a list of all the checks it is running. As each test completes, the success or failure will be reported.  Items
      that fail the check will have a <tt class="REPLACEABLE">failed</tt> message printed, rather than the successful
      <tt class="REPLACEABLE">ok</tt> message.  If any checks fail, <span><i class="EMPHASIS">gmake check</i></span> will display output
      similar to that found in <a href="x486.htm#REGRESSIONCHECKOUTPUT">Example 2-9</a>, though the number of tests failed may be higher on your
      system than the number in the example.</p><div class="NAVHEADER"><a name="REGRESSIONCHECKOUTPUT"></a><p class="calibre9"><b class="calibre10">Example 2-9. Regression check output</b></p><pre class="SCREEN">=======================
 1 of 76 tests failed.
=======================

The differences that caused some tests to fail can be viewed in the
file ./regression.diffs'.  A copy of the test summary that you see
above is saved in the file ./regression.out'.</pre></div><p class="calibre9">The files referenced in <a href="x486.htm#REGRESSIONCHECKOUTPUT">Example 2-9</a> (<span><i class="EMPHASIS">regression.diffs</i></span> and
      <span><i class="EMPHASIS">regression.out</i></span>) are placed within the source tree at <span><i class="EMPHASIS">src/test/regress</i></span>.  If the
      source tree is located in <span><i class="EMPHASIS">/usr/local/src</i></span>, the full path to the directory files would be
      <span><i class="EMPHASIS">/usr/local/src/postgresql-[version]/src/test/regress</i></span>.  </p><p class="calibre9">The regression tests will not always pick up every possible error. This can be due to inconsistencies in
      locale settings (such as time zone support), or hardware-specific issues (such as floating-point results). As with any
      application, be sure to perform your own requirements testing while developing with PostgreSQL.</p><div class="NAVHEADER"><p class="calibre9"></p><table class="calibre" border="1" width="100%"><tr class="calibre1"><td class="calibre23"><b class="calibre10">Warning</b></td></tr><tr class="calibre1"><td class="calibre15"><p class="calibre9">You cannot run the regression tests as the <span><i class="EMPHASIS">root</i></span> user. Be sure to run 
        <span><i class="EMPHASIS">gmake check</i></span> as the <span><i class="EMPHASIS">postgres</i></span> user.</p></td></tr></table></div></div><div class="NAVHEADER"><h2 class="SECT"><a name="AEN911" class="calibre8">Step 6: Installing Compiled Programs and Libraries</a></h2><p class="calibre9">After you have configured and compiled the PostgreSQL source code, it is time to install the compiled libraries,
      binaries, and data files into a more appropriate home on the system.  If you are upgrading from a previous version of
      PostgreSQL, be sure to back up your database before beginning this step.  Information on performing PostgreSQL database
      backups can be found in <a href="c16573.htm">Chapter 9</a>.</p><p class="calibre9">Installation of the compiled files is accomplished with the commands demonstrated in <a href="x486.htm#THEMAKEINSTALLCOMMAND">Example 2-10</a>.  When executed in the manner shown in <a href="x486.htm#THEMAKEINSTALLCOMMAND">Example 2-10</a>, the
      <span><i class="EMPHASIS">su</i></span> command temporarily logs you in as the <span><i class="EMPHASIS">root</i></span> user to execute the required
      commands.  You must have the <span><i class="EMPHASIS">root</i></span> password to execute both of the commands shown in <a href="x486.htm#THEMAKEINSTALLCOMMAND">Example 2-10</a>.</p><div class="NAVHEADER"><blockquote class="NOTE"><p class="calibre9"><b class="calibre10">Note: </b>If you specified a non-default installation directory in Step 3, use the directory you specified instead of
        <span><i class="EMPHASIS">/usr/local/pgsql</i></span>.</p></blockquote></div><div class="NAVHEADER"><a name="THEMAKEINSTALLCOMMAND"></a><p class="calibre9"><b class="calibre10">Example 2-10. The gmake install command</b></p><pre class="SCREEN">$ <tt class="REPLACEABLE"><b class="calibre10">su -c "gmake install"</b></tt>
Password:
gmake -C doc install
gmake[1]: Entering directory /usr/local/src/postgresql-7.1.3/doc'
mkdir /usr/local/pgsql
mkdir /usr/local/pgsql/man
mkdir /usr/local/pgsql/doc
mkdir /usr/local/pgsql/doc/html
[...]
$ <tt class="REPLACEABLE"><b class="calibre10">su -c "chown -R postgres.postgres /usr/local/pgsql"</b></tt>
Password:  </pre></div><p class="calibre9">The <span><i class="EMPHASIS">su -c "gmake install"</i></span> command will install the freshly compiled source either into the
      directory structure you chose in Step 3 with the <span><i class="EMPHASIS">--prefix</i></span> configuration option, or, if this was left
      unspecified, into the default directory of <span><i class="EMPHASIS">/usr/local/pgsql</i></span>. The use of the 
      
      <span><i class="EMPHASIS">su -c "chown -R postgres.postgres /usr/local/pgsql"</i></span> command will ensure that the
      <span><i class="EMPHASIS">postgres</i></span> user owns the PostgreSQL installation directories. Using the <span><i class="EMPHASIS">su -c</i></span>
      command lets you save a step by only logging you in as the <span><i class="EMPHASIS">root</i></span> user for the duration of the command’s execution.</p><p class="calibre9">If you chose to configure the PostgreSQL source with the Perl or Python interface, but did not have root access, you
      can still install the interfaces manually. Use the commands demonstrated in <a href="x486.htm#PERLANDPYTHONMODULEINSTALLATION">Example 2-11</a> to install the Perl and Python modules manually.  </p><div class="NAVHEADER"><a name="PERLANDPYTHONMODULEINSTALLATION"></a><p class="calibre9"><b class="calibre10">Example 2-11. Installing Perl and Python modules manually</b></p><pre class="SCREEN">$ <tt class="REPLACEABLE"><b class="calibre10">su -c "gmake -C src/interfaces/perl5 install"</b></tt>
Password:
Password:
gmake: Entering directory /usr/local/src/postgresql-7.1.3/src/interfaces/perl5'
perl Makefile.PL
Checking if your kit is complete...
Looks good
Writing Makefile for Pg
gmake -f Makefile clean
[...]
$ <tt class="REPLACEABLE"><b class="calibre10">su -c "gmake -C src/interfaces/python install"</b></tt>
Password:
gmake: Entering directory /usr/local/src/postgresql-7.1.3/src/interfaces/python'                                                                  
sed -e 's,@libpq_srcdir@,../../../src/interfaces/libpq,g' \
    -e 's,@libpq_builddir@,../../../src/interfaces/libpq,g' \
    -e 's%@EXTRA_LIBS@% -lz -lcrypt -lresolv -lnsl -ldl -lm -lbsd -lreadline -ltermcap %g' \
    -e 's%@INCLUDES@%-I../../../src/include%g' \
[...]</pre></div><p class="calibre9">You may also want to install the header files for PostgreSQL.  This is important, because the default installation
      will only install the header files for client application development. If you are going to be using some of PostgreSQL's
      advanced functionality, such as user-defined functions or developing applications in C that use the
      <span><i class="EMPHASIS">libpq</i></span> library, you will need this functionality.  To install the required header files, perform the
      commands demonstrated in <a href="x486.htm#INSTALLALLHEADERS">Example 2-12</a>. </p><div class="NAVHEADER"><a name="INSTALLALLHEADERS"></a><p class="calibre9"><b class="calibre10">Example 2-12. Installing all headers</b></p><pre class="SCREEN">$ <tt class="REPLACEABLE"><b class="calibre10">su -c "gmake install-all-headers"</b></tt>
Password:
gmake -C src install-all-headers
gmake[1]: Entering directory /usr/local/src/postgresql-7.1.3/src'
gmake -C include install-all-headers
[...]</pre></div></div><div class="NAVHEADER"><h2 class="SECT"><a name="AEN956" class="calibre8">Step 7: Setting Environment Variables</a></h2><p class="calibre9">The use of the PostgreSQL environment variables is not required. However, they are helpful when performing tasks
      within PostgreSQL, including starting and shutting down the <span><i class="EMPHASIS">postmaster</i></span> processes.  The environment
      variables that should be set are for the <span><i class="EMPHASIS">man</i></span> pages and the <span><i class="EMPHASIS">bin</i></span> directory. You can
      do so by adding the following statements into the <span><i class="EMPHASIS">/etc/profile</i></span> file. This should work for any
      <span><i class="EMPHASIS">sh</i></span>-based shell, including bash and ksh.</p><pre class="SCREEN">PATH=$PATH:/usr/local/pgsql/bin
MANPATH=$MANPATH:/usr/local/pgsql/man
export PATH MANPATH</pre><div class="NAVHEADER"><blockquote class="NOTE"><p class="calibre9"><b class="calibre10">Note: </b>You must login to the system <span><i class="EMPHASIS">after</i></span> the <span><i class="EMPHASIS">/etc/profile</i></span> file has had
        environment variables added to it in order for your shell to utilize them.</p></blockquote></div><p class="calibre9">Depending on how your system handles shared libraries, you may need to inform the operating system of where your
      PostgreSQL shared libraries are located.  Systems such as Linux, FreeBSD, NetBSD, OpenBSD, Irix, HP/UX, and Solaris will
      most likely not need to do this.</p><p class="calibre9">In a default installation, shared libraries will be located in <span><i class="EMPHASIS">/usr/local/pgsql/lib</i></span> (this may be
      different, depending on whether you changed it with the <span><i class="EMPHASIS">--prefix</i></span> configuration option).  One of the
      most common ways to accomplish this is to set the <tt class="REPLACEABLE">LD_LIBRARY_PATH </tt> environment variable to
      <span><i class="EMPHASIS">/usr/local/pgsql/lib</i></span>.  See <a href="x486.htm#SETTINGTHELIBPATHINBOURNE">Example 2-13</a> for an example of doing this in
      Bourne-style shells and <a href="x486.htm#SETTINGTHELIBPATHINCSH">Example 2-14</a> for an example of doing this in <span><i class="EMPHASIS">csh</i></span>
      and <span><i class="EMPHASIS">tcsh</i></span>.</p><div class="NAVHEADER"><a name="SETTINGTHELIBPATHINBOURNE"></a><p class="calibre9"><b class="calibre10">Example 2-13. Setting LD_LIBRARY_PATH in a bash shell</b></p><pre class="SCREEN">$ <tt class="REPLACEABLE"><b class="calibre10">LD_LIBRARY_PATH=/usr/local/pgsql/lib</b></tt>
$ <tt class="REPLACEABLE"><b class="calibre10">export LD_LIBRARY_PATH</b></tt></pre></div><div class="NAVHEADER"><a name="SETTINGTHELIBPATHINCSH"></a><p class="calibre9"><b class="calibre10">Example 2-14. Setting LD_LIBRARY_PATH in csh and tcsh</b></p><pre class="SCREEN">$ <tt class="REPLACEABLE"><b class="calibre10">setenv LD_LIBRARY_PATH /usr/local/pgsql/lib</b></tt></pre></div></div><div class="NAVHEADER"><h2 class="SECT"><a name="AEN996" class="calibre8">Step 8: Initializing and Starting PostgreSQL</a></h2><p class="calibre9">If you are logged in as the <span><i class="EMPHASIS">root</i></span> user, instead of using the <span><i class="EMPHASIS">su -c</i></span> command
      in the previous steps, you will now need to login as the <span><i class="EMPHASIS">postgres</i></span> user you added in step 1. Once you
      are logged in as the <span><i class="EMPHASIS">postgres</i></span> user, issue the command shown in <a href="x486.htm#INITIALIZINGTHEDATABASE">Example 2-15</a>.</p><div class="NAVHEADER"><a name="INITIALIZINGTHEDATABASE"></a><p class="calibre9"><b class="calibre10">Example 2-15. Initializing the database</b></p><pre class="SCREEN">$ <tt class="REPLACEABLE"><b class="calibre10">/usr/local/pgsql/bin/initdb -D /usr/local/pgsql/data</b></tt></pre></div><p class="calibre9">The <span><i class="EMPHASIS">-D</i></span> option in the previous command is the location where the data will be stored. This
      location can also be set with the <tt class="REPLACEABLE">PGDATA</tt> environment variable.  If you have set
      <tt class="REPLACEABLE">PGDATA</tt>, the <span><i class="EMPHASIS">-D</i></span> option is unnecessary. If you would like to use a
      different directory to hold these data files, make sure the <span><i class="EMPHASIS">postgres</i></span> user account can write to that
      directory. When you execute <span><i class="EMPHASIS">initdb</i></span> you will see something similar to what is shown in <a href="x486.htm#INITDBOUTPUT">Example 2-16</a>.</p><div class="NAVHEADER"><a name="INITDBOUTPUT"></a><p class="calibre9"><b class="calibre10">Example 2-16. Output from initdb</b></p><pre class="SCREEN">$ <tt class="REPLACEABLE"><b class="calibre10">/usr/local/pgsql/bin/initdb -D /usr/local/pgsql/data</b></tt>
This database system will be initialized with username "postgres."
This user will own all the data files and must also own the server process.

Creating directory /usr/local/pgsql/data
Creating directory /usr/local/pgsql/data/base
Creating directory /usr/local/pgsql/data/global
Creating directory /usr/local/pgsql/data/pg_xlog
Creating template1 database in /usr/local/pgsql/data/base/1
DEBUG:  database system was shut down at 2001-08-24 16:36:35 PDT
DEBUG:  CheckPoint record at (0, 8)
DEBUG:  Redo record at (0, 8); Undo record at (0, 8); Shutdown TRUE
DEBUG:  NextTransactionId: 514; NextOid: 16384
DEBUG:  database system is in production state
Creating global relations in /usr/local/pgsql/data/global
DEBUG:  database system was shut down at 2001-08-24 16:36:38 PDT
DEBUG:  CheckPoint record at (0, 108)
DEBUG:  Redo record at (0, 108); Undo record at (0, 0); Shutdown TRUE
DEBUG:  NextTransactionId: 514; NextOid: 17199
DEBUG:  database system is in production state
Initializing pg_shadow.
Enabling unlimited row width for system tables.
Creating system views.
Loading pg_description.
Setting lastsysoid.
Vacuuming database.
Copying template1 to template0.

Success. You can now start the database server using:

/usr/local/pgsql/bin/postmaster -D /usr/local/pgsql/data
or
/usr/local/pgsql/bin/pg_ctl -D /usr/local/pgsql/data -l logfile start</pre></div><div class="NAVHEADER"><blockquote class="NOTE"><p class="calibre9"><b class="calibre10">Note: </b>You can indicate that PostgreSQL should use a different data directory by specifying the directory location with
         the <span><i class="EMPHASIS">-D</i></span> option. This path must be initialized through <span><i class="EMPHASIS">initdb</i></span>.</p></blockquote></div><p class="calibre9">When the <span><i class="EMPHASIS">initdb</i></span> command has completed, it will provide you with information on starting the
      PostgreSQL server. The first command displayed will start <span><i class="EMPHASIS">postmaster</i></span> in the foreground. After 
      entering the command as it is shown in <a href="x486.htm#POSTMASTERFOREGROUND">Example 2-17</a>, the prompt will be inaccessible until
      you press CTRL-C on the keyboard to shut down the <span><i class="EMPHASIS">postmaster</i></span> process.</p><div class="NAVHEADER"><a name="POSTMASTERFOREGROUND"></a><p class="calibre9"><b class="calibre10">Example 2-17. Running postmaster in the foreground</b></p><pre class="SCREEN">$ <tt class="REPLACEABLE"><b class="calibre10">/usr/local/pgsql/bin/postmaster -D /usr/local/pgsql/data</b></tt>
DEBUG:  database system was shut down at 2001-10-12 23:11:00 PST
DEBUG:  CheckPoint record at (0, 1522064)
DEBUG:  Redo record at (0, 1522064); Undo record at (0, 0); Shutdown TRUE
DEBUG:  NextTransactionId: 615; NextOid: 18720
DEBUG:  database system is in production state</pre></div><p class="calibre9">Starting PostgreSQL in the foreground is not normally required. We suggest the use of the second command displayed.
      The second command will start <span><i class="EMPHASIS">postmaster</i></span> in the background. It uses <span><i class="EMPHASIS">pg_ctl</i></span> to
      start the postmaster service, as shown in <a href="x486.htm#POSTMASTERBACKGROUND">Example 2-18</a>.</p><div class="NAVHEADER"><a name="POSTMASTERBACKGROUND"></a><p class="calibre9"><b class="calibre10">Example 2-18. Running postmaster in the background</b></p><pre class="SCREEN">$ <tt class="REPLACEABLE"><b class="calibre10">/usr/local/pgsql/bin/pg_ctl -D /usr/local/pgsql/data -l /tmp/pgsql.log start</b></tt>
postmaster successfully started </pre></div><p class="calibre9">The major difference between the first command and the second command is that the second runs
      <span><i class="EMPHASIS">postmaster</i></span> in the background, as well as redirects any debugging information to
      <span><i class="EMPHASIS">/tmp/pgsql.log</i></span>. For normal operation, it is generally better to run <span><i class="EMPHASIS">postmaster</i></span> in
      the background, with logging enabled.</p><div class="NAVHEADER"><blockquote class="NOTE"><p class="calibre9"><b class="calibre10">Note: </b>The <span><i class="EMPHASIS">pg_ctl</i></span> application can be used to start and stop the PostgreSQL server. See 
        <a href="c16573.htm">Chapter 9</a> for more on this command.</p></blockquote></div></div><div class="NAVHEADER"><h2 class="SECT"><a name="CONFIGURINGSYSVSCRIPT" class="calibre8">Step 9: Configuring the PostgreSQL SysV Script</a></h2><p class="calibre9">The SysV script will allow the graceful control of the PostgreSQL database through the use of the SysV runlevel
      system.  The SysV script can be used for starting, stopping, and status-checking of PostgreSQL. It is known to work with
      most Red Hat based versions of Linux, including Mandrake; however, it should work with other SysV systems (e.g., UnixWare,
      Solaris, etc.) with little modification.  The script is named <span><i class="EMPHASIS">linux</i></span>. To use it, you will first need to
      copy the <span><i class="EMPHASIS">linux</i></span> script to your <span><i class="EMPHASIS">init.d</i></span> directory. You may require root access to do
      this.</p><p class="calibre9">First, change to the directory where you unpacked the PostgreSQL source. In our case, the path to that directory is
      <span><i class="EMPHASIS">/usr/local/src/postgresql-7.1.3/</i></span>.  Then, issue a <span><i class="EMPHASIS">cp</i></span> command to copy the script
      from <span><i class="EMPHASIS">contrib/start-scripts</i></span> into the <span><i class="EMPHASIS">init.d</i></span> directory.  <a href="x486.htm#COPYINGTHELINUXSCRIPT">Example 2-19</a> demonstrates how to do this on a Red Hat Linux system.</p><div class="NAVHEADER"><a name="COPYINGTHELINUXSCRIPT"></a><p class="calibre9"><b class="calibre10">Example 2-19. Copying the linux script</b></p><pre class="SCREEN">$ <tt class="REPLACEABLE"><b class="calibre10">cd /usr/local/src/postgresql-7.1.3/</b></tt>
$ <tt class="REPLACEABLE"><b class="calibre10">su -c "cp contrib/start-scripts/linux /etc/rc.d/init.d/postgresql"</b></tt></pre></div><p class="calibre9"><a href="x486.htm#COPYINGTHELINUXSCRIPT">Example 2-19</a> arbitrarily re-names the new copy to <span><i class="EMPHASIS">postgresql</i></span>; you may
      call it whatever you prefer, though it is typically named either <span><i class="EMPHASIS">postgresql</i></span>, or
      <span><i class="EMPHASIS">postgres</i></span>.</p><p class="calibre9">You will need to make the script file <span><i class="EMPHASIS">executable</i></span> after copying it. To do so, use the command
      shown in <a href="x486.htm#MAKINGTHELINUXSCRIPTEXECUTABLE">Example 2-20</a>.</p><div class="NAVHEADER"><a name="MAKINGTHELINUXSCRIPTEXECUTABLE"></a><p class="calibre9"><b class="calibre10">Example 2-20. Making the linux script executable</b></p><pre class="SCREEN">$ <tt class="REPLACEABLE"><b class="calibre10">su -c "chmod a+x /etc/rc.d/init.d/postgresql"</b></tt></pre></div><p class="calibre9">There are no additional requirements to use the SysV script with Red Hat, if you do not intend on using it to start
      PostgreSQL automatically (i.e., if you wish to use the script manually).  However, if you do wish for the script to startup
      PostgreSQL automatically when the machine boots up (or changes runlevels), you will need to have the
      <span><i class="EMPHASIS">chkconfig</i></span> program installed. If <span><i class="EMPHASIS">chkconfig</i></span> is installed, you will also need to add
      the following two lines, including the hash (<tt class="REPLACEABLE">#</tt>) symbol, at the beginning of the
      <span><i class="EMPHASIS">/etc/rc.d/init.d/postgresql</i></span> file:</p><pre class="SCREEN"># chkconfig: 345 85 15
# description: PostgreSQL RDBMS</pre><p class="calibre9">These example numbers should work on your system; however, it is good to know what role they perform. The first group
      of numbers (<tt class="REPLACEABLE">345</tt>) represent which runlevels PostgreSQL should be started at. The example
      shown would start PostgreSQL at runlevels 3, 4, and 5. The second group of numbers (<tt class="REPLACEABLE">85</tt>)
      represent the order in which PostgreSQL should be started within that runlevel, relative to other programs.  You should
      probably keep the second number high, to indicate that it should be started later in the runlevel. The third number
      (<tt class="REPLACEABLE">15</tt>) represents the order in which PostgreSQL should be shutdown.  It is a good idea to
      keep this number low, representing a shutdown order that is inverse from the startup order.  As previously mentioned, the
      script should work on your system with the numbers provided, but you can change them if it is necessary.</p><p class="calibre9">Once these two lines have been added to the script, you can use the commands shown in <a href="x486.htm#SYSVSTYLEPOSTGRESQLSTARTUP">Example 2-21</a> on Red Hat and Mandrake Linux distributions to start the PostgreSQL database. Be sure
      to execute these as the <span><i class="EMPHASIS">root</i></span> user.</p><div class="NAVHEADER"><a name="SYSVSTYLEPOSTGRESQLSTARTUP"></a><p class="calibre9"><b class="calibre10">Example 2-21. Starting PostgreSQL with the SysV script</b></p><pre class="SCREEN">$ <tt class="REPLACEABLE"><b class="calibre10">service postgresql start</b></tt>
Starting PostgreSQL: ok
$ <tt class="REPLACEABLE"><b class="calibre10">service postgresql stop</b></tt>
Stopping PostgreSQL: ok</pre></div><div class="NAVHEADER"><blockquote class="NOTE"><p class="calibre9"><b class="calibre10">Note: </b>The SysV script logs redirects all PostgreSQL debugging output to <span><i class="EMPHASIS">/usr/local/pgsql/data/serverlog</i></span>, by default.</p></blockquote></div></div><div class="NAVHEADER"><h2 class="SECT"><a name="AEN1116" class="calibre8">Step 10: Creating a Database</a></h2><p class="calibre9">Now that the PostgreSQL database system is running, you have the option of using the default database,
      <tt class="REPLACEABLE">template1</tt>. If you create a new database, and you would like all of your consecutive databases to have
      the same system-wide options, then you should first configure the <tt class="REPLACEABLE">template1</tt> database to have those
      options enabled. For instance, if you plan to use the PL/pgSQL language to program, then you should install the PL/pgSQL
      language into <tt class="REPLACEABLE">template1</tt> before using <span><i class="EMPHASIS">createdb</i></span>.  Then when you use the
      <span><i class="EMPHASIS">createdb</i></span> command, the database created will inherit <tt class="REPLACEABLE">template1</tt>’s objects, and
      thus, inherit the PL/pgSQL language.  For more information on installing the PL/pgSQL language into a database, refer to
      <a href="c19610.htm">Chapter 11</a>.</p><p class="calibre9">The next step will be to create a new database. This will be a simple test database. We do not recommend using the
      default <tt class="REPLACEABLE">template1</tt> database for testing purposes.  As you have not created any users with
      database-creation rights, you will want to make sure that you are logged in as the <span><i class="EMPHASIS">postgres</i></span> user when
      adding a new database. You can also create users that are allowed to add databases, which is discussed later in <a href="c18591.htm">Chapter 10</a>. To create a new database named <tt class="REPLACEABLE">testdb</tt>, enter the command shown in <a href="x486.htm#CREATINGADATABASEWITHCREATDB">Example 2-22</a>.</p><div class="NAVHEADER"><a name="CREATINGADATABASEWITHCREATDB"></a><p class="calibre9"><b class="calibre10">Example 2-22. Creating a database</b></p><pre class="SCREEN">$ <tt class="REPLACEABLE"><b class="calibre10">createdb testdb</b></tt>
CREATE DATABASE </pre></div><p class="calibre9">You should receive a message that says <tt class="REPLACEABLE">CREATE DATABASE</tt>, indicating that creation of
      the database was successful.  You can now use PostgreSQL's command line interface, <span><i class="EMPHASIS">psql</i></span>, to access the
      newly created database.  To do so, enter the command shown in <a href="x486.htm#ACCESSINGADATABASEWITHPSQL">Example 2-23</a>.</p><div class="NAVHEADER"><a name="ACCESSINGADATABASEWITHPSQL"></a><p class="calibre9"><b class="calibre10">Example 2-23. Accessing a database with psql</b></p><pre class="SCREEN">$ <tt class="REPLACEABLE"><b class="calibre10">psql testdb</b></tt></pre></div><p class="calibre9">You can now start entering SQL commands (e.g., such as <tt class="REPLACEABLE">SELECT</tt>) at the
      <span><i class="EMPHASIS">psql</i></span> prompt. If you are unfamiliar with <span><i class="EMPHASIS">psql</i></span>, please see <a href="c4890.htm">Chapter 4</a> for an introduction.</p><p class="calibre9">To verify that the database is working correctly, you can issue the command shown in <a href="x486.htm#QUERYINGASYSTEMTABLE">Example 2-24</a>, which should give you a listing of the languages installed in the database.</p><div class="NAVHEADER"><a name="QUERYINGASYSTEMTABLE"></a><p class="calibre9"><b class="calibre10">Example 2-24. Querying a system table</b></p><pre class="SCREEN">testdb=# <tt class="REPLACEABLE"><b class="calibre10">SELECT * FROM pg_language;</b></tt>
 lanname  | lanispl | lanpltrusted | lanplcallfoid | lancompiler
----------+---------+--------------+---------------+-------------
 internal | f       | f            |             0 | n/a
 C        | f       | f            |             0 | /bin/cc
 sql      | f       | f            |             0 | postgres
(3 rows)</pre></div></div></div><div class="NAVHEADER"><hr width="100%" class="calibre6"/><table summary="Footer navigation table" width="100%" border="0" cellpadding="0" cellspacing="0" class="calibre"><tr class="calibre1"><td width="33%" valign="top" class="calibre3"><a href="c360.htm" accesskey="P">Prev</a></td><td width="34%" valign="top" class="calibre4"><a href="book1.htm" accesskey="H">Home</a></td><td width="33%" valign="top" class="calibre5"><a href="p1162.htm" accesskey="N">Next</a></td></tr><tr class="calibre1"><td width="33%" valign="top" class="calibre3">Installing PostgreSQL</td><td width="34%" valign="top" class="calibre4"><a href="c360.htm" accesskey="U">Up</a></td><td width="33%" valign="top" class="calibre5">Using PostgreSQL</td></tr></table></div></div>

{% endraw %}

