---
layout: page
title: "Unknown"
prev: c208.htm
next: p1162.htm
book_path: books/o-reilly-practical-postgresql_oeb/
---
{% include JB/setup %}
{% raw %}
<div>
<div class="NAVHEADER"><table summary="Header navigation table" width="100%" border="0" cellpadding="0" cellspacing="0" class="calibre"><tr class="calibre1"><th colspan="3" class="calibre2">Practical PostgreSQL</th></tr><tr class="calibre1"><td width="10%" valign="bottom" class="calibre3"><a href="c208.htm" accesskey="P">Prev</a></td><td width="80%" valign="bottom" class="calibre4">Chapter 1. What is PostgreSQL?</td><td width="10%" valign="bottom" class="calibre5"><a href="x337.htm" accesskey="N">Next</a></td></tr></table><hr width="100%" class="calibre6"/></div><div class="NAVHEADER"><h1 class="calibre7"><a name="POSTGRESQLFEATURESET" class="calibre8">PostgreSQL Feature Set</a></h1><p class="calibre9">As stated previously in this chapter, PostgreSQL is widely considered the most advanced
    open source database in the world. PostgreSQL provides a wealth of features that are usually
    only found in commercial databases such as DB2 or Oracle. The following is a brief listing of
    some of these core features, as of PostgreSQL 7.1.x.

      </p><p class="calibre9"></p><div class="NAVHEADER"><dl class="calibre9"><dt class="NAVHEADER">Object-Relational DBMS</dt><dd class="calibre16"><p class="calibre9">PostgreSQL approaches data with an object-relational model, and is capable of handling complex routines and
            rules. Examples of its advanced functionality are declarative SQL queries, multi-version concurrency control,
            multi-user support, transactions, query optimization, inheritance, and arrays.</p></dd><dt class="NAVHEADER">Highly extensible</dt><dd class="calibre16"><p class="calibre9">PostgreSQL supports user-defined operators, functions, access methods, and data types.</p></dd><dt class="NAVHEADER">Comprehensive SQL support</dt><dd class="calibre16"><p class="calibre9">PostgreSQL supports the core SQL99 specification and includes advanced features
            such as SQL92 joins.</p></dd><dt class="NAVHEADER">Referential integrity</dt><dd class="calibre16"><p class="calibre9">PostgreSQL supports referential integrity, which is used to insure the validity of
            a database's data.</p></dd><dt class="NAVHEADER">Flexible API</dt><dd class="calibre16"><p class="calibre9">The flexibility of the PostgreSQL API has allowed vendors to provide development support easily for the
            PostgreSQL RDBMS. These interfaces include Object Pascal, Python, Perl, PHP, ODBC, Java/JDBC, Ruby, TCL, C/C++, and
            Pike.</p></dd><dt class="NAVHEADER">Procedural languages</dt><dd class="calibre16"><p class="calibre9">PostgreSQL has support for internal procedural languages, including a native
            language called PL/pgSQL. This language is comparable to the Oracle
            procedural language, PL/SQL. Another advantage to PostgreSQL is its ability to
            use Perl, Python, or TCL as an embedded procedural language.</p></dd><dt class="NAVHEADER">MVCC</dt><dd class="calibre16"><p class="calibre9">MVCC, or Multi-Version Concurrency Control, is the technology that PostgreSQL
             uses to avoid unnecessary <span><i class="EMPHASIS">locking</i></span>. If you have ever used another
             SQL capable DBMS, such as MySQL or Access, you have probably noticed that there are times when a
             reader has to wait for access to information in the database. The waiting is
             caused by people who are writing to the database. In short, the reader is blocked by
             writers who are updating records.</p><p class="calibre9">By using MVCC, PostgreSQL avoids this problem entirely. MVCC is considered
             better than row-level locking because a reader is never blocked by a writer. Instead,
             PostgreSQL keeps track of all transactions performed by the database users.
             PostgreSQL is then able to manage the records without causing people to wait for
             records to become available.</p></dd><dt class="NAVHEADER">Client/server</dt><dd class="calibre16"><p class="calibre9">PostgreSQL uses a process-per-user client/server architecture. This is similar to
           the Apache 1.3.x method of handling processes. There is a master process that forks to
           provide additional connections for each client attempting to connect to
           PostgreSQL.</p></dd><dt class="NAVHEADER">Write Ahead Logging (WAL)</dt><dd class="calibre16"><p class="calibre9">The PostgreSQL feature known as <span><i class="EMPHASIS">Write Ahead Logging</i></span> increases
           the reliability of the database by logging changes <span><i class="EMPHASIS">before</i></span> they are written to the database. This ensures that, in the
           unlikely occurrence of a database crash, there will be a record of transactions from which to
           restore. This can be greatly beneficial in the event of a crash, as any changes
           that were not written to the database can be recovered by using the data that was
           previously logged. Once the system is restored, a user can then continue to work from
           the point that they were at before the crash occurred.</p></dd></dl></div>
</div><div class="NAVHEADER"><hr width="100%" class="calibre6"/><table summary="Footer navigation table" width="100%" border="0" cellpadding="0" cellspacing="0" class="calibre"><tr class="calibre1"><td width="33%" valign="top" class="calibre3"><a href="c208.htm" accesskey="P">Prev</a></td><td width="34%" valign="top" class="calibre4"><a href="book1.htm" accesskey="H">Home</a></td><td width="33%" valign="top" class="calibre5"><a href="x337.htm" accesskey="N">Next</a></td></tr><tr class="calibre1"><td width="33%" valign="top" class="calibre3">What is PostgreSQL?</td><td width="34%" valign="top" class="calibre4"><a href="c208.htm" accesskey="U">Up</a></td><td width="33%" valign="top" class="calibre5">Where to Proceed from Here</td></tr></table></div></div>

{% endraw %}

