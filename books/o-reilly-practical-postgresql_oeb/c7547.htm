---
layout: page
title: "Unknown"
prev: x7543.htm
next: x8973.htm
book_path: books/o-reilly-practical-postgresql_oeb/
---
{% include JB/setup %}
{% raw %}
<div>
<div class="NAVHEADER"><table summary="Header navigation table" width="100%" border="0" cellpadding="0" cellspacing="0" class="calibre"><tr class="calibre1"><th colspan="3" class="calibre2">Practical PostgreSQL</th></tr><tr class="calibre1"><td width="10%" valign="bottom" class="calibre3"><a href="x7543.htm" accesskey="P">Prev</a></td><td width="80%" valign="bottom" class="calibre4"/><td width="10%" valign="bottom" class="calibre5"><a href="x8973.htm" accesskey="N">Next</a></td></tr></table><hr width="100%" class="calibre6"/></div><div class="NAVHEADER"><div class="calibre18"></div><h1 id="calibre_toc_7" class="calibre7"><a name="OPERATORSANDFUNCTIONS" class="calibre8">Chapter 5. Operators and Functions</a></h1><div class="NAVHEADER"><dl class="calibre9"><dt class="NAVHEADER"><b class="calibre10">Table of Contents</b></dt><dt class="NAVHEADER"><a href="c7547.htm#USINGOPERATORS">Operators</a></dt><dt class="NAVHEADER"><a href="x8973.htm">Functions</a></dt></dl></div><p class="calibre9">This chapter expands on the operators and functions available to PostgreSQL. These character symbols and identifiers
  allow you to flexibly modify and compare results within SQL statements. The results of these operations
  can be used in a variety of ways, from updating existing row data, to constraining query results to
  only rows matching particular conditions.</p><p class="calibre9">PostgreSQL supports the usual variety of standard SQL operators and functions as defined by the ANSI/ISO SQL standards,
  such as mathematical operators, basic text formatting functions, and date and time value extraction. PostgreSQL also comes
  with a rich set of custom PostgreSQL extensions, such as regular expression comparison operators, and the flexible
  <tt class="REPLACEABLE">to_char()</tt> text conversion function.</p><p class="calibre9">Take note that these sections describe the <span><i class="EMPHASIS">native</i></span> operators and functions available to PostgreSQL.
  An excellent feature of PostgreSQL is its extensibility in this area. Once you have a solid understanding of operators and functions, you
  may be interested in developing your own. These techniques are described in <a href="c13329.htm">Chapter 7</a>.</p><div class="NAVHEADER"><h1 class="calibre7"><a name="USINGOPERATORS" class="calibre8">Operators</a></h1><p class="calibre9">In <a href="c1164.htm">Chapter 3</a>, operators are defined syntactically as tokens that are used to perform
    operations on values (e.g., constants, or identifiers), and return the results of that operation.  In addition to these
    syntactic character symbols, there are some SQL keywords that are considered operators due to their effect on values in
    a SQL statement. Throughout this section, both these symbols and keywords will be referred to as operators.</p><p class="calibre9">The function of each operator is highly dependent on its context. Applications of operators range from performing
    mathematical operations and concatenating character strings, to performing a wide variety of comparisons yielding Boolean
    results. This section describes the general usage of operators in SQL, with successive sections on the following families of
    operators:</p><p class="calibre9"> </p><p class="calibre9"></p><ul class="calibre21"><li class="calibre22"><p class="calibre9">Character string </p></li><li class="calibre22"><p class="calibre9">Numeric </p></li><li class="calibre22"><p class="calibre9">Logical </p></li></ul>
<div class="NAVHEADER"><blockquote class="NOTE"><p class="calibre9"><b class="calibre10">Note: </b>For an up-to-date and complete list of PostgreSQL supported operators, you can use
      <span><i class="EMPHASIS">psql</i></span>â€‰'s <tt class="REPLACEABLE">\do</tt> slash command to view a list of available
      operators. Understand that many of the listed operators are PostgreSQL-specific, and therefore may not exist in other
      SQL-capable databases implementations.</p></blockquote></div><p class="calibre9">Following the discussions of the various types of operators, you'll find information on dealing with
    <tt class="REPLACEABLE">NULL</tt> values in expressions, and on the order in which operators are evaluated.</p><div class="NAVHEADER"><h2 class="SECT"><a name="USINGOPERATORSTABLE" class="calibre8">Using Operators</a></h2><p class="calibre9">Operators operate on either a single value or a pair of values. The majority of operators operate on two values,
      with the operator placed between the values it is to operate upon (e.g., <tt class="REPLACEABLE">a - b</tt>). Operators
      that affect only one value are called <span><i class="EMPHASIS">unary operators</i></span>, and either precede or follow the value they
      affect (e.g., the <tt class="REPLACEABLE">@</tt> operator preceding a value is a unary operator indicating the absolute
      value).</p><p class="calibre9">Many operators, while invoked with the same keyword or character symbol, will have different effects depending on the
      data types to which they are applied. Further, operators will not always have a relevant use to every data type (see <a href="c1164.htm">Chapter 3</a> for more information about what data types are available to PostgreSQL).</p><p class="calibre9">For example, you can use the addition operator (<tt class="REPLACEABLE">+</tt>) to add two integer values
      together, but you cannot use it to add an integer to a text type. This is an undefined (and therefore ambiguous and
      disallowed) use of the operator. The operator character itself (<tt class="REPLACEABLE">+</tt>, in this case) will
      still be recognized, but you will receive an error such as the one shown in <a href="c7547.htm#INCORRECTOPERATORUSAGE">Example 5-2</a>
      if you try to misuse an operator:</p><p class="calibre9">Consider the Book Town <tt class="REPLACEABLE">authors</tt> table, which correlates author's names with numeric
      identifiers.</p><pre class="SCREEN">         Table "authors"
 Attribute  |  Type   | Modifier
------------+---------+----------
 id         | integer | not null
 last_name  | text    |
 first_name | text    |
Index: authors_pkey</pre><p class="calibre9">Two identifiers in this table are the columns <tt class="REPLACEABLE">id</tt>, and
      <tt class="REPLACEABLE">last_name</tt>, which are types <tt class="REPLACEABLE">integer</tt> (a 4-byte integer)
      and <tt class="REPLACEABLE">text</tt>, respectively. Since the <tt class="REPLACEABLE">id</tt> column is type
      <tt class="REPLACEABLE">integer</tt>, it may be used with a mathematical operator along with another numeric value.</p><p class="calibre9"><a href="c7547.htm#CORRECTOPERATORUSAGE">Example 5-1</a> demonstrates correct usage of the addition (<tt class="REPLACEABLE">+</tt>)
      operator.</p><div class="NAVHEADER"><a name="CORRECTOPERATORUSAGE"></a><p class="calibre9"><b class="calibre10">Example 5-1. Correct operator usage</b></p><pre class="SCREEN">booktown=# <tt class="REPLACEABLE"><b class="calibre10">SELECT id + 1 AS id_plus_one, last_name</b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">       FROM authors</b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">       ORDER BY id DESC LIMIT 5;</b></tt>
 id_plus_one |  last_name
-------------+--------------
       25042 | Bianco
       15991 | Bourgeois
        7807 | Christiansen
        7806 | Lutz
        4157 | King
(5 rows)</pre></div><p class="calibre9">Notice the result of trying to add incompatible types in <a href="c7547.htm#INCORRECTOPERATORUSAGE">Example 5-2</a>.</p><div class="NAVHEADER"><a name="INCORRECTOPERATORUSAGE"></a><p class="calibre9"><b class="calibre10">Example 5-2. Incorrect operator usage</b></p><pre class="SCREEN">booktown=# <tt class="REPLACEABLE"><b class="calibre10">SELECT id + last_name AS mistake </b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">       FROM authors; </b></tt>
ERROR:  Unable to identify an operator '+' for types 'int4' and 'text'
        You will have to retype this query using an explicit cast</pre></div><p class="calibre9">Fortunately, as you can see in <a href="c7547.htm#INCORRECTOPERATORUSAGE">Example 5-2</a>, PostgreSQL's operator-misuse error messages
      supply a reason for failure, rather than blindly failing. These can be helpful in determining the next step in
      developing your statement, in order to make it a valid query.</p></div><div class="NAVHEADER"><h2 class="SECT"><a name="CHARACTERSTRINGOPERATORS" class="calibre8">Character String Operators</a></h2><p class="calibre9">PostgreSQL contains a comprehensive set of character string operators, from simple text concatenation and string
      comparison, to a strong set of regular expression matching. Character string operators are valid upon values of
      types <tt class="REPLACEABLE">char</tt>, <tt class="REPLACEABLE">varchar</tt>, and PostgreSQL's own
      <tt class="REPLACEABLE">text</tt> type.</p><p class="calibre9">The following sections describe the basic comparison and concatenation operators, as well as the implementation of
      case-sensitive and case-insensitive <span><i class="EMPHASIS">regular expression</i></span> operators.</p><div class="NAVHEADER"><h3 class="AUTHOR"><a name="BASICCOMPARISONOPERATORS" class="calibre8">Basic comparison</a></h3><p class="calibre9">Each of the basic character string comparison and concatenation operators supported by PostgreSQL are listed in
        <a href="c7547.htm#BASICCHARACTERSTRINGOPERATORS">Table 5-1</a>.</p><div class="NAVHEADER"><blockquote class="NOTE"><p class="calibre9"><b class="calibre10">Note: </b>Note that the <tt class="REPLACEABLE">LIKE</tt> and <tt class="REPLACEABLE">ILIKE</tt> keywords, which
          call to the <tt class="REPLACEABLE">like()</tt> function, are sometimes referred to as string comparison <span><i class="EMPHASIS">operators</i></span>. These
          keywords are covered in <a href="x8973.htm">the Section called <i class="EMPHASIS">Functions</i></a>".</p></blockquote></div><div class="NAVHEADER"><a name="BASICCHARACTERSTRINGOPERATORS"></a><p class="calibre9"><b class="calibre10">Table 5-1. Basic Character String Operators</b></p><table border="1" width="100%" class="calibre"><thead class="calibre11"><tr class="calibre12"><th width="1" valign="TOP" class="calibre13"><p class="calibre9">Operator</p></th><th width="9" valign="TOP" class="calibre13"><p class="calibre9">Usage</p></th><th width="17" valign="TOP" class="calibre13"><p class="calibre9">Description</p></th></tr></thead><tbody class="calibre14"><tr class="calibre12"><td width="1" valign="TOP" class="calibre23"><p class="calibre9"><tt class="REPLACEABLE">=</tt></p></td><td width="9" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE">'</tt><tt class="REPLACEABLE"><i class="EMPHASIS">string</i></tt>' = '<tt class="REPLACEABLE"><i class="EMPHASIS">comparison</i></tt>'</p></td><td width="17" valign="TOP" class="calibre15"><p class="calibre9">A comparison returning true if <tt class="REPLACEABLE"><i class="EMPHASIS">string</i></tt> matches <tt class="REPLACEABLE"><i class="EMPHASIS">comparison</i></tt> identically</p></td></tr><tr class="calibre12"><td width="1" valign="TOP" class="calibre23"><p class="calibre9"><tt class="REPLACEABLE">!=</tt></p></td><td width="9" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE">'</tt><tt class="REPLACEABLE"><i class="EMPHASIS">string</i></tt>' != '<tt class="REPLACEABLE"><i class="EMPHASIS">comparison</i></tt>'</p></td><td width="17" valign="TOP" class="calibre15"><p class="calibre9">A comparison returning true if <tt class="REPLACEABLE"><i class="EMPHASIS">string</i></tt> does not match <tt class="REPLACEABLE"><i class="EMPHASIS">comparison</i></tt> identically</p></td></tr><tr class="calibre12"><td width="1" valign="TOP" class="calibre23"><p class="calibre9"><tt class="REPLACEABLE">&lt;&gt;</tt></p></td><td width="9" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE">'</tt><tt class="REPLACEABLE"><i class="EMPHASIS">string</i></tt>' &lt;&gt; '<tt class="REPLACEABLE"><i class="EMPHASIS">comparison</i></tt>'</p></td><td width="17" valign="TOP" class="calibre15"><p class="calibre9">Identical to the <tt class="REPLACEABLE">!=</tt> operator</p></td></tr><tr class="calibre12"><td width="1" valign="TOP" class="calibre23"><p class="calibre9"><tt class="REPLACEABLE">&lt;</tt></p></td><td width="9" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE">'</tt><tt class="REPLACEABLE"><i class="EMPHASIS">string</i></tt>' &lt; '<tt class="REPLACEABLE"><i class="EMPHASIS">comparison</i></tt>'</p></td><td width="17" valign="TOP" class="calibre15"><p class="calibre9">A comparison returning true if <tt class="REPLACEABLE"><i class="EMPHASIS">string</i></tt> should be sorted alphabetically before <tt class="REPLACEABLE"><i class="EMPHASIS">comparison</i></tt></p></td></tr><tr class="calibre12"><td width="1" valign="TOP" class="calibre23"><p class="calibre9"><tt class="REPLACEABLE">&lt;=</tt></p></td><td width="9" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE">'</tt><tt class="REPLACEABLE"><i class="EMPHASIS">string</i></tt>' &lt;= '<tt class="REPLACEABLE"><i class="EMPHASIS">comparison</i></tt>'</p></td><td width="17" valign="TOP" class="calibre15"><p class="calibre9">A comparison returning true if <tt class="REPLACEABLE"><i class="EMPHASIS">string</i></tt> should be sorted alphabetically before <tt class="REPLACEABLE"><i class="EMPHASIS">comparison</i></tt>, or if the values are identical</p></td></tr><tr class="calibre12"><td width="1" valign="TOP" class="calibre23"><p class="calibre9"><tt class="REPLACEABLE">&gt;</tt></p></td><td width="9" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE">'</tt><tt class="REPLACEABLE"><i class="EMPHASIS">string</i></tt>' &gt; '<tt class="REPLACEABLE"><i class="EMPHASIS">comparison</i></tt>'</p></td><td width="17" valign="TOP" class="calibre15"><p class="calibre9">A comparison returning true if <tt class="REPLACEABLE"><i class="EMPHASIS">string</i></tt> should be sorted alphabetically after <tt class="REPLACEABLE"><i class="EMPHASIS">comparison</i></tt></p></td></tr><tr class="calibre12"><td width="1" valign="TOP" class="calibre23"><p class="calibre9"><tt class="REPLACEABLE">&gt;=</tt></p></td><td width="9" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE">'</tt><tt class="REPLACEABLE"><i class="EMPHASIS">string</i></tt>' &gt;= '<tt class="REPLACEABLE"><i class="EMPHASIS">comparison</i></tt>'</p></td><td width="17" valign="TOP" class="calibre15"><p class="calibre9">A comparison returning true if <tt class="REPLACEABLE"><i class="EMPHASIS">string</i></tt> should be sorted alphabetically after <tt class="REPLACEABLE"><i class="EMPHASIS">comparison</i></tt>, or if the values are identical</p></td></tr></tbody></table></div><p class="calibre9">Each of the string comparison operators returns a Boolean result of either true or false. The alphabetical sorting
        referred to by <a href="c7547.htm#BASICCHARACTERSTRINGOPERATORS">Table 5-1</a> compares each sequential character in a string, determining
        if one character is considered 'greater than' or 'less than' the other. If the leading characters in two strings are at
        all identical, each character is checked from left to right until two different characters are found for comparison. In
        this sorting scheme, characters are determined to be higher than one another based on their ASCII value, as demonstrated
        in the following example:</p><pre class="SCREEN">booktown=# <tt class="REPLACEABLE"><b class="calibre10">SELECT letter,</b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">       ascii(letter)</b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">       FROM text_sorting</b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">       ORDER BY letter ASC;</b></tt>
 letter | ascii
--------+-------
 0      |    48
 1      |    49
 2      |    50
 3      |    51
 A      |    65
 B      |    66
 C      |    67
 D      |    68
 a      |    97
 b      |    98
 c      |    99
 d      |   100
(12 rows)</pre><p class="calibre9">If you are unsure of how a character will be sorted, you can use the <tt class="REPLACEABLE">ascii()</tt>
        function to determine the ASCII value of the character. This function is described further in <a href="x8973.htm">the Section called <i class="EMPHASIS">Functions</i></a>."
        <a href="c7547.htm#COMPARINGSTRINGS">Example 5-3</a> illustrates a comparative check on the <tt class="REPLACEABLE">books</tt> table,
        and returns all titles whose first letter would be sorted before the letter <span><i class="EMPHASIS">D</i></span>.</p><div class="NAVHEADER"><a name="COMPARINGSTRINGS"></a><p class="calibre9"><b class="calibre10">Example 5-3. Comparing strings</b></p><pre class="SCREEN">booktown=# <tt class="REPLACEABLE"><b class="calibre10">SELECT title FROM books</b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">             WHERE substr(title, 1, 1) &lt; 'D';</b></tt>
            title
-----------------------------
 2001: A Space Odyssey
 Bartholomew and the Oobleck
(2 rows)</pre></div></div><div class="NAVHEADER"><h3 class="AUTHOR"><a name="STRINGCONCATENATION" class="calibre8">String concatenation</a></h3><p class="calibre9">The text concatenation operator (<tt class="REPLACEABLE">||</tt>) is an invaluable tool for formatting output
        results. Like all operators, it may be used anywhere a constant value is allowed in a SQL statement. Values may be
        repeatedly concatenated in a single statement by simply appending the <tt class="REPLACEABLE">||</tt> operator after
        each appended string constant or identifier.</p><p class="calibre9">As an example, it might be used in the <tt class="REPLACEABLE">WHERE</tt> clause in order to constrain rows by
        comparing against a dynamically generated character string. <a href="c7547.htm#CONCATENATINGSTRINGS">Example 5-4</a> demonstrates how to use
        this operator.</p><div class="NAVHEADER"><a name="CONCATENATINGSTRINGS"></a><p class="calibre9"><b class="calibre10">Example 5-4. Concatenating strings</b></p><pre class="SCREEN">booktown=# <tt class="REPLACEABLE"><b class="calibre10">SELECT 'The Title: ' || title || ', by ' ||</b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">       first_name || ' ' || last_name AS book_info</b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">       FROM books NATURAL JOIN authors AS a (author_id)</b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">       LIMIT 3;</b></tt>
                       book_info
--------------------------------------------------------
 The Title: The Shining, by Stephen King
 The Title: Dune, by Frank Herbert
 The Title: 2001: A Space Odyssey, by Arthur C. Clarke
(3 rows)</pre></div></div><div class="NAVHEADER"><h3 class="AUTHOR"><a name="CHARACTERSTRINGCOMPARISONOPERATORS" class="calibre8">Regular expression matching operators</a></h3><p class="calibre9">For times when normal equivalence comparisons are inadequate, PostgreSQL has several operators designed
        to perform pattern matching against regular expressions. A regular expression is similar to any other string to be matched
        against, with the exception that some characters (such as the square braces, pipe, and backslash) have
        special meaning in a comparison. If you have used UNIX programs such as <span><i class="EMPHASIS">sed</i></span>,
        <span><i class="EMPHASIS">grep</i></span>, or <span><i class="EMPHASIS">perl</i></span>, you may already be familiar with this kind of syntax.</p><div class="NAVHEADER"><blockquote class="NOTE"><p class="calibre9"><b class="calibre10">Note: </b>For more detailed information on regular expressions in general, refer to O'Reilly's
          <span><i class="EMPHASIS">Mastering Regular Expressions</i></span>, by Jeffrey E. F. Friedl.</p></blockquote></div><p class="calibre9">When a value is compared against a regular expression, the expression itself (or <span><i class="EMPHASIS">regex</i></span>) may
	match both literal character sequences, as well as several variable character sequences. Both literal and variable
	sequences may be specified throughout the expression. <a href="c7547.htm#ANEXAMPLEREGULAREXPRESSION">Example 5-5</a> illustrates an example
	of such a sequence. It searches the Book Town <tt class="REPLACEABLE">authors</tt> table for names
	beginning with either<span><i class="EMPHASIS">A</i></span> or <span><i class="EMPHASIS">T</i></span>.</p><div class="NAVHEADER"><a name="ANEXAMPLEREGULAREXPRESSION"></a><p class="calibre9"><b class="calibre10">Example 5-5. An example regular expression</b></p><pre class="SCREEN">booktown=# <tt class="REPLACEABLE"><b class="calibre10">SELECT first_name, last_name</b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">       FROM authors</b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">       WHERE first_name ~ '^A|^T';</b></tt>
  first_name   |  last_name
---------------+--------------
 Ariel         | Denham
 Tom           | Christiansen
 Arthur C.     | Clarke
 Andrew        | Brookins
 Theodor Seuss | Geisel
(5 rows)</pre></div><p class="calibre9">The <tt class="REPLACEABLE">~</tt> symbol is the regular expression operator, within the
	<tt class="REPLACEABLE">WHERE</tt> clause, and the regular expression sequence itself in <a href="c7547.htm#ANEXAMPLEREGULAREXPRESSION">Example 5-5</a> is <span><i class="EMPHASIS">^A|^T</i></span>. The special characters in this sequence are the
	caret (<tt class="REPLACEABLE">^</tt>), and the pipe (<tt class="REPLACEABLE">|</tt>), while the literal
	characters are <span><i class="EMPHASIS">A</i></span> and <span><i class="EMPHASIS">T</i></span>. The special characters used in regular expressions are
	explained in detail later in this section.</p><p class="calibre9">The most important syntactic difference between the use of the <tt class="REPLACEABLE">like()</tt> function and
        regular expression operators is that <tt class="REPLACEABLE">like()</tt> uses wild-card symbols (e.g.,
        <tt class="REPLACEABLE">%</tt>) at the beginning and end of its expression in order to match a substring. In
        contrast, (with the beginning and end-line symbols found in <a href="c7547.htm#REGULAREXPRESSIONSYMBOLS">Table 5-3</a>) regular expression operators will implicitly look for the regular expression
        sequence <span><i class="EMPHASIS">anywhere in the compared character string</i></span> unless otherwise instructed.</p><p class="calibre9"><a href="c7547.htm#REGULAREXPRESSIONCOMPARISONOPERATORS">Table 5-2</a> lists the regular expression operators.
        These operators compare a text value (either an identifier or a constant) to a regular expression. Each operator
        provides a Boolean result, depending on the nature of the operator.</p><div class="NAVHEADER"><a name="REGULAREXPRESSIONCOMPARISONOPERATORS"></a><p class="calibre9"><b class="calibre10">Table 5-2. Regular expression comparison operators</b></p><table border="1" width="100%" class="calibre"><thead class="calibre11"><tr class="calibre12"><th width="1" valign="TOP" class="calibre13"><p class="calibre9">Operator</p></th><th width="9" valign="TOP" class="calibre13"><p class="calibre9">Usage</p></th><th width="17" valign="TOP" class="calibre13"><p class="calibre9">Description</p></th></tr></thead><tbody class="calibre14"><tr class="calibre12"><td width="1" valign="TOP" class="calibre23"><p class="calibre9"><tt class="REPLACEABLE">~</tt></p></td><td width="9" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE">'</tt><tt class="REPLACEABLE"><i class="EMPHASIS">string</i></tt>' ~ '<tt class="REPLACEABLE"><i class="EMPHASIS">regex</i></tt>'</p></td><td width="17" valign="TOP" class="calibre15"><p class="calibre9">A regular expression comparison, yielding true if the expression matches</p></td></tr><tr class="calibre12"><td width="1" valign="TOP" class="calibre23"><p class="calibre9">!~</p></td><td width="9" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE">'</tt><tt class="REPLACEABLE"><i class="EMPHASIS">string</i></tt>' !~ '<tt class="REPLACEABLE"><i class="EMPHASIS">regex</i></tt>'</p></td><td width="17" valign="TOP" class="calibre15"><p class="calibre9">A regular expression comparison, yielding true if the expression <span><i class="EMPHASIS">does not</i></span> match</p></td></tr><tr class="calibre12"><td width="1" valign="TOP" class="calibre23"><p class="calibre9">~*</p></td><td width="9" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE">'</tt><tt class="REPLACEABLE"><i class="EMPHASIS">string</i></tt>' ~* '<tt class="REPLACEABLE"><i class="EMPHASIS">regex</i></tt>'</p></td><td width="17" valign="TOP" class="calibre15"><p class="calibre9">A case-insensitive regular expression, yielding true if the expression matches</p></td></tr><tr class="calibre12"><td width="1" valign="TOP" class="calibre23"><p class="calibre9">!~*</p></td><td width="9" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE">'</tt><tt class="REPLACEABLE"><i class="EMPHASIS">string</i></tt>' !~* '<tt class="REPLACEABLE"><i class="EMPHASIS">regex</i></tt>'</p></td><td width="17" valign="TOP" class="calibre15"><p class="calibre9">not equal to regular expression, case insensitive</p></td></tr></tbody></table></div><p class="calibre9">The special characters available to a regular expression are listed in <a href="c7547.htm#REGULAREXPRESSIONSYMBOLS">Table 5-3</a>.
        These are the characters which may be used in a regular expression string to represent special meaning.</p><div class="NAVHEADER"><a name="REGULAREXPRESSIONSYMBOLS"></a><p class="calibre9"><b class="calibre10">Table 5-3. Regular expression symbols</b></p><table border="1" width="100%" class="calibre"><thead class="calibre11"><tr class="calibre12"><th width="3" valign="TOP" class="calibre13"><p class="calibre9">Symbol(s)</p></th><th width="6" valign="TOP" class="calibre13"><p class="calibre9">Usage</p></th><th width="19" valign="TOP" class="calibre13"><p class="calibre9">Description</p></th></tr></thead><tbody class="calibre14"><tr class="calibre12"><td width="3" valign="TOP" class="calibre23"><p class="calibre9"><span><i class="EMPHASIS">^</i></span></p></td><td width="6" valign="TOP" class="calibre23"><p class="calibre9"><span><i class="EMPHASIS">^â€‰<tt class="REPLACEABLE"/></i><i class="EMPHASIS">expression</i></span></p></td><td width="19" valign="TOP" class="calibre15"><p class="calibre9">Matches the beginning (<span><i class="EMPHASIS">^</i></span>â€‰â€‰) of the character string</p></td></tr><tr class="calibre12"><td width="3" valign="TOP" class="calibre23"><p class="calibre9"><span><i class="EMPHASIS">$</i></span></p></td><td width="6" valign="TOP" class="calibre23"><p class="calibre9"><span><i class="EMPHASIS"><tt class="REPLACEABLE"/></i><i class="EMPHASIS">expression</i>â€‰$</span></p></td><td width="19" valign="TOP" class="calibre15"><p class="calibre9">Matches the end (<span><i class="EMPHASIS">$</i></span>â€‰) of the character string</p></td></tr><tr class="calibre12"><td width="3" valign="TOP" class="calibre23"><p class="calibre9"><span><i class="EMPHASIS">.</i></span></p></td><td width="6" valign="TOP" class="calibre23"><p class="calibre9"><span><i class="EMPHASIS">.</i></span></p></td><td width="19" valign="TOP" class="calibre15"><p class="calibre9">Matches any single character</p></td></tr><tr class="calibre12"><td width="3" valign="TOP" class="calibre23"><p class="calibre9"><span><i class="EMPHASIS">[â€‰]</i></span></p></td><td width="6" valign="TOP" class="calibre23"><p class="calibre9"><span><i class="EMPHASIS">[â€‰<tt class="REPLACEABLE"/></i><i class="EMPHASIS">abc</i>â€‰]</span></p></td><td width="19" valign="TOP" class="calibre15"><p class="calibre9">Matches any single character which is between brackets (e.g., <span><i class="EMPHASIS">a</i></span>, <span><i class="EMPHASIS">b</i></span>, or <span><i class="EMPHASIS">c</i></span>)</p></td></tr><tr class="calibre12"><td width="3" valign="TOP" class="calibre23"><p class="calibre9"><span><i class="EMPHASIS">[^]</i></span></p></td><td width="6" valign="TOP" class="calibre23"><p class="calibre9"><span><i class="EMPHASIS">[^<tt class="REPLACEABLE"/></i><i class="EMPHASIS">abc</i>â€‰]</span></p></td><td width="19" valign="TOP" class="calibre15"><p class="calibre9">Matches any single character not between brackets, following caret (e.g., not <span><i class="EMPHASIS">a</i></span>, <span><i class="EMPHASIS">b</i></span>, or <span><i class="EMPHASIS">c)</i></span></p></td></tr><tr class="calibre12"><td width="3" valign="TOP" class="calibre23"><p class="calibre9"><span><i class="EMPHASIS">[-]</i></span></p></td><td width="6" valign="TOP" class="calibre23"><p class="calibre9"><span><i class="EMPHASIS">[â€‰<tt class="REPLACEABLE"/></i><i class="EMPHASIS">a</i>-<tt class="REPLACEABLE"><i class="EMPHASIS">z</i></tt>â€‰]</span></p></td><td width="19" valign="TOP" class="calibre15"><p class="calibre9">Matches any character which is between the range of characters between brackets and separated by the dash (e.g., within <span><i class="EMPHASIS">a</i></span> through <span><i class="EMPHASIS">z</i></span>)</p></td></tr><tr class="calibre12"><td width="3" valign="TOP" class="calibre23"><p class="calibre9"><span><i class="EMPHASIS">[^-]</i></span></p></td><td width="6" valign="TOP" class="calibre23"><p class="calibre9"><span><i class="EMPHASIS">[^<tt class="REPLACEABLE"/></i><i class="EMPHASIS">a</i>-<tt class="REPLACEABLE"><i class="EMPHASIS">z</i></tt>â€‰]</span></p></td><td width="19" valign="TOP" class="calibre15"><p class="calibre9">Matches any characters <span><i class="EMPHASIS">not</i></span> between the range of characters between brackets and separated by the dash (e.g., not within <span><i class="EMPHASIS">a</i></span> through <span><i class="EMPHASIS">z</i></span>)</p></td></tr><tr class="calibre12"><td width="3" valign="TOP" class="calibre23"><p class="calibre9"><span><i class="EMPHASIS">?</i></span></p></td><td width="6" valign="TOP" class="calibre23"><p class="calibre9"><span><i class="EMPHASIS"><tt class="REPLACEABLE"/></i><i class="EMPHASIS">a</i>â€‰?</span></p></td><td width="19" valign="TOP" class="calibre15"><p class="calibre9">Matches zero or one instances of the character (or regex sequence) preceding it</p></td></tr><tr class="calibre12"><td width="3" valign="TOP" class="calibre23"><p class="calibre9"><span><i class="EMPHASIS">*</i></span></p></td><td width="6" valign="TOP" class="calibre23"><p class="calibre9"><span><i class="EMPHASIS"><tt class="REPLACEABLE"/></i><i class="EMPHASIS">a</i>â€‰*</span></p></td><td width="19" valign="TOP" class="calibre15"><p class="calibre9">Matches zero or more instances of the character (or regex sequence) preceding it</p></td></tr><tr class="calibre12"><td width="3" valign="TOP" class="calibre23"><p class="calibre9"><span><i class="EMPHASIS">+</i></span></p></td><td width="6" valign="TOP" class="calibre23"><p class="calibre9"><span><i class="EMPHASIS"><tt class="REPLACEABLE"/></i><i class="EMPHASIS">a</i>+</span></p></td><td width="19" valign="TOP" class="calibre15"><p class="calibre9">Matches one or more instances of the character (or regex sequence) preceding it</p></td></tr><tr class="calibre12"><td width="3" valign="TOP" class="calibre23"><p class="calibre9"><span><i class="EMPHASIS">|</i></span></p></td><td width="6" valign="TOP" class="calibre23"><p class="calibre9"><span><i class="EMPHASIS"><tt class="REPLACEABLE"/></i><i class="EMPHASIS">expr1</i>|â€‰<tt class="REPLACEABLE"><i class="EMPHASIS">expr2</i></tt></span></p></td><td width="19" valign="TOP" class="calibre15"><p class="calibre9">Matches character sequences to the left <span><i class="EMPHASIS">or</i></span> right of it (e.g., either <tt class="REPLACEABLE"><i class="EMPHASIS">expr1</i></tt>, or <tt class="REPLACEABLE"><i class="EMPHASIS">expr2</i></tt>)</p></td></tr><tr class="calibre12"><td width="3" valign="TOP" class="calibre23"><p class="calibre9"><span><i class="EMPHASIS">(â€‰)</i></span></p></td><td width="6" valign="TOP" class="calibre23"><p class="calibre9"><span><i class="EMPHASIS">(<tt class="REPLACEABLE"/></i><i class="EMPHASIS">expr1</i>)â€‰<tt class="REPLACEABLE"><i class="EMPHASIS">expr2</i></tt>â€‰</span></p></td><td width="19" valign="TOP" class="calibre15"><p class="calibre9">Explicitly groups expressions, to clarify precedence of special character symbols</p></td></tr></tbody></table></div><div class="NAVHEADER"><blockquote class="NOTE"><p class="calibre9"><b class="calibre10">Note: </b>Note that in order to use a literal version of any of the characters in <a href="c7547.htm#REGULAREXPRESSIONSYMBOLS">Table 5-3</a>, they must be prefixed with <span><i class="EMPHASIS">two</i></span> backslashes (e.g.,
          <tt class="REPLACEABLE">\\$</tt> represents a literal dollar sign).</p></blockquote></div><p class="calibre9">A common use of regular expressions is to search for a literal substring within a larger string. This can be
        achieved either with the <span><i class="EMPHASIS">~</i></span> operator, if case is important, or with the
        <span><i class="EMPHASIS">~*</i></span> operator if the comparison should be case-insensitive. These operators are each
        demonstrated in <a href="c7547.htm#ASIMPLEREGEX">Example 5-6</a>.</p><div class="NAVHEADER"><a name="ASIMPLEREGEX"></a><p class="calibre9"><b class="calibre10">Example 5-6. A Simple Regular Expression Comparison</b></p><pre class="SCREEN">booktown=# <tt class="REPLACEABLE"><b class="calibre10">SELECT title FROM books</b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">       WHERE title ~ 'The';</b></tt>
        title
----------------------
 The Shining
 The Cat in the Hat
 The Velveteen Rabbit
 The Tell-Tale Heart
(4 rows)

booktown=# <tt class="REPLACEABLE"><b class="calibre10">SELECT title FROM books</b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">       WHERE title ~* 'The';</b></tt>
            title
-----------------------------
 The Shining
 The Cat in the Hat
 Bartholomew and the Oobleck
 Franklin in the Dark
 The Velveteen Rabbit
 The Tell-Tale Heart
(6 rows)</pre></div><p class="calibre9">As you can see in <a href="c7547.htm#ASIMPLEREGEX">Example 5-6</a>, two more rows are returned when using the
        <span><i class="EMPHASIS">~*</i></span> operator, as it matches not just "the" sequence, but
        modification of case on the same sequence (including <span><i class="EMPHASIS">the</i></span>, <span><i class="EMPHASIS">tHe</i></span>,
        <span><i class="EMPHASIS">ThE</i></span>, and so on).</p><p class="calibre9">The same regular expression sequence can be modified to use the <span><i class="EMPHASIS">^</i></span> symbol, to match only the
        character string <span><i class="EMPHASIS">The</i></span> when it is at the beginning of the comparison string, as shown in <a href="c7547.htm#AMOREINVOLVEDREGEX">Example 5-7</a>. Additionally, the <span><i class="EMPHASIS">.*</i></span> sequence is then appended, to indicate any
        number of characters may match until the next following grouped expression. In this case, the <span><i class="EMPHASIS">.*</i></span>
        sequence is followed by a parenthetically grouped pair of strings (<span><i class="EMPHASIS">rabbit</i></span> and
        <span><i class="EMPHASIS">heart</i></span>), which are separated by the <span><i class="EMPHASIS">|</i></span> symbol, indicating that either of the
        strings will be considered a match.</p><div class="NAVHEADER"><a name="AMOREINVOLVEDREGEX"></a><p class="calibre9"><b class="calibre10">Example 5-7. A more involved regular expression comparison</b></p><pre class="SCREEN">booktown=# <tt class="REPLACEABLE"><b class="calibre10">SELECT title FROM books</b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">       WHERE title ~* '^The.*(rabbit|heart)';</b></tt>
        title
----------------------
 The Velveteen Rabbit
 The Tell-Tale Heart
(2 rows)</pre></div><p class="calibre9">In <a href="c7547.htm#AMOREINVOLVEDREGEX">Example 5-7</a>, the results should fairly clearly indicate the effect of the regular
        expression comparison.  Translated into English, the expression <span><i class="EMPHASIS">^The.*(rabbit|heart)</i></span> states that a
        match will be found only if the compared string begins with the character sequence <span><i class="EMPHASIS">The</i></span> and, any
        amount of any characters thereafter, contain either the character sequence <span><i class="EMPHASIS">rabbit</i></span>, or
        <span><i class="EMPHASIS">heart</i></span>. The use of the <tt class="REPLACEABLE">~*</tt> operator (rather than just the
        <tt class="REPLACEABLE">~</tt> operator) makes the comparison case-insensitive.</p><p class="calibre9"><a href="c7547.htm#ACOMPLICATEDREGEX">Example 5-8</a> executes an even more complicated regular expression comparison.</p><div class="NAVHEADER"><a name="ACOMPLICATEDREGEX"></a><p class="calibre9"><b class="calibre10">Example 5-8. A Complicated Regular Expression Comparison</b></p><pre class="SCREEN">booktown=# <tt class="REPLACEABLE"><b class="calibre10">SELECT title FROM books</b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">       WHERE title ~* '(^t.*[ri]t)|(ing$|une$)';</b></tt>
        title
----------------------
 The Shining
 Dune
 The Velveteen Rabbit
 The Tell-Tale Heart
(4 rows)

booktown=#</pre></div><p class="calibre9">The regular expression used in <a href="c7547.htm#ACOMPLICATEDREGEX">Example 5-8</a> is a good example of how regular
        expressions can be intimidating! Breaking it down an element at a time, you can see that there
        are two parenthetically grouped expressions, separated by a <span><i class="EMPHASIS">|</i></span> symbol. This means that if either of
        these expressions are found to match the title, the comparison will be considered a match.</p><p class="calibre9">Breaking it down further, you can see that the expression to the left of the <span><i class="EMPHASIS">|</i></span> symbol
        consists of, from left to right: a caret (<span><i class="EMPHASIS">^</i></span>â€‰â€‰) followed by the character <span><i class="EMPHASIS">t</i></span>, a
        period (<span><i class="EMPHASIS">.</i></span>) followed by an asterisk (<span><i class="EMPHASIS">*</i></span>â€‰â€‰), and a pair of square brackets
        (<span><i class="EMPHASIS">[]</i></span>â€‰) enclosing the characters <span><i class="EMPHASIS">r</i></span> and <span><i class="EMPHASIS">i</i></span>, followed by the
        character <span><i class="EMPHASIS">t</i></span>. Translated into English, this sub-expression essentially says that in order to match, the compared string must begin with
        the letter <span><i class="EMPHASIS">t</i></span>, and be followed by a sequence of zero or more characters until either the letter <span><i class="EMPHASIS">r</i></span>, or
        <span><i class="EMPHASIS">i</i></span> is found, which must be followed immediately by the letter <span><i class="EMPHASIS">t</i></span>. If any of these conditions is not found, the comparison will
        not be considered a match.</p><p class="calibre9">The expression to the right of the <span><i class="EMPHASIS">|</i></span> symbol is a bit simpler, consisting of two character
        string sequences (<span><i class="EMPHASIS">ing</i></span> and <span><i class="EMPHASIS">une</i></span>), each followed by the <span><i class="EMPHASIS">$</i></span>
        character, and separated by another <span><i class="EMPHASIS">|</i></span> symbol. This sub-expression, translated into English,
        describes a match as a relationship in which either ends with the value <span><i class="EMPHASIS">ing</i></span>, or <span><i class="EMPHASIS">une</i></span>. If
        either of these are found, the expression is considered a match, because of the <span><i class="EMPHASIS">|</i></span> symbol.</p></div></div><div class="NAVHEADER"><h2 class="SECT"><a name="NUMERICOPERATORS" class="calibre8">Numeric Operators</a></h2><p class="calibre9">PostgreSQL's numeric operator support can be divided into three general groups:
        
        </p><p class="calibre9"></p><div class="NAVHEADER"><dl class="calibre9"><dt class="NAVHEADER">Mathematical operators</dt><dd class="calibre16"><p class="calibre9">              Mathematical operators affect one or two values, perform a mathematical operation, and return a value of a numeric
              data type.
            </p></dd><dt class="NAVHEADER">Numeric comparison operators</dt><dd class="calibre16"><p class="calibre9">              Numeric comparison operators draw a conclusion based on two numeric values (such as whether one is larger than the
              other) and returns a value of type <tt class="REPLACEABLE">boolean</tt>, set to either true or false.
            </p></dd><dt class="NAVHEADER">Binary (or bit string) operators</dt><dd class="calibre16"><p class="calibre9">              Binary, or bit string, operators manipulate numeric values at the bit level of zeroes and ones.
              The following sections address each of these operator groups.
            </p></dd></dl></div>
<div class="NAVHEADER"><h3 class="AUTHOR"><a name="MATHEMATICALOPERATORS" class="calibre8">Mathematical operators</a></h3><p class="calibre9">Mathematical operators can be used in the target list, in the <tt class="REPLACEABLE">WHERE</tt> clause of a
        <tt class="REPLACEABLE">SELECT</tt> statement, or anywhere else a numeric result may be appropriate. This sometimes
        will include the <tt class="REPLACEABLE">ORDER BY</tt> clause, a <tt class="REPLACEABLE">JOIN</tt> qualifier, or
        a <tt class="REPLACEABLE">GROUP BY</tt> clause.</p><p class="calibre9"><a href="c7547.htm#MATHEMATICALOPERATORSTABLE">Table 5-4</a> describes each of the mathematical operators available in PostgreSQL,
        along with example usage.</p><div class="NAVHEADER"><a name="MATHEMATICALOPERATORSTABLE"></a><p class="calibre9"><b class="calibre10">Table 5-4. Mathematical operators</b></p><table border="1" class="calibre"><thead class="calibre11"><tr class="calibre12"><th width="1" valign="TOP" class="calibre13">Operator</th><th width="3" valign="TOP" class="calibre13">Usage</th><th width="22" valign="TOP" class="calibre13">Description</th></tr></thead><tbody class="calibre14"><tr class="calibre12"><td width="1" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE">+</tt></p></td><td width="3" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE"/><tt class="REPLACEABLE"><i class="EMPHASIS">a</i></tt> + <tt class="REPLACEABLE"><i class="EMPHASIS">b</i></tt></p></td><td width="22" valign="TOP" class="calibre15"><p class="calibre9">Addition of numeric quantities <tt class="REPLACEABLE"><i class="EMPHASIS">a</i></tt> and <tt class="REPLACEABLE"><i class="EMPHASIS">b</i></tt></p></td></tr><tr class="calibre12"><td width="1" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE">-</tt></p></td><td width="3" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE"/><tt class="REPLACEABLE"><i class="EMPHASIS">a</i></tt> - <tt class="REPLACEABLE"><i class="EMPHASIS">b</i></tt></p></td><td width="22" valign="TOP" class="calibre15"><p class="calibre9">Subtraction of numeric quantity <tt class="REPLACEABLE"><i class="EMPHASIS">b</i></tt> from <tt class="REPLACEABLE"><i class="EMPHASIS">a</i></tt></p></td></tr><tr class="calibre12"><td width="1" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE">*</tt></p></td><td width="3" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE"/><tt class="REPLACEABLE"><i class="EMPHASIS">a</i></tt> * <tt class="REPLACEABLE"><i class="EMPHASIS">b</i></tt></p></td><td width="22" valign="TOP" class="calibre15"><p class="calibre9">Multiplication of numeric quantities <tt class="REPLACEABLE"><i class="EMPHASIS">a</i></tt> and <tt class="REPLACEABLE"><i class="EMPHASIS">b</i></tt></p></td></tr><tr class="calibre12"><td width="1" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE">/</tt></p></td><td width="3" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE"/><tt class="REPLACEABLE"><i class="EMPHASIS">a</i></tt> / <tt class="REPLACEABLE"><i class="EMPHASIS">b</i></tt></p></td><td width="22" valign="TOP" class="calibre15"><p class="calibre9">Division of numeric quantity <tt class="REPLACEABLE"><i class="EMPHASIS">a</i></tt> by <tt class="REPLACEABLE"><i class="EMPHASIS">b</i></tt></p></td></tr><tr class="calibre12"><td width="1" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE">%</tt></p></td><td width="3" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE"/><tt class="REPLACEABLE"><i class="EMPHASIS">a</i></tt> % <tt class="REPLACEABLE"><i class="EMPHASIS">b</i></tt></p></td><td width="22" valign="TOP" class="calibre15"><p class="calibre9">Modulus, or remainder, from dividing <tt class="REPLACEABLE"><i class="EMPHASIS">a</i></tt> by <tt class="REPLACEABLE"><i class="EMPHASIS">b</i></tt></p></td></tr><tr class="calibre12"><td width="1" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE">^</tt></p></td><td width="3" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE"/><tt class="REPLACEABLE"><i class="EMPHASIS">a</i></tt> ^ <tt class="REPLACEABLE"><i class="EMPHASIS">b</i></tt></p></td><td width="22" valign="TOP" class="calibre15"><p class="calibre9">Exponential operator, the value of <tt class="REPLACEABLE"><i class="EMPHASIS">a</i></tt> to the power of <tt class="REPLACEABLE"><i class="EMPHASIS">b</i></tt></p></td></tr><tr class="calibre12"><td width="1" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE">|/</tt></p></td><td width="3" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE">|/ </tt><tt class="REPLACEABLE"><i class="EMPHASIS">a</i></tt></p></td><td width="22" valign="TOP" class="calibre15"><p class="calibre9">Square root of <tt class="REPLACEABLE"><i class="EMPHASIS">a</i></tt></p></td></tr><tr class="calibre12"><td width="1" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE">||/</tt></p></td><td width="3" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE">||/ </tt><tt class="REPLACEABLE"><i class="EMPHASIS">a</i></tt></p></td><td width="22" valign="TOP" class="calibre15"><p class="calibre9">Cube root of <tt class="REPLACEABLE"><i class="EMPHASIS">a</i></tt></p></td></tr><tr class="calibre12"><td width="1" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE">!</tt></p></td><td width="3" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE"/><tt class="REPLACEABLE"><i class="EMPHASIS">a</i></tt>!</p></td><td width="22" valign="TOP" class="calibre15"><p class="calibre9">Factorial of <tt class="REPLACEABLE"><i class="EMPHASIS">a</i></tt></p></td></tr><tr class="calibre12"><td width="1" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE">!!</tt></p></td><td width="3" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE">!! </tt><tt class="REPLACEABLE"><i class="EMPHASIS">a</i></tt></p></td><td width="22" valign="TOP" class="calibre15"><p class="calibre9">Factorial prefix, factorial of <tt class="REPLACEABLE"><i class="EMPHASIS">a</i></tt>, different only in syntactic placement from <tt class="REPLACEABLE">!</tt></p></td></tr><tr class="calibre12"><td width="1" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE">@</tt></p></td><td width="3" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE">@ </tt><tt class="REPLACEABLE"><i class="EMPHASIS">a</i></tt></p></td><td width="22" valign="TOP" class="calibre15"><p class="calibre9">Absolute value of <tt class="REPLACEABLE"><i class="EMPHASIS">a</i></tt></p></td></tr></tbody></table></div><p class="calibre9">As an example of mathematical operators in the target list, the statement in <a href="c7547.htm#USINGMATHEMATICALOPERATORS">Example 5-9</a> takes the retail price for each book and divides the cost with the
        <tt class="REPLACEABLE">/</tt> operator in order to determine the profit margin. This value is then typecast to a
        truncated numeric value with only two digits of precision. Finally, the integer constant 1 is subtracted from the
        division result, to yield only the percentage points over 100.</p><div class="NAVHEADER"><a name="USINGMATHEMATICALOPERATORS"></a><p class="calibre9"><b class="calibre10">Example 5-9. Using Mathematical Operators</b></p><pre class="SCREEN">booktown=# <tt class="REPLACEABLE"><b class="calibre10">SELECT isbn,</b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">       (retail / cost)::numeric(3, 2) - 1 AS margin</b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">       FROM stock</b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">       ORDER BY margin DESC</b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">       LIMIT 4;</b></tt>
    isbn    | margin
------------+--------
 0451457994 |   0.35
 0760720002 |   0.33
 0451198492 |   0.30
 0441172717 |   0.29
(4 rows)</pre></div><p class="calibre9">Notice that the column name is temporarily aliased to <tt class="REPLACEABLE">margin</tt> by using the
        <tt class="REPLACEABLE">AS</tt> keyword. Remember that the column name created by the
        <tt class="REPLACEABLE">AS</tt> keyword is a temporary name, and used only for the duration of the query.  </p></div><div class="NAVHEADER"><h3 class="AUTHOR"><a name="NUMERICCOMPARISONOPERATORS" class="calibre8">Numeric comparison operators</a></h3><p class="calibre9">Comparison operators are used to compare values of types such as <tt class="REPLACEABLE">integer</tt> or
        <tt class="REPLACEABLE">text</tt> to one another, but they will always return a value of type
        <tt class="REPLACEABLE">boolean</tt>. These operators are most commonly used in the
        <tt class="REPLACEABLE">WHERE</tt> clause, but may be used anywhere in a SQL statement where a value of type
        <tt class="REPLACEABLE">boolean</tt> would be valid.</p><p class="calibre9"><a href="c7547.htm#COMPARISONOPERATORSTABLE">Table 5-5</a> shows the available comparison operators.</p><div class="NAVHEADER"><a name="COMPARISONOPERATORSTABLE"></a><p class="calibre9"><b class="calibre10">Table 5-5. Comparison operators</b></p><table border="1" width="100%" class="calibre"><thead class="calibre11"><tr class="calibre12"><th width="4" valign="TOP" class="calibre13"><p class="calibre9">Operator</p></th><th width="24" valign="TOP" class="calibre13"><p class="calibre9">Description</p></th></tr></thead><tbody class="calibre14"><tr class="calibre12"><td width="4" valign="TOP" class="calibre23"><p class="calibre9"><tt class="REPLACEABLE">&lt;</tt></p></td><td width="24" valign="TOP" class="calibre15"><p class="calibre9">Less-than, returns true if the value to the left is smaller in quantity than the value to the right</p></td></tr><tr class="calibre12"><td width="4" valign="TOP" class="calibre23"><p class="calibre9"><tt class="REPLACEABLE">&gt;</tt></p></td><td width="24" valign="TOP" class="calibre15"><p class="calibre9">Greater-than, returns true if the value to the left is greater in quantity than the value to the right</p></td></tr><tr class="calibre12"><td width="4" valign="TOP" class="calibre23"><p class="calibre9"><tt class="REPLACEABLE">&lt;=</tt></p></td><td width="24" valign="TOP" class="calibre15"><p class="calibre9">Less-than or equal-to, returns true if the value to the left is smaller, or equal to, in quantity than the value to the right</p></td></tr><tr class="calibre12"><td width="4" valign="TOP" class="calibre23"><p class="calibre9"><tt class="REPLACEABLE">&gt;=</tt></p></td><td width="24" valign="TOP" class="calibre15"><p class="calibre9">Greater-than or equal-to, returns true if the value to the left is greater, or equal to, in quantity than the value to the right</p></td></tr><tr class="calibre12"><td width="4" valign="TOP" class="calibre23"><p class="calibre9"><tt class="REPLACEABLE">=</tt></p></td><td width="24" valign="TOP" class="calibre15"><p class="calibre9">Equal-to, returns true if the values to the left and right of the operator are equivalent</p></td></tr><tr class="calibre12"><td width="4" valign="TOP" class="calibre23"><p class="calibre9"><tt class="REPLACEABLE">&lt;â€‰&gt;</tt> or <tt class="REPLACEABLE">!=</tt></p></td><td width="24" valign="TOP" class="calibre15"><p class="calibre9">Not-equal, returns true if the values to the left and right of the operator not equivalent</p></td></tr></tbody></table></div><div class="NAVHEADER"><blockquote class="NOTE"><p class="calibre9"><b class="calibre10">Note: </b>The <tt class="REPLACEABLE">&lt;â€‰&gt;</tt> operator exists as an alias to the
          <tt class="REPLACEABLE">!=</tt> operator for functional compatibility with other SQL-capable database
          implementations. They are effectively identical.</p></blockquote></div><p class="calibre9">For an example of mathematical comparison operator usage, observe <a href="c7547.htm#USINGCOMPARISONOPERATORS">Example 5-10</a>. The
        query involved uses the <tt class="REPLACEABLE">&lt;=</tt> operator first, to check if the
        <tt class="REPLACEABLE">retail</tt> value is less-than or equal-to 25. Subsequently, the
        <tt class="REPLACEABLE">!=</tt> operator is employed with the <tt class="REPLACEABLE">AND</tt> keyword to ensure
        that only books which are in stock (whose <tt class="REPLACEABLE">stock</tt> value are not equal to 0) are returned.</p><div class="NAVHEADER"><a name="USINGCOMPARISONOPERATORS"></a><p class="calibre9"><b class="calibre10">Example 5-10. Using comparison operators</b></p><pre class="SCREEN">booktown=# <tt class="REPLACEABLE"><b class="calibre10">SELECT isbn, stock</b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">       FROM stock</b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">       WHERE retail &lt;= 25</b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">       AND stock != 0;</b></tt>
    isbn    | stock
------------+-------
 0441172717 |    77
 0590445065 |    10
 0679803335 |    18
 0760720002 |    28
 0929605942 |    25
 1885418035 |    77
(6 rows)</pre></div></div><div class="NAVHEADER"><h3 class="AUTHOR"><a name="NUMERICCOMPARISONKEYWORDS" class="calibre8">Numeric comparison keywords</a></h3><p class="calibre9">The <tt class="REPLACEABLE">BETWEEN</tt> keyword (sometimes called an operator) allows you to check a
        value for existence within a range of values. For instance, <a href="c7547.htm#USINGBETWEEN">Example 5-11</a> shows a
        <tt class="REPLACEABLE">SELECT</tt> statement that looks for books with cost between 10 and 17 dollars.</p><div class="NAVHEADER"><a name="USINGBETWEEN"></a><p class="calibre9"><b class="calibre10">Example 5-11. Using BETWEEN</b></p><pre class="SCREEN">booktown=# <tt class="REPLACEABLE"><b class="calibre10">SELECT isbn FROM stock</b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">       WHERE cost BETWEEN 10 AND 17;</b></tt>
    isbn
------------
 0394800753
 0441172717
 0451457994
(3 rows)</pre></div><p class="calibre9">You can achieve the same output using the less-than-or-equal-to operator (<tt class="REPLACEABLE">&lt;=</tt>)
        in conjunction with the greater-than-or-equal-to (<tt class="REPLACEABLE">&gt;=</tt>) operator. See
        <a href="c7547.htm#OPERATORSEQUIVALENTTOBETWEEN">Example 5-12</a>.</p><div class="NAVHEADER"><a name="OPERATORSEQUIVALENTTOBETWEEN"></a><p class="calibre9"><b class="calibre10">Example 5-12. Operator equivalents to BETWEEN</b></p><pre class="SCREEN">booktown=# <tt class="REPLACEABLE"><b class="calibre10">SELECT isbn FROM stock</b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">       WHERE cost &gt;= 10 AND cost &lt;= 17;</b></tt>
    isbn
------------
 0394800753
 0441172717
 0451457994
(3 rows)</pre></div><p class="calibre9">The <tt class="REPLACEABLE">BETWEEN</tt> syntax simply adds to the readability of an SQL statement. Since both
        the keyword and operator forms are equally valid to PostgreSQL, it's mostly a matter of user preference.</p></div><div class="NAVHEADER"><h3 class="AUTHOR"><a name="BINARYOPERATORS" class="calibre8">Binary operators</a></h3><p class="calibre9">Binary operators perform bitwise operations on the literal bits of a bit string or integer. These operators may
        affect integer values, or directly on bit string values. Each of PostgreSQL's binary operators are described in <a href="c7547.htm#BITSTRINGOPERATORS">Table 5-6</a>.</p><div class="NAVHEADER"><a name="BITSTRINGOPERATORS"></a><p class="calibre9"><b class="calibre10">Table 5-6. Bit-string operators</b></p><table border="1" width="100%" class="calibre"><thead class="calibre11"><tr class="calibre12"><th width="4" valign="TOP" class="calibre13">Operator</th><th width="4" valign="TOP" class="calibre13">Usage</th><th width="20" valign="TOP" class="calibre13">Description</th></tr></thead><tbody class="calibre14"><tr class="calibre12"><td width="4" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE">&amp;</tt></p></td><td width="4" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE"/><tt class="REPLACEABLE"><i class="EMPHASIS">a</i></tt> &amp; <tt class="REPLACEABLE"><i class="EMPHASIS">b</i></tt></p></td><td width="20" valign="TOP" class="calibre15"><p class="calibre9">Binary AND between bit string values of <tt class="REPLACEABLE"><i class="EMPHASIS">a</i></tt> and <tt class="REPLACEABLE"><i class="EMPHASIS">b</i></tt> (which may be provided as integers)</p></td></tr><tr class="calibre12"><td width="4" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE">|</tt></p></td><td width="4" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE"/><tt class="REPLACEABLE"><i class="EMPHASIS">a</i></tt> | <tt class="REPLACEABLE"><i class="EMPHASIS">b</i></tt></p></td><td width="20" valign="TOP" class="calibre15"><p class="calibre9">Binary OR between bit string values of <tt class="REPLACEABLE"><i class="EMPHASIS">a</i></tt> and <tt class="REPLACEABLE"><i class="EMPHASIS">b</i></tt> (which may be provided as integers)</p></td></tr><tr class="calibre12"><td width="4" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE">#</tt></p></td><td width="4" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE"/><tt class="REPLACEABLE"><i class="EMPHASIS">a</i></tt> # <tt class="REPLACEABLE"><i class="EMPHASIS">b</i></tt></p></td><td width="20" valign="TOP" class="calibre15"><p class="calibre9">Binary XOR between bit string values of <tt class="REPLACEABLE"><i class="EMPHASIS">a</i></tt> and <tt class="REPLACEABLE"><i class="EMPHASIS">b</i></tt> (which may be provided as integers)</p></td></tr><tr class="calibre12"><td width="4" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE">~</tt></p></td><td width="4" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE">~ </tt><tt class="REPLACEABLE"><i class="EMPHASIS">b</i></tt></p></td><td width="20" valign="TOP" class="calibre15"><p class="calibre9">Binary NOT, returns the inverted bit string of <tt class="REPLACEABLE"><i class="EMPHASIS">b</i></tt></p></td></tr><tr class="calibre12"><td width="4" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE">&lt;&lt;</tt></p></td><td width="4" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE"/><tt class="REPLACEABLE"><i class="EMPHASIS">b</i></tt> &lt;&lt; <tt class="REPLACEABLE"><i class="EMPHASIS">n</i></tt></p></td><td width="20" valign="TOP" class="calibre15"><p class="calibre9">Binary shifts <tt class="REPLACEABLE"><i class="EMPHASIS">b</i></tt> to the left by <tt class="REPLACEABLE"><i class="EMPHASIS">n</i></tt> bits</p></td></tr><tr class="calibre12"><td width="4" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE">&gt;&gt;</tt></p></td><td width="4" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE"/><tt class="REPLACEABLE"><i class="EMPHASIS">b</i></tt> &gt;&gt; <tt class="REPLACEABLE"><i class="EMPHASIS">n</i></tt></p></td><td width="20" valign="TOP" class="calibre15"><p class="calibre9">Binary shifts <tt class="REPLACEABLE"><i class="EMPHASIS">b</i></tt> to the right by <tt class="REPLACEABLE"><i class="EMPHASIS">n</i></tt> bits</p></td></tr></tbody></table></div><p class="calibre9"><a href="c7547.htm#SHIFTINGBITSTRINGS">Example 5-13</a> demonstrates shifting a numeric value, and its equivalent bit string, two bits
        to the right with the <tt class="REPLACEABLE">&gt;&gt;</tt> operator. It also demonstrates the use of the
        <tt class="REPLACEABLE">bittoint4()</tt> function, described in <a href="x8973.htm">the Section called <i class="EMPHASIS">Functions</i></a>."</p><div class="NAVHEADER"><a name="SHIFTINGBITSTRINGS"></a><p class="calibre9"><b class="calibre10">Example 5-13. Shifting bit strings</b></p><pre class="SCREEN">booktown=# <tt class="REPLACEABLE"><b class="calibre10">SELECT b'1000' &gt;&gt; 2 AS "8 shifted right",</b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">       bittoint4(b'1000' &gt;&gt; 2) AS integer,</b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">       8 &gt;&gt; 2 AS likewise;</b></tt>
 8 shifted right | integer | likewise
-----------------+---------+----------
 0010            |       2 |        2
(1 row)</pre></div><div class="NAVHEADER"><blockquote class="NOTE"><p class="calibre9"><b class="calibre10">Note: </b>When shifting bit strings, the original length of the string does not change, and any digits pushed either to the
          left or right of the bit string will be truncated. When using <tt class="REPLACEABLE">&amp;</tt>,
          <tt class="REPLACEABLE">|</tt>, or <tt class="REPLACEABLE">#</tt>, the bit strings operated on must be of
          equal length in order to properly compare each bit on a one-to-one basis.</p></blockquote></div></div></div><div class="NAVHEADER"><h2 class="SECT"><a name="LOGICALOPERATORS" class="calibre8">Logical Operators</a></h2><p class="calibre9">The <tt class="REPLACEABLE">AND</tt>, <tt class="REPLACEABLE">OR</tt>, and <tt class="REPLACEABLE">NOT</tt>
      keywords are PostgreSQL's Boolean operators. They are commonly used to join or invert conditions in a SQL statement, particularly
      in the <tt class="REPLACEABLE">WHERE</tt> clause and the <tt class="REPLACEABLE">HAVING</tt> clause.</p><p class="calibre9"><a href="c7547.htm#LOGICALOPERATORSTABLE">Table 5-7</a> illustrates the Boolean values returned for the
      <tt class="REPLACEABLE">AND</tt>, <tt class="REPLACEABLE">OR</tt>, and <tt class="REPLACEABLE">NOT</tt>
      keywords, with each possible value for a Boolean field (true, false, or <tt class="REPLACEABLE">NULL</tt>).</p><div class="NAVHEADER"><a name="LOGICALOPERATORSTABLE"></a><p class="calibre9"><b class="calibre10">Table 5-7. The AND, OR, and NOT operators</b></p><table border="1" class="calibre"><thead class="calibre11"><tr class="calibre12"><th valign="TOP" class="calibre13"><tt class="REPLACEABLE"/><tt class="REPLACEABLE"><i class="EMPHASIS">a</i></tt></th><th valign="TOP" class="calibre13"><tt class="REPLACEABLE"/><tt class="REPLACEABLE"><i class="EMPHASIS">b</i></tt></th><th valign="TOP" class="calibre13"><tt class="REPLACEABLE"/><tt class="REPLACEABLE"><i class="EMPHASIS">a</i></tt> AND <tt class="REPLACEABLE"><i class="EMPHASIS">b</i></tt></th><th valign="TOP" class="calibre13"><tt class="REPLACEABLE"/><tt class="REPLACEABLE"><i class="EMPHASIS">a</i></tt> OR <tt class="REPLACEABLE"><i class="EMPHASIS">b</i></tt></th><th valign="TOP" class="calibre13"><tt class="REPLACEABLE">NOT </tt><tt class="REPLACEABLE"><i class="EMPHASIS">a</i></tt></th><th valign="TOP" class="calibre13"><tt class="REPLACEABLE">NOT </tt><tt class="REPLACEABLE"><i class="EMPHASIS">b</i></tt></th></tr></thead><tbody class="calibre14"><tr class="calibre12"><td valign="TOP" class="calibre15"><tt class="REPLACEABLE">true</tt></td><td valign="TOP" class="calibre15"><tt class="REPLACEABLE">true</tt></td><td valign="TOP" class="calibre15"><tt class="REPLACEABLE">true</tt></td><td valign="TOP" class="calibre15"><tt class="REPLACEABLE">true</tt></td><td valign="TOP" class="calibre15"><tt class="REPLACEABLE">false</tt></td><td valign="TOP" class="calibre15"><tt class="REPLACEABLE">false</tt></td></tr><tr class="calibre12"><td valign="TOP" class="calibre15"><tt class="REPLACEABLE">true</tt></td><td valign="TOP" class="calibre15"><tt class="REPLACEABLE">false</tt></td><td valign="TOP" class="calibre15"><tt class="REPLACEABLE">false</tt></td><td valign="TOP" class="calibre15"><tt class="REPLACEABLE">true</tt></td><td valign="TOP" class="calibre15"><tt class="REPLACEABLE">false</tt></td><td valign="TOP" class="calibre15"><tt class="REPLACEABLE">true</tt></td></tr><tr class="calibre12"><td valign="TOP" class="calibre15"><tt class="REPLACEABLE">true</tt></td><td valign="TOP" class="calibre15"><tt class="REPLACEABLE">NULL</tt></td><td valign="TOP" class="calibre15"><tt class="REPLACEABLE">NULL</tt></td><td valign="TOP" class="calibre15"><tt class="REPLACEABLE">true</tt></td><td valign="TOP" class="calibre15"><tt class="REPLACEABLE">false</tt></td><td valign="TOP" class="calibre15"><tt class="REPLACEABLE">NULL</tt></td></tr><tr class="calibre12"><td valign="TOP" class="calibre15"><tt class="REPLACEABLE">false</tt></td><td valign="TOP" class="calibre15"><tt class="REPLACEABLE">false</tt></td><td valign="TOP" class="calibre15"><tt class="REPLACEABLE">false</tt></td><td valign="TOP" class="calibre15"><tt class="REPLACEABLE">false</tt></td><td valign="TOP" class="calibre15"><tt class="REPLACEABLE">true</tt></td><td valign="TOP" class="calibre15"><tt class="REPLACEABLE">true</tt></td></tr><tr class="calibre12"><td valign="TOP" class="calibre15"><tt class="REPLACEABLE">false</tt></td><td valign="TOP" class="calibre15"><tt class="REPLACEABLE">NULL</tt></td><td valign="TOP" class="calibre15"><tt class="REPLACEABLE">false</tt></td><td valign="TOP" class="calibre15"><tt class="REPLACEABLE">NULL</tt></td><td valign="TOP" class="calibre15"><tt class="REPLACEABLE">true</tt></td><td valign="TOP" class="calibre15"><tt class="REPLACEABLE">NULL</tt></td></tr><tr class="calibre12"><td valign="TOP" class="calibre15"><tt class="REPLACEABLE">NULL</tt></td><td valign="TOP" class="calibre15"><tt class="REPLACEABLE">NULL</tt></td><td valign="TOP" class="calibre15"><tt class="REPLACEABLE">NULL</tt></td><td valign="TOP" class="calibre15"><tt class="REPLACEABLE">NULL</tt></td><td valign="TOP" class="calibre15"><tt class="REPLACEABLE">NULL</tt></td><td valign="TOP" class="calibre15"><tt class="REPLACEABLE">NULL</tt></td></tr></tbody></table></div><p class="calibre9"><a href="c7547.htm#COMBININGCOMPARISONSWITHBOOLEANOPERATORS">Example 5-14</a> sequentially uses the <tt class="REPLACEABLE">OR</tt>
      and <tt class="REPLACEABLE">AND</tt> keywords in two queries to combine a pair of conditions by which rows should be
      retrieved. In the first query, if a book has either a cost of greater than thirty dollars, or is out of stock, its
      information will be returned. As you can see from the result set, matching one or both of these conditions causes a row to
      be returned.</p><p class="calibre9">The second query in <a href="c7547.htm#COMBININGCOMPARISONSWITHBOOLEANOPERATORS">Example 5-14</a> uses the same conditions, but combines
      them with the <tt class="REPLACEABLE">AND</tt> keyword. This results in a stricter condition, as both criteria must be
      met. As such, only one row is returned, since only one book is found which both has a cost of greater than thirty dollars,
      and is out of stock.</p><div class="NAVHEADER"><a name="COMBININGCOMPARISONSWITHBOOLEANOPERATORS"></a><p class="calibre9"><b class="calibre10">Example 5-14. Combining comparisons with Boolean operators</b></p><pre class="SCREEN">booktown=# <tt class="REPLACEABLE"><b class="calibre10">SELECT isbn, cost, stock</b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">       FROM stock</b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">       WHERE cost &gt; 30</b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">          OR stock = 0;</b></tt>
    isbn    | cost  | stock
------------+-------+-------
 0394900014 | 23.00 |     0
 044100590X | 36.00 |    89
 0451198492 | 36.00 |     0
 0451457994 | 17.00 |     0
(4 rows)

booktown=# <tt class="REPLACEABLE"><b class="calibre10">SELECT isbn, cost, stock</b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">       FROM stock</b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">       WHERE cost &gt; 30</b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">         AND stock = 0;</b></tt>
    isbn    | cost  | stock
------------+-------+-------
 0451198492 | 36.00 |     0
(1 row)</pre></div></div><div class="NAVHEADER"><h2 class="SECT"><a name="AEN8661" class="calibre8">Using Operators with NULL</a></h2><p class="calibre9">If a table has <tt class="REPLACEABLE">NULL</tt> values in it, a special pair of comparison operators
      that can be used to include or omit <tt class="REPLACEABLE">NULL</tt> valued fields. You can check for fields set to
       <tt class="REPLACEABLE">NULL</tt> using the <tt class="REPLACEABLE">IS NULL</tt> keyword phrase. In order to check
      for a non-<tt class="REPLACEABLE">NULL</tt> value, use the <tt class="REPLACEABLE">IS NOT NULL</tt> keyword
      phrase.</p><p class="calibre9"><a href="c7547.htm#COMPARISONSUSINGISNULL">Example 5-15</a> uses the <tt class="REPLACEABLE">IS NULL</tt> keyword to check for
      authors whose <tt class="REPLACEABLE">first_name</tt> column value are set to
      <tt class="REPLACEABLE">NULL</tt>.</p><div class="NAVHEADER"><a name="COMPARISONSUSINGISNULL"></a><p class="calibre9"><b class="calibre10">Example 5-15. Comparisons using IS NULL</b></p><pre class="SCREEN">booktown=# <tt class="REPLACEABLE"><b class="calibre10">SELECT last_name, first_name</b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">       FROM authors</b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">       WHERE first_name IS NULL;</b></tt>
 last_name | first_name
-----------+------------
 Geisel    |
(1 row)</pre></div><p class="calibre9">Examining <a href="c7547.htm#COMPARISONSUSINGISNULL">Example 5-15</a> and <a href="c7547.htm#COMPARISONSEQUALTONULL">Example 5-16</a>, you might think that
      the syntax in the two statements provided are identical. There is, however, a key difference.</p><div class="NAVHEADER"><a name="COMPARISONSEQUALTONULL"></a><p class="calibre9"><b class="calibre10">Example 5-16. Comparisons equal to NULL</b></p><pre class="SCREEN">booktown=# <tt class="REPLACEABLE"><b class="calibre10">SELECT last_name, first_name</b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">       FROM authors</b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">       WHERE first_name = NULL;</b></tt>
 last_name | first_name
-----------+------------
 Geisel    |
(1 row)</pre></div><p class="calibre9">PostgreSQL provides a translation from <tt class="REPLACEABLE">= NULL</tt> to <tt class="REPLACEABLE">IS NULL</tt>,
      and likewise for the <tt class="REPLACEABLE">!= NULL</tt> operation with <tt class="REPLACEABLE">IS NOT NULL</tt>. This
      is provided only for compatibility with existing client applications (such as Microsoft Access).</p><p class="calibre9">When comparing a value to <tt class="REPLACEABLE">NULL</tt> in an expression, be in the habit of using the
      <tt class="REPLACEABLE">IS NULL</tt> and <tt class="REPLACEABLE">IS NOT NULL</tt> keyword operators rather
      than the <tt class="REPLACEABLE">=</tt> or <tt class="REPLACEABLE">!=</tt> math-style operators. While this
      translation is provided for the sake of compatibility with other systems, it may be discontinued in the
      future, as it is not a standard SQL procedure (and it is certainly not guaranteed to be a portable procedure to other
      SQL-based database systems for the same reason).</p><p class="calibre9">Any as-yet undiscussed comparison operator used on a <tt class="REPLACEABLE">NULL</tt> value will return a
      <tt class="REPLACEABLE">NULL</tt> value, as <tt class="REPLACEABLE">NULL</tt> will never be larger, smaller, or
      otherwise related to any non-<tt class="REPLACEABLE">NULL</tt> value. (See <a href="c7547.htm#USINGOPERATORSWITHNULLVALUES">Example 5-17</a>.) A direct query on the result of a comparison
      against a <tt class="REPLACEABLE">NULL</tt> value will therefore return <tt class="REPLACEABLE">NULL</tt>. You can
      think of a <tt class="REPLACEABLE">NULL</tt> value as being a sort of SQL black hole, from which no comparison (outside
      of <tt class="REPLACEABLE">IS NULL</tt>, and its special <tt class="REPLACEABLE">=</tt> translation) may return
      <tt class="REPLACEABLE">true</tt>, and to which no values may be added, or concatenated.</p><div class="NAVHEADER"><a name="USINGOPERATORSWITHNULLVALUES"></a><p class="calibre9"><b class="calibre10">Example 5-17. Using operators with NULL values</b></p><pre class="SCREEN">booktown=# <tt class="REPLACEABLE"><b class="calibre10">\pset null *null*</b></tt> Null display is '*null*'.
booktown=# <tt class="REPLACEABLE"><b class="calibre10">SELECT 5 &gt; NULL;</b></tt>
 ?column?
----------
 *null*
(1 row)

booktown=# <tt class="REPLACEABLE"><b class="calibre10">SELECT NULL IS NULL;</b></tt>
 ?column?
----------
 t
(1 row)

booktown=# <tt class="REPLACEABLE"><b class="calibre10">SELECT NULL || 'Test';</b></tt>
 ?column?
----------
 *null*
(1 row)</pre></div></div><div class="NAVHEADER"><h2 class="SECT"><a name="OPERATORPRECEDENCE" class="calibre8">Operator Precedence</a></h2><p class="calibre9">When utilizing several operators in large expressions, it can be helpful to know in what order PostgreSQL processes
      operators.  It is not, as you might think, strictly from left to right. If not properly understood, the order of execution
      can introduce potential for accidental side-effects, such as those shown in <a href="c7547.htm#OPERATORPRECEDENCEEXAMPLE">Example 5-18</a>.</p><div class="NAVHEADER"><a name="OPERATORPRECEDENCEEXAMPLE"></a><p class="calibre9"><b class="calibre10">Example 5-18. Operator precedence</b></p><pre class="SCREEN">booktown=# <tt class="REPLACEABLE"><b class="calibre10">SELECT 60 + 12 * 5 AS "sixty plus twelve times five",</b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">       12 + 60 * 5 AS "twelve plus sixty times five";</b></tt>
 sixty plus twelve times five | twelve plus sixty times five
------------------------------+------------------------------
                          120 |                          312
(1 row)</pre></div><p class="calibre9">As you can see by the two column values returned in <a href="c7547.htm#OPERATORPRECEDENCEEXAMPLE">Example 5-18</a>, the use of several
      operators without parentheses to enforce precedence can return very different results, despite the same numbers being
      manipulated in only a slightly different order. In this example, the multiplication is actually executed first (regardless
      of the fact that the addition sign (<tt class="REPLACEABLE">+</tt>) precedes it sequentially, from left to
      right).</p><p class="calibre9"><a href="c7547.htm#OPERATORPRECEDENCETABLE">Table 5-8</a> lists, in order of PostgreSQL's execution from the top down, the precedence
      of each group of operators.</p><div class="NAVHEADER"><a name="OPERATORPRECEDENCETABLE"></a><p class="calibre9"><b class="calibre10">Table 5-8. Operator precedence</b></p><table border="1" width="100%" class="calibre"><thead class="calibre11"><tr class="calibre12"><th width="4" valign="TOP" class="calibre13">Operator</th><th width="7" valign="TOP" class="calibre13">Usage</th><th width="17" valign="TOP" class="calibre13">Description</th></tr></thead><tbody class="calibre14"><tr class="calibre12"><td width="4" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE">::</tt></p></td><td width="7" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE">value::type</tt></p></td><td width="17" valign="TOP" class="calibre15"><p class="calibre9">Explicit typecast</p></td></tr><tr class="calibre12"><td width="4" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE">[â€‰]</tt></p></td><td width="7" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE">value[</tt><tt class="REPLACEABLE"><i class="EMPHASIS">index</i></tt>â€‰]</p></td><td width="17" valign="TOP" class="calibre15"><p class="calibre9">Array element index</p></td></tr><tr class="calibre12"><td width="4" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE">.</tt></p></td><td width="7" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE">table.column</tt></p></td><td width="17" valign="TOP" class="calibre15"><p class="calibre9">Table and column name separator</p></td></tr><tr class="calibre12"><td width="4" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE">-</tt></p></td><td width="7" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE">-</tt><tt class="REPLACEABLE"><i class="EMPHASIS">value</i></tt></p></td><td width="17" valign="TOP" class="calibre15"><p class="calibre9">Unary minus</p></td></tr><tr class="calibre12"><td width="4" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE">^</tt></p></td><td width="7" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE"/><tt class="REPLACEABLE"><i class="EMPHASIS">value</i></tt> ^ <tt class="REPLACEABLE"><i class="EMPHASIS">power</i></tt></p></td><td width="17" valign="TOP" class="calibre15"><p class="calibre9">Exponent</p></td></tr><tr class="calibre12"><td width="4" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE">*</tt> <tt class="REPLACEABLE">/</tt> <tt class="REPLACEABLE">%</tt></p></td><td width="7" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE"/><tt class="REPLACEABLE"><i class="EMPHASIS">value1</i></tt> * <tt class="REPLACEABLE"><i class="EMPHASIS">value2</i></tt></p></td><td width="17" valign="TOP" class="calibre15"><p class="calibre9">Multiplication, division, and modulus</p></td></tr><tr class="calibre12"><td width="4" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE">+</tt> <tt class="REPLACEABLE">-</tt></p></td><td width="7" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE"/><tt class="REPLACEABLE"><i class="EMPHASIS">value1</i></tt> + <tt class="REPLACEABLE"><i class="EMPHASIS">value2</i></tt></p></td><td width="17" valign="TOP" class="calibre15"><p class="calibre9">Addition and subtraction</p></td></tr><tr class="calibre12"><td width="4" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE">IS</tt></p></td><td width="7" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE"/><tt class="REPLACEABLE"><i class="EMPHASIS">value</i></tt> IS <tt class="REPLACEABLE"><i class="EMPHASIS">boolean</i></tt></p></td><td width="17" valign="TOP" class="calibre15"><p class="calibre9">Compares against true or false</p></td></tr><tr class="calibre12"><td width="4" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE">ISNULL</tt></p></td><td width="7" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE"/><tt class="REPLACEABLE"><i class="EMPHASIS">value</i></tt> ISNULL</p></td><td width="17" valign="TOP" class="calibre15"><p class="calibre9">Compares against <tt class="REPLACEABLE">NULL</tt></p></td></tr><tr class="calibre12"><td width="4" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE">IS NOT NULL</tt></p></td><td width="7" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE"/><tt class="REPLACEABLE"><i class="EMPHASIS">value</i></tt> IS NOT NULL</p></td><td width="17" valign="TOP" class="calibre15"><p class="calibre9">Checks for <tt class="REPLACEABLE"><i class="EMPHASIS">value</i></tt> inequivalent to <tt class="REPLACEABLE">NULL</tt></p></td></tr><tr class="calibre12"><td width="4" valign="TOP" class="calibre15"><p class="calibre9"><span><i class="EMPHASIS">Other</i></span></p></td><td width="7" valign="TOP" class="calibre15"><p class="calibre9"><span><i class="EMPHASIS">Variable</i></span></p></td><td width="17" valign="TOP" class="calibre15"><p class="calibre9">Includes all other native and user-defined character operators</p></td></tr><tr class="calibre12"><td width="4" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE">IN</tt></p></td><td width="7" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE"/><tt class="REPLACEABLE"><i class="EMPHASIS">value</i></tt> IN <tt class="REPLACEABLE"><i class="EMPHASIS">set</i></tt></p></td><td width="17" valign="TOP" class="calibre15"><p class="calibre9">Checks for membership of <tt class="REPLACEABLE"><i class="EMPHASIS">value</i></tt> in <tt class="REPLACEABLE"><i class="EMPHASIS">set</i></tt></p></td></tr><tr class="calibre12"><td width="4" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE">BETWEEN</tt></p></td><td width="7" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE"/><tt class="REPLACEABLE"><i class="EMPHASIS">value</i></tt> BETWEEN <tt class="REPLACEABLE"><i class="EMPHASIS">a</i></tt> AND <tt class="REPLACEABLE"><i class="EMPHASIS">b</i></tt></p></td><td width="17" valign="TOP" class="calibre15"><p class="calibre9">Checks for <tt class="REPLACEABLE"><i class="EMPHASIS">value</i></tt> in range between values <tt class="REPLACEABLE"><i class="EMPHASIS">a</i></tt> and <tt class="REPLACEABLE"><i class="EMPHASIS">b</i></tt></p></td></tr><tr class="calibre12"><td width="4" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE">LIKE</tt>, <tt class="REPLACEABLE">ILIKE</tt></p></td><td width="7" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE"/><tt class="REPLACEABLE"><i class="EMPHASIS">string</i></tt> LIKE <tt class="REPLACEABLE"><i class="EMPHASIS">comparison</i></tt></p></td><td width="17" valign="TOP" class="calibre15"><p class="calibre9">Checks for matching pattern <tt class="REPLACEABLE"><i class="EMPHASIS">comparison</i></tt> in <tt class="REPLACEABLE"><i class="EMPHASIS">string</i></tt></p></td></tr><tr class="calibre12"><td width="4" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE">&lt;</tt> <tt class="REPLACEABLE">&gt;</tt> <tt class="REPLACEABLE">&lt;=</tt> <tt class="REPLACEABLE">&gt;=</tt></p></td><td width="7" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE"/><tt class="REPLACEABLE"><i class="EMPHASIS">value1</i></tt> &lt; <tt class="REPLACEABLE"><i class="EMPHASIS">value2</i></tt></p></td><td width="17" valign="TOP" class="calibre15"><p class="calibre9">Quantity comparisons for less than, greater than, less than or equal to, and greater than or equal to.</p></td></tr><tr class="calibre12"><td width="4" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE">=</tt></p></td><td width="7" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE"/><tt class="REPLACEABLE"><i class="EMPHASIS">value1</i></tt> = <tt class="REPLACEABLE"><i class="EMPHASIS">value2</i></tt></p></td><td width="17" valign="TOP" class="calibre15"><p class="calibre9">Equality comparison</p></td></tr><tr class="calibre12"><td width="4" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE">NOT</tt></p></td><td width="7" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE">NOT </tt><tt class="REPLACEABLE"><i class="EMPHASIS">value</i></tt></p></td><td width="17" valign="TOP" class="calibre15"><p class="calibre9">Logical <tt class="REPLACEABLE">NOT</tt> inversion</p></td></tr><tr class="calibre12"><td width="4" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE">AND</tt></p></td><td width="7" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE"/><tt class="REPLACEABLE"><i class="EMPHASIS">value1</i></tt> AND <tt class="REPLACEABLE"><i class="EMPHASIS">value2</i></tt></p></td><td width="17" valign="TOP" class="calibre15"><p class="calibre9">Logical <tt class="REPLACEABLE">AND</tt> conjunction</p></td></tr><tr class="calibre12"><td width="4" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE">OR</tt></p></td><td width="7" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE"/><tt class="REPLACEABLE"><i class="EMPHASIS">value1</i></tt> OR <tt class="REPLACEABLE"><i class="EMPHASIS">value2</i></tt></p></td><td width="17" valign="TOP" class="calibre15"><p class="calibre9">Logical <tt class="REPLACEABLE">OR</tt> conjunction</p></td></tr></tbody></table></div><div class="NAVHEADER"><blockquote class="NOTE"><p class="calibre9"><b class="calibre10">Note: </b>The operator precedence listed in <a href="c7547.htm#OPERATORPRECEDENCETABLE">Table 5-8</a> applies to user-defined operators that
        have the same character sequence as built-in operators. For example, if you define the plus symbol
        (<tt class="REPLACEABLE">+</tt>) operator for your own user-defined data type, it has the same precedence as the
        built in plus (<tt class="REPLACEABLE">+</tt>) operator, regardless of its function.</p></blockquote></div></div></div></div><div class="NAVHEADER"><hr width="100%" class="calibre6"/><table summary="Footer navigation table" width="100%" border="0" cellpadding="0" cellspacing="0" class="calibre"><tr class="calibre1"><td width="33%" valign="top" class="calibre3"><a href="x7543.htm" accesskey="P">Prev</a></td><td width="34%" valign="top" class="calibre4"><a href="book1.htm" accesskey="H">Home</a></td><td width="33%" valign="top" class="calibre5"><a href="x8973.htm" accesskey="N">Next</a></td></tr><tr class="calibre1"><td width="33%" valign="top" class="calibre3">Further SQL Application</td><td width="34%" valign="top" class="calibre4"><a href="p1162.htm" accesskey="U">Up</a></td><td width="33%" valign="top" class="calibre5">Functions</td></tr></table></div></div>

{% endraw %}

