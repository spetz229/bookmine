---
layout: page
title: "Unknown"
prev: x21880.htm
next: x22143.htm
book_path: books/o-reilly-practical-postgresql_oeb/
---
{% include JB/setup %}
{% raw %}
<div>
<div class="NAVHEADER"><table summary="Header navigation table" width="100%" border="0" cellpadding="0" cellspacing="0" class="calibre"><tr class="calibre1"><th colspan="3" class="calibre2">Practical PostgreSQL</th></tr><tr class="calibre1"><td width="10%" valign="bottom" class="calibre3"><a href="x21880.htm" accesskey="P">Prev</a></td><td width="80%" valign="bottom" class="calibre4">Chapter 13. LXP</td><td width="10%" valign="bottom" class="calibre5"><a href="x22143.htm" accesskey="N">Next</a></td></tr></table><hr width="100%" class="calibre6"/></div><div class="NAVHEADER"><h1 class="calibre7"><a name="LOOPITERATION" class="calibre8">Loop Iteration</a></h1><p class="calibre9">If you have an LXP region that you wish to iterate more than once, the <tt class="REPLACEABLE">&lt;for&gt;</tt>
     tag exists for this purpose. It requires at least a <tt class="REPLACEABLE">start</tt> attribute, and either an
     <tt class="REPLACEABLE">end</tt> or <tt class="REPLACEABLE">endbefore</tt> attribute. Each attribute should be given
     a numeric value.</p><p class="calibre9">The <tt class="REPLACEABLE">start</tt> attribute defines a whole integer value to begin the loop iteration with.
     That value initializes an iteration count, which will be incremented by 1 for each
     iteration of the loop. If the <tt class="REPLACEABLE">end</tt> attribute is defined, the loop will stop iterating after
     the iteration count has looped <span><i class="EMPHASIS">through</i></span> the number specified by <tt class="REPLACEABLE">end</tt>. Alternatively,
     if the <tt class="REPLACEABLE">endbefore</tt> attribute is defined, the loop will
     stop one iteration earlier. Using <tt class="REPLACEABLE">end</tt> and <tt class="REPLACEABLE">endbefore</tt> is
     respectively equivalent to using the <tt class="REPLACEABLE">&lt;=</tt> and <tt class="REPLACEABLE">&lt;</tt>
     operators in a programming language such as PHP or C.</p><p class="calibre9">While iterating, a special LXP object called <tt class="REPLACEABLE">for</tt> maintains a value called
     <tt class="REPLACEABLE">count</tt>, which stores the value of the current loop's iteration count. <a href="x22084.htm#ASIMPLEFORLOOP">Example 13-19</a> demonstrates a simple for loop that will iterate from 1 to 5.</p><div class="NAVHEADER"><a name="ASIMPLEFORLOOP"></a><p class="calibre9"><b class="calibre10">Example 13-19. A simple &lt;for&gt; loop</b></p><pre class="SCREEN">&lt;lxp&gt;
  &lt;for start="1" end="5"&gt;
    Iterating loop: &lt;putvar name="for.count" /&gt;&lt;br /&gt;
  &lt;/for&gt;
&lt;/lxp&gt;</pre></div><p class="calibre9">Here is the output from this loop, when processed by LXP:</p><pre class="SCREEN">
Iterating loop: 1&lt;br /&gt;

Iterating loop: 2&lt;br /&gt;

Iterating loop: 3&lt;br /&gt;

Iterating loop: 4&lt;br /&gt;

Iterating loop: 5&lt;br /&gt;
</pre><p class="calibre9">The <tt class="REPLACEABLE">&lt;for&gt;</tt> loop iterator can be invaluable when dealing with arrays of values
     that you need to return by using LXP. As mentioned earlier in this chapter, if a variable is defined with trailing
     square-brackets (<tt class="REPLACEABLE">[]</tt>), it will be implicitly given an offset by LXP for each value found
     with that name. LXP will also create an object variable of the same name, but without square-brackets, with two attributes:
     <tt class="REPLACEABLE">size</tt> and <tt class="REPLACEABLE">last</tt>. The <tt class="REPLACEABLE">size</tt>
     value (e.g., <tt class="REPLACEABLE">my_array.size</tt>) stores the number of elements in the implicitly defined array,
     while the last value (e.g. <tt class="REPLACEABLE">my_array.last</tt>) stores the offset of the last value.</p><p class="calibre9"><a href="x22084.htm#HANDLINGARRAYRESULTSWITHFOR">Example 13-20</a> demonstrates the handling of a passed variable called
     <tt class="REPLACEABLE">my_array[]</tt>.</p><div class="NAVHEADER"><a name="HANDLINGARRAYRESULTSWITHFOR"></a><p class="calibre9"><b class="calibre10">Example 13-20. Handling array results with &lt;for&gt;</b></p><pre class="SCREEN">&lt;lxp&gt;
  &lt;for start="0" end="@my_array.last"&gt;
    Here is the value of my_array, at offset &lt;putvar name="for.count" /&gt;:
    &lt;putvar name="my_array[@for.count]" /&gt;
    &lt;br /&gt;
  &lt;/for&gt;
&lt;/lxp&gt;</pre></div><p class="calibre9">Notice that the at sign (<tt class="REPLACEABLE">@</tt>) for the <tt class="REPLACEABLE">my_array</tt> object
     is only used where its <span><i class="EMPHASIS">variable value</i></span> is desired, rather than its name. Thus, it is omitted in the
     <tt class="REPLACEABLE">&lt;putvar&gt;</tt> tag, since the <tt class="REPLACEABLE">name</tt> attribute expects a
     literal variable name, and not the variable's value.</p><div class="NAVHEADER"><p class="calibre9"></p><table class="calibre" border="1" width="100%"><tr class="calibre1"><td class="calibre23"><b class="calibre10">Warning</b></td></tr><tr class="calibre1"><td class="calibre15"><p class="calibre9">If you manually assign index offsets to variables in a form (e.g., <tt class="REPLACEABLE">my_array[0]</tt>, <tt class="REPLACEABLE">my_array[1]</tt>) rather than creating an implied array (e.g., <tt class="REPLACEABLE">my_array[]</tt>), LXP will not set the <tt class="REPLACEABLE">size</tt> and <tt class="REPLACEABLE">last</tt> values for such an array of values. </p></td></tr></table></div></div><div class="NAVHEADER"><hr width="100%" class="calibre6"/><table summary="Footer navigation table" width="100%" border="0" cellpadding="0" cellspacing="0" class="calibre"><tr class="calibre1"><td width="33%" valign="top" class="calibre3"><a href="x21880.htm" accesskey="P">Prev</a></td><td width="34%" valign="top" class="calibre4"><a href="book1.htm" accesskey="H">Home</a></td><td width="33%" valign="top" class="calibre5"><a href="x22143.htm" accesskey="N">Next</a></td></tr><tr class="calibre1"><td width="33%" valign="top" class="calibre3">Branching Logic</td><td width="34%" valign="top" class="calibre4"><a href="lxp.htm" accesskey="U">Up</a></td><td width="33%" valign="top" class="calibre5">Content Inclusion</td></tr></table></div></div>

{% endraw %}

