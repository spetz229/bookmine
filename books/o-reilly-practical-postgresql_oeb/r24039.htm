---
layout: page
title: "Unknown"
prev: r23882.htm
next: r24172.htm
book_path: books/o-reilly-practical-postgresql_oeb/
---
{% include JB/setup %}
{% raw %}
<div>
<div class="NAVHEADER"><table summary="Header navigation table" width="100%" border="0" cellpadding="0" cellspacing="0" class="calibre"><tr class="calibre1"><th colspan="3" class="calibre2">Practical PostgreSQL</th></tr><tr class="calibre1"><td width="10%" valign="bottom" class="calibre3"><a href="r23882.htm" accesskey="P">Prev</a></td><td width="80%" valign="bottom" class="calibre4"/><td width="10%" valign="bottom" class="calibre5"><a href="r24172.htm" accesskey="N">Next</a></td></tr></table><hr width="100%" class="calibre6"/></div><h1 class="calibre7"><a name="SQL-CREATEFUNCTION" class="calibre8">CREATE FUNCTION</a></h1><div class="NAVHEADER"><a name="AEN24043"></a><h2 class="SECT">Name</h2>CREATE FUNCTION -- Defines a new function within the database.</div><div class="NAVHEADER"><a name="AEN24046"></a><h2 class="SECT">Synopsis</h2><pre class="SCREEN">CREATE FUNCTION <tt class="REPLACEABLE"><i class="EMPHASIS">name</i></tt> ( [ <tt class="REPLACEABLE"><i class="EMPHASIS">argtype</i></tt> [, ...] ] )
       RETURNS <tt class="REPLACEABLE"><i class="EMPHASIS">returntype</i></tt>
       AS '<tt class="REPLACEABLE"><i class="EMPHASIS">definition</i></tt>'
       LANGUAGE '<tt class="REPLACEABLE"><i class="EMPHASIS">langname</i></tt>'
       [ WITH ( <tt class="REPLACEABLE"><i class="EMPHASIS">attribute</i></tt> [, ...] ) ]
CREATE FUNCTION <tt class="REPLACEABLE"><i class="EMPHASIS">name</i></tt> ( [ <tt class="REPLACEABLE"><i class="EMPHASIS">argtype</i></tt> [, ...] ] )
       RETURNS <tt class="REPLACEABLE"><i class="EMPHASIS">returntype</i></tt>
       AS '<tt class="REPLACEABLE"><i class="EMPHASIS">obj_file</i></tt>' [, '<tt class="REPLACEABLE"><i class="EMPHASIS">link_symbol</i></tt>' ]
       LANGUAGE '<tt class="REPLACEABLE"><i class="EMPHASIS">langname</i></tt>'
       [ WITH ( <tt class="REPLACEABLE"><i class="EMPHASIS">attribute</i></tt> [, ...] ) ]</pre><div class="NAVHEADER"><a name="R2-SQL-CREATEFUNCTION-1"></a><h3 class="AUTHOR">Parameters</h3><p class="calibre9"> </p><p class="calibre9"></p><div class="NAVHEADER"><dl class="calibre9"><dt class="NAVHEADER"><tt class="REPLACEABLE"><i class="EMPHASIS">name</i></tt></dt><dd class="calibre16"><p class="calibre9">The name of the new function being created.</p></dd><dt class="NAVHEADER"><tt class="REPLACEABLE"><i class="EMPHASIS">argtype</i></tt></dt><dd class="calibre16"><p class="calibre9">The data type of the argument, or arguments, to be accepted by the new function. There are three general input types you may use: base types, complex types, or the special <tt class="REPLACEABLE">opaque</tt> type. The <tt class="REPLACEABLE">opaque</tt> type explicitly allows the function to accept arguments of invalid SQL types. The <tt class="REPLACEABLE">opaque</tt> type is generally used by internal functions, or functions written in internal language such as C, or PL/pgSQL, where the return type is not provided as a standard SQL data type.</p></dd><dt class="NAVHEADER"><tt class="REPLACEABLE"><i class="EMPHASIS">returntype</i></tt></dt><dd class="calibre16"><p class="calibre9">The data type of the value or values returned by the new function. This may be set as a base type, complex type, <tt class="REPLACEABLE">setof</tt> type (a normal data type, prefixed by <tt class="REPLACEABLE">setof</tt>), or the <tt class="REPLACEABLE">opaque</tt> type.</p><p class="calibre9">Using the <tt class="REPLACEABLE">setof</tt> modifier determines that the function will return multiple rows worth of data (by default, a function returns only one row). For example, a return type defined as <tt class="REPLACEABLE">setof integer</tt> creates a function that can return more than a single row of integer values.</p></dd><dt class="NAVHEADER"><tt class="REPLACEABLE"><i class="EMPHASIS">attribute</i></tt></dt><dd class="calibre16"><p class="calibre9">An optional function attribute. Valid attributes, as of PostgreSQL 7.1.x, are
            <tt class="REPLACEABLE">isstrict</tt> and <tt class="REPLACEABLE">iscacheable</tt>.</p></dd><dt class="NAVHEADER"><tt class="REPLACEABLE"><i class="EMPHASIS">definition</i></tt></dt><dd class="calibre16"><p class="calibre9">The definition of the function to create. This is entered as a string, bound by quotes, though its contents vary widely between languages. The exact content of this string may be an internal function name, a SQL statement, or procedural code in a language such as PL/pgSQL.</p></dd><dt class="NAVHEADER"><tt class="REPLACEABLE"><i class="EMPHASIS">obj_file</i></tt><tt class="REPLACEABLE"> [, </tt><tt class="REPLACEABLE"><i class="EMPHASIS">link_symbol</i></tt><tt class="REPLACEABLE">]</tt></dt><dd class="calibre16"><p class="calibre9">The file that contains the dynamically loadable object code, and the function name in the C source.  The <tt class="REPLACEABLE"><i class="EMPHASIS">link_symbol</i></tt> is only required if the source C function has a name that is different from the intended SQL function name.</p></dd><dt class="NAVHEADER"><tt class="REPLACEABLE"><i class="EMPHASIS">langname</i></tt></dt><dd class="calibre16"><p class="calibre9">The name of the language the new function is written in.  Possible values for this parameter are <span><i class="EMPHASIS">C</i></span>, <span><i class="EMPHASIS">SQL</i></span>, <span><i class="EMPHASIS">internal</i></span>, or the name of a procedural language created using the <tt class="REPLACEABLE">CREATE LANGUAGE</tt> command (e.g., <span><i class="EMPHASIS">plpgsql</i></span>).  See <a href="r24435.htm">CREATE LANGUAGE</a>" for further details.</p></dd></dl></div>
</div><div class="NAVHEADER"><a name="R2-SQL-CREATEFUNCTION-2"></a><h3 class="AUTHOR">Results</h3><p class="calibre9"> </p><p class="calibre9"></p><div class="NAVHEADER"><dl class="calibre9"><dt class="NAVHEADER"><tt class="REPLACEABLE">CREATE</tt></dt><dd class="calibre16"><p class="calibre9">The message returned when a function is created successfully.</p></dd></dl></div>
</div></div><div class="NAVHEADER"><a name="R1-SQL-CREATEFUNCTION-1"></a><h2 class="SECT">Description</h2><p class="calibre9">Use the <tt class="REPLACEABLE">CREATE FUNCTION</tt> command to create a new function in the connected database. Ownership of the function is set to the PostgreSQL user that created it.</p><div class="NAVHEADER"><a name="AEN24134"></a><h3 class="AUTHOR">Function attributes</h3><p class="calibre9"> </p><p class="calibre9"></p><div class="NAVHEADER"><dl class="calibre9"><dt class="NAVHEADER"><tt class="REPLACEABLE">iscachable</tt></dt><dd class="calibre16"><p class="calibre9">The <tt class="REPLACEABLE">iscacheable</tt> attribute specifies that the function will always return the same result when passed the same argument values (i.e., calculated results are cached). Such a function does not perform a database lookup or use information not directly present in the parameter list. This option is used by the optimizer to determine whether it is safe to pre-evaluate the result of a function call based on past calls, rather than re-executing the function on cached values for previously passed arguments.</p></dd><dt class="NAVHEADER"><tt class="REPLACEABLE">isstrict</tt></dt><dd class="calibre16"><p class="calibre9">          The <tt class="REPLACEABLE">isstrict</tt> attribute specifies that the function is strict in its handling of <tt class="REPLACEABLE">NULL</tt> values. This means that whenever the function is passed a <tt class="REPLACEABLE">NULL</tt> argument, it will not operate, and will simply return a <tt class="REPLACEABLE">NULL</tt> value. </p></dd></dl></div>
</div><div class="NAVHEADER"><a name="AEN24153"></a><h3 class="AUTHOR">Function overloading</h3><p class="calibre9">PostgreSQL allows <span><i class="EMPHASIS">function overloading</i></span>. Users of object-oriented programming languages may be
      familiar with this term. In PostgreSQL, the term means to create multiple functions with the same name, provided each of
      them has a unique set of argument types.</p><p class="calibre9">Overloading is useful for creating what seems to be a single function that can handle a large variety of different
      input types; to the user, the series of functions you have created become a single, seamless, versatile tool.</p><p class="calibre9">Differing from PostgreSQL's ability to overload functions based on argument types, two compiled C functions in one
      object file are unable to share the same name.  To avoid this problem, you can arbitrarily rename the second C function
      that you wish to overload within PostgreSQL to a unique function name in your C source, compile the object code, and then
      explicitly define the <tt class="REPLACEABLE"><i class="EMPHASIS">link_symbol</i></tt> parameter as that arbitrary name when creating the overloaded
      C function.</p></div></div><div class="NAVHEADER"><a name="AEN24160"></a><h2 class="SECT">Examples</h2><p class="calibre9">The following example creates a simple SQL function that returns a book title based on the ID number passed to the function:</p><pre class="SCREEN">booktown=# <tt class="REPLACEABLE"><b class="calibre10">CREATE FUNCTION title(integer) RETURNS text</b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">       AS 'SELECT title from books where id = $1'</b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">       LANGUAGE 'sql';</b></tt>
CREATE</pre><p class="calibre9">The <tt class="REPLACEABLE">title()</tt> function can now be used within the <tt class="REPLACEABLE">booktown</tt> database to retrieve rows with ID numbers matching the number passed as an argument:</p><pre class="SCREEN">booktown=# <tt class="REPLACEABLE"><b class="calibre10">SELECT title(41472) AS book_title;</b></tt>
      book_title
----------------------
 Practical PostgreSQL
(1 row)</pre></div><div class="NAVHEADER"><hr width="100%" class="calibre6"/><table summary="Footer navigation table" width="100%" border="0" cellpadding="0" cellspacing="0" class="calibre"><tr class="calibre1"><td width="33%" valign="top" class="calibre3"><a href="r23882.htm" accesskey="P">Prev</a></td><td width="34%" valign="top" class="calibre4"><a href="book1.htm" accesskey="H">Home</a></td><td width="33%" valign="top" class="calibre5"><a href="r24172.htm" accesskey="N">Next</a></td></tr><tr class="calibre1"><td width="33%" valign="top" class="calibre3">CREATE DATABASE</td><td width="34%" valign="top" class="calibre4"><a href="c22759.htm" accesskey="U">Up</a></td><td width="33%" valign="top" class="calibre5">CREATE GROUP</td></tr></table></div></div>

{% endraw %}

