---
layout: page
title: "Unknown"
prev: p1162.htm
next: x1277.htm
book_path: books/o-reilly-practical-postgresql_oeb/
---
{% include JB/setup %}
{% raw %}
<div>
<div class="NAVHEADER"><table summary="Header navigation table" width="100%" border="0" cellpadding="0" cellspacing="0" class="calibre"><tr class="calibre1"><th colspan="3" class="calibre2">Practical PostgreSQL</th></tr><tr class="calibre1"><td width="10%" valign="bottom" class="calibre3"><a href="p1162.htm" accesskey="P">Prev</a></td><td width="80%" valign="bottom" class="calibre4"/><td width="10%" valign="bottom" class="calibre5"><a href="x1277.htm" accesskey="N">Next</a></td></tr></table><hr width="100%" class="calibre6"/></div><div class="NAVHEADER"><div class="calibre18"></div><h1 id="calibre_toc_5" class="calibre7"><a name="UNDERSTANDINGSQL" class="calibre8">Chapter 3. Understanding SQL</a></h1><div class="NAVHEADER"><dl class="calibre9"><dt class="NAVHEADER"><b class="calibre10">Table of Contents</b></dt><dt class="NAVHEADER"><a href="c1164.htm#INTRODUCTIONTOSQL">Introduction to SQL</a></dt><dt class="NAVHEADER"><a href="x1277.htm">Introduction to Relational Databases</a></dt><dt class="NAVHEADER"><a href="x1428.htm">SQL Statements</a></dt><dt class="NAVHEADER"><a href="x2632.htm">Data Types</a></dt><dt class="NAVHEADER"><a href="x4636.htm">Tables in PostgreSQL</a></dt></dl></div><p class="calibre9">This chapter discusses the history and fundamental concepts of SQL and forms the foundation for the next chapter, which
  is about applying SQL with PostgreSQL. It addresses the basics of relational databases, object-related database extensions, the
  structure of a SQL statement, and provides an overview of PostgreSQL-supported data types, operators and functions.  </p><div class="NAVHEADER"><h1 class="calibre7"><a name="INTRODUCTIONTOSQL" class="calibre8">Introduction to SQL</a></h1><p class="calibre9">      SQL, the <span><i class="EMPHASIS">Structured Query Language</i></span>, is a mature, powerful, and versatile relational
      query language. The history of SQL extends back to IBM research begun in 1970.  The next few sections discuss
      the history of SQL, its predecessors, and the various SQL standards that have developed over the years.
    </p><div class="NAVHEADER"><h2 class="SECT"><a name="AEN1177" class="calibre8">A Brief History of SQL</a></h2><p class="calibre9">The relational model, from which SQL draws much of its conceptual core, was formally defined in 1970
      by Dr. E. F. Codd, a researcher for IBM, in a paper entitled <span><i class="EMPHASIS">A Relational Model of Data for Large Shared Data Banks</i></span>.
      This article generated a great deal of interest in both the feasibility and
      practical commercial application of such a system.</p><p class="calibre9">In 1974 IBM began the System/R project and with the work of Donald Chamberlin and others, developed SEQUEL,
      or <span><i class="EMPHASIS">Structured English Query Language</i></span>. System/R was implemented on an IBM prototype called
      SEQUEL-XRM in 1974–75. It was then completely rewritten in 1976–1977 to include multi-table and
      multiuser features. When the system was revised it was briefly called "SEQUEL/2," and then re-named "SQL" for legal reasons.</p><p class="calibre9">In 1978, methodical testing commenced at customer test sites. Demonstrating both the
      usefulness and practicality of the system, this testing proved to be a success for IBM. As a result, IBM began to
      develop commercial products that implemented SQL based on their System R prototype, including SQL/DS (introduced
      in 1981), and DB2 (in 1983).</p><p class="calibre9">Several other software vendors accepted the rise of the relational model and announced SQL-based
      products. These included Oracle (who actually beat IBM to market by two years by releasing their first commercial
      RDBMS, in 1979), Sybase, and Ingres (based on the University of California's Berkeley Ingres
      project).</p><div class="NAVHEADER"><blockquote class="NOTE"><p class="calibre9"><b class="calibre10">Note: </b>PostgreSQL's name is, as you might have guessed, a play on the name Ingres. Both PostgreSQL and
        Ingres trace their roots back to the UC Berkeley's Ingres RDBMS system.</p></blockquote></div></div><div class="NAVHEADER"><h2 class="SECT"><a name="AEN1187" class="calibre8">SQL and Its Predecessors</a></h2><p class="calibre9">SQL is based largely on relational algebra and tuple relational calculus. Relational algebra, introduced by
      E. F. Codd in 1972, provided the basic concepts behind computing SQL syntax. It is a procedural way to construct
      data-driven queries, and it addresses the <span><i class="EMPHASIS">how</i></span> logic of a structured query. The tuple
      relational calculus (<span><i class="EMPHASIS">TRC</i></span> ), on the other hand, affects the underlying
      appearance of SQL. Relational calculus uses declarative expressions, addressing the <span><i class="EMPHASIS">what</i></span>
      logic of a structured query.</p><p class="calibre9">There are additional features that set SQL apart from those that merely implement features that are part
      of relational algebra or calculus. These features include:</p><p class="calibre9"> </p><p class="calibre9"></p><div class="NAVHEADER"><dl class="calibre9"><dt class="NAVHEADER">Support for data insertion, modification and deletion</dt><dd class="calibre16"><p class="calibre9">Users are allowed to insert, delete, and modify stored data records.</p></dd><dt class="NAVHEADER">Arithmetic operators</dt><dd class="calibre16"><p class="calibre9">Arithmetic operations such as addition, subtraction, multiplication, and division (e.g.,
              <tt class="REPLACEABLE">(value1 * 5) + value2</tt>) are allowed, as well as comparison operators
              (e.g., <tt class="REPLACEABLE">value3 &gt;= value4</tt>).</p></dd><dt class="NAVHEADER">Display of data</dt><dd class="calibre16"><p class="calibre9">Users may display query-generated relationships (such as a table's contents).</p></dd><dt class="NAVHEADER">Assignment</dt><dd class="calibre16"><p class="calibre9"> Users may rename a relation that is computed by
              a query instead of forcing the use of the default relationship name, which may be derived from a column
              or function name, depending on the query.</p></dd><dt class="NAVHEADER">Aggregate functions</dt><dd class="calibre16"><p class="calibre9">User may group related rows together and evaluate averages, sums, counts, maximums, and minimums.</p></dd></dl></div>
</div><div class="NAVHEADER"><h2 class="SECT"><a name="AEN1226" class="calibre8">SQL Standards</a></h2><p class="calibre9">The American National Standards Institute (ANSI) standardized SQL in 1986 (X3.135) and the International Standards
      Organization (ISO) standardized it in 1987. The United States government's Federal Information Processing Standard
      (<span><i class="EMPHASIS">FIPS</i></span>) adopted the ANSI/ISO standard. In 1989, a revised standard known commonly as
      <span><i class="EMPHASIS">SQL89</i></span> or <span><i class="EMPHASIS">SQL1</i></span>, was published.</p><p class="calibre9">Due partially to conflicting interests from commercial vendors,
      much of the SQL89 standard was intentionally left incomplete, and many
      features were labeled implementor-defined. In order to strengthen the
      standard, the ANSI committee revised its previous work with the
      <span><i class="EMPHASIS">SQL92</i></span> standard ratified in 1992 (also called
      <span><i class="EMPHASIS">SQL2</i></span>). This standard addressed several weaknesses
      in SQL89 and set forth conceptual SQL features which at that
      time exceeded the capabilities of any existing RDBMS implementation.
      In fact, the SQL92 standard was approximately six times the length of
      its predecessor. As a result of this disparity, the authors defined
      three levels of SQL92 compliance: <span><i class="EMPHASIS">Entry-level conformance</i></span>
      (only the barest improvements to SQL89),
      <span><i class="EMPHASIS">Intermediate-level conformance</i></span> (a generally achievable set of
      major advancements), and <span><i class="EMPHASIS">Full conformance</i></span> (total compliance
      with the SQL92 features).</p><p class="calibre9">More recently, in 1999, the ANSI/ISO released the <span><i class="EMPHASIS">SQL99</i></span>
      standard (also called <span><i class="EMPHASIS">SQL3</i></span>). This
      standard addresses some of the more advanced and previously
      ignored areas of modern SQL systems, such as object-relational
      database concepts, call level interfaces, and integrity management.
      SQL99 replaces the SQL92 levels of compliance with its own degrees of
      conformance: <span><i class="EMPHASIS">Core SQL99</i></span> and <span><i class="EMPHASIS">Enhanced SQL99</i></span>.</p><p class="calibre9">PostgreSQL presently conforms to most of the Entry-level SQL92
      standard, as well as many of the Intermediate- and Full-level features.
      Additionally, many of the features new in SQL99 are quite similar to the object-relational concepts pioneered by PostgreSQL (arrays, functions, and inheritance).</p></div></div></div><div class="NAVHEADER"><hr width="100%" class="calibre6"/><table summary="Footer navigation table" width="100%" border="0" cellpadding="0" cellspacing="0" class="calibre"><tr class="calibre1"><td width="33%" valign="top" class="calibre3"><a href="p1162.htm" accesskey="P">Prev</a></td><td width="34%" valign="top" class="calibre4"><a href="book1.htm" accesskey="H">Home</a></td><td width="33%" valign="top" class="calibre5"><a href="x1277.htm" accesskey="N">Next</a></td></tr><tr class="calibre1"><td width="33%" valign="top" class="calibre3">Using PostgreSQL</td><td width="34%" valign="top" class="calibre4"><a href="p1162.htm" accesskey="U">Up</a></td><td width="33%" valign="top" class="calibre5">Introduction to Relational Databases</td></tr></table></div></div>

{% endraw %}

