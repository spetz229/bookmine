---
layout: page
title: "Unknown"
prev: r24254.htm
next: r24536.htm
book_path: books/o-reilly-practical-postgresql_oeb/
---
{% include JB/setup %}
{% raw %}
<div>
<div class="NAVHEADER"><table summary="Header navigation table" width="100%" border="0" cellpadding="0" cellspacing="0" class="calibre"><tr class="calibre1"><th colspan="3" class="calibre2">Practical PostgreSQL</th></tr><tr class="calibre1"><td width="10%" valign="bottom" class="calibre3"><a href="r24254.htm" accesskey="P">Prev</a></td><td width="80%" valign="bottom" class="calibre4"/><td width="10%" valign="bottom" class="calibre5"><a href="r24536.htm" accesskey="N">Next</a></td></tr></table><hr width="100%" class="calibre6"/></div><h1 class="calibre7"><a name="SQL-CREATELANGUAGE" class="calibre8">CREATE LANGUAGE</a></h1><div class="NAVHEADER"><a name="AEN24439"></a><h2 class="SECT">Name</h2>CREATE LANGUAGE -- Defines a new language to be used by functions.</div><div class="NAVHEADER"><a name="AEN24442"></a><h2 class="SECT">Synopsis</h2><pre class="SCREEN">CREATE [ TRUSTED ] [ PROCEDURAL ] LANGUAGE '<tt class="REPLACEABLE"><i class="EMPHASIS">langname</i></tt>'
    HANDLER <tt class="REPLACEABLE"><i class="EMPHASIS">call_handler</i></tt>
    LANCOMPILER '<tt class="REPLACEABLE"><i class="EMPHASIS">comment</i></tt>'</pre><div class="NAVHEADER"><a name="R2-SQL-CREATELANGUAGE-1"></a><h3 class="AUTHOR">Parameters</h3><p class="calibre9"> </p><p class="calibre9"></p><div class="NAVHEADER"><dl class="calibre9"><dt class="NAVHEADER"><tt class="REPLACEABLE">TRUSTED</tt></dt><dd class="calibre16"><p class="calibre9">The <tt class="REPLACEABLE">TRUSTED</tt> keyword indicates that the PostgreSQL lets unprivileged users bypass user and permission-related access restrictions on the language.  If this parameter is not specified during creation of the language, only database superusers will be able to use the language to create new functions.</p></dd><dt class="NAVHEADER"><tt class="REPLACEABLE">PROCEDURAL</tt></dt><dd class="calibre16"><p class="calibre9">The optional <tt class="REPLACEABLE">PROCEDURAL</tt> noise term. This may be used to increase readability of your <tt class="REPLACEABLE">CREATE LANGUAGE</tt> statements, but has no effect.</p></dd><dt class="NAVHEADER"><tt class="REPLACEABLE"><i class="EMPHASIS">langname</i></tt></dt><dd class="calibre16"><p class="calibre9">The name of the new procedural language to define. This name is case insensitive.
            A procedural language will not (and cannot) override an existing, built-in PostgreSQL language.</p></dd><dt class="NAVHEADER"><tt class="REPLACEABLE">HANDLER</tt> <tt class="REPLACEABLE"><i class="EMPHASIS">call_handler</i></tt></dt><dd class="calibre16"><p class="calibre9">The name of the already-defined function that will be called to execute the PL procedures.</p></dd><dt class="NAVHEADER"><tt class="REPLACEABLE"><i class="EMPHASIS">comment</i></tt></dt><dd class="calibre16"><p class="calibre9">A string that is inserted into the <tt class="REPLACEABLE">lancompiler</tt> column of the <tt class="REPLACEABLE">pg_language</tt> system table. The 
            <tt class="REPLACEABLE">LANCOMPILER</tt> clause is a legacy clause with no practical effect, and may be removed in a future PostgreSQL release. 
            However, as of version 7.1.x, this is still a required clause.</p></dd></dl></div>
</div><div class="NAVHEADER"><a name="R2-SQL-CREATELANGUAGE-2"></a><h3 class="AUTHOR">Results</h3><p class="calibre9"> </p><p class="calibre9"></p><div class="NAVHEADER"><dl class="calibre9"><dt class="NAVHEADER"><tt class="REPLACEABLE">CREATE</tt></dt><dd class="calibre16"><p class="calibre9">The message returned when a new language is successfully created.</p></dd><dt class="NAVHEADER"><tt class="REPLACEABLE">ERROR:  PL handler function </tt><tt class="REPLACEABLE"><i class="EMPHASIS">call_handler()</i></tt> <tt class="REPLACEABLE">doesn't exist</tt></dt><dd class="calibre16"><p class="calibre9">The error returned if the function you specified as the call handler with <tt class="REPLACEABLE"><i class="EMPHASIS">call_handler</i></tt> parameter cannot be found.</p></dd></dl></div>
</div></div><div class="NAVHEADER"><a name="R1-SQL-CREATELANGUAGE-1"></a><h2 class="SECT">Description</h2><p class="calibre9">Use the <tt class="REPLACEABLE">CREATE LANGUAGE</tt> command to load a new procedural language into the connected database.  This command can be used with languages that you specified using <span><i class="EMPHASIS">--with-langname</i></span> when you first installed PostgreSQL, or one you have created yourself. For instance, to correctly add the pltcl language into PostgreSQL, you should have used the tag <span><i class="EMPHASIS">--with-tcl</i></span> when you configured PostgreSQL to make its call handler available.</p><p class="calibre9">After this command has been issued, you should be able to define functions using the newly added language. Note that the user who executes the <tt class="REPLACEABLE">CREATE LANGUAGE</tt> command must be a superuser.</p><p class="calibre9">As of PostgreSQL 7.1.x (the most current version at the printing of this book), once a procedural languages is defined, the definition cannot be modified.  To change the definition of your procedural language, you will need to drop it from the database with the <tt class="REPLACEABLE">DROP LANGUAGE</tt> command and recreate it.</p><div class="NAVHEADER"><blockquote class="NOTE"><p class="calibre9"><b class="calibre10">Note: </b>If you use <tt class="REPLACEABLE">CREATE LANGUAGE</tt> to create a language in the <tt class="REPLACEABLE">template1</tt> database, all subsequent databases that are created from the <tt class="REPLACEABLE">template1</tt> (the default template) will support that language.</p></blockquote></div><p class="calibre9">In order for a procedural language to be used by PostgreSQL, a call handler must be written for it. That call handler must be compiled into a binary form; it is therefore required that the language used to write a handler be one that compiles into a binary format, such as C or C++.</p><p class="calibre9">The call handler must be created within PostgreSQL as a function that does not accept arguments and has a return type of <tt class="REPLACEABLE">opaque</tt>. By defining the handler function in this manner, you enable PostgreSQL to prevent the function (and thus, the language) from ever being used in an arbitrary SQL statement.</p></div><div class="NAVHEADER"><a name="R1-SQL-CREATELANGUAGE-6"></a><h2 class="SECT">Examples</h2><p class="calibre9">A handler must already exist for the language in question when you use the <tt class="REPLACEABLE">CREATE LANGUAGE</tt> command. The first step in registering a procedural language to create a function that specifies the location of object code for the call handler. The following example creates an example call handler, whose object code is located at <span><i class="EMPHASIS">/usr/local/pgsql/lib/libexample.so</i></span>:</p><pre class="SCREEN">booktown=# <tt class="REPLACEABLE"><b class="calibre10">CREATE FUNCTION example_call_handler () RETURNS opaque</b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">       AS '/usr/local/pgsql/lib/libexample.so'</b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">       LANGUAGE 'C';</b></tt>
CREATE</pre><div class="NAVHEADER"><blockquote class="NOTE"><p class="calibre9"><b class="calibre10">Note: </b>You do not need to define the call handler function if it has already been created by the programmer.  For illustrative purposes, we are assuming that the programmer has not defined a function that refers to the call handler.</p></blockquote></div><p class="calibre9">The second step is to use <tt class="REPLACEABLE">CREATE LANGUAGE</tt> to load the existing language into the connected database. The following example creates a language called <tt class="REPLACEABLE">plexample</tt>, which uses the call handler created in the preceding example:</p><pre class="SCREEN">booktown=# <tt class="REPLACEABLE"><b class="calibre10">CREATE PROCEDURAL LANGUAGE 'plexample'</b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">       HANDLER example_call_handler</b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">       LANCOMPILER 'My Example';</b></tt>
CREATE</pre></div><div class="NAVHEADER"><hr width="100%" class="calibre6"/><table summary="Footer navigation table" width="100%" border="0" cellpadding="0" cellspacing="0" class="calibre"><tr class="calibre1"><td width="33%" valign="top" class="calibre3"><a href="r24254.htm" accesskey="P">Prev</a></td><td width="34%" valign="top" class="calibre4"><a href="book1.htm" accesskey="H">Home</a></td><td width="33%" valign="top" class="calibre5"><a href="r24536.htm" accesskey="N">Next</a></td></tr><tr class="calibre1"><td width="33%" valign="top" class="calibre3">CREATE INDEX</td><td width="34%" valign="top" class="calibre4"><a href="c22759.htm" accesskey="U">Up</a></td><td width="33%" valign="top" class="calibre5">CREATE OPERATOR</td></tr></table></div></div>

{% endraw %}

