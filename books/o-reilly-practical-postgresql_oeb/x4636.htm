---
layout: page
title: "Unknown"
prev: x2632.htm
next: c4890.htm
book_path: books/o-reilly-practical-postgresql_oeb/
---
{% include JB/setup %}
{% raw %}
<div>
<div class="NAVHEADER"><table summary="Header navigation table" width="100%" border="0" cellpadding="0" cellspacing="0" class="calibre"><tr class="calibre1"><th colspan="3" class="calibre2">Practical PostgreSQL</th></tr><tr class="calibre1"><td width="10%" valign="bottom" class="calibre3"><a href="x2632.htm" accesskey="P">Prev</a></td><td width="80%" valign="bottom" class="calibre4">Chapter 3. Understanding SQL</td><td width="10%" valign="bottom" class="calibre5"><a href="c4890.htm" accesskey="N">Next</a></td></tr></table><hr width="100%" class="calibre6"/></div><div class="NAVHEADER"><h1 class="calibre7"><a name="TABLESINPOSTGRESQL" class="calibre8">Tables in PostgreSQL</a></h1><p class="calibre9">If you are already familiar with SQL or other RDBMS packages, you probably already have a solid understanding of many
    of the relational database concepts put forth in this chapter. However, each RDBMS handles tables differently at the
    system level. This section takes a closer look at tables as they are implemented in PostgreSQL.</p><div class="NAVHEADER"><h2 class="SECT"><a name="SYSTEMCOLUMNS" class="calibre8">System Columns</a></h2><p class="calibre9">PostgreSQL defines a series of <span><i class="EMPHASIS">system columns</i></span> in all tables, which are normally invisible to the
      user (e.g., they will not be shown by queries unless explicitly requested). These columns contain
      <span><i class="EMPHASIS">meta-data</i></span> about the content of the table's rows. Many of these contain data that can help to
      differentiate between <span><i class="EMPHASIS">tuples</i></span> (an individual state of a row) when working with transaction blocks.
      (See <a href="c13329.htm">Chapter 7</a> for more about transactions.)</p><p class="calibre9">As a result of these system-defined columns, in addition to the user-defined columns of a table, any inserted row
      will have values in each of the columns described in <a href="x4636.htm#SYSTEMCOLUMNSTABLE">Table 3-25</a>.</p><div class="NAVHEADER"><a name="SYSTEMCOLUMNSTABLE"></a><p class="calibre9"><b class="calibre10">Table 3-25. System columns</b></p><table border="1" width="100%" class="calibre"><thead class="calibre11"><tr class="calibre12"><th width="11" valign="TOP" class="calibre13"><p class="calibre9">Column</p></th><th width="18" valign="TOP" class="calibre13"><p class="calibre9">Description</p></th></tr></thead><tbody class="calibre14"><tr class="calibre12"><td width="11" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE">oid</tt> (object identifier)</p></td><td width="18" valign="TOP" class="calibre15"><p class="calibre9">The unique object identifier of a row. PostgreSQL automatically adds this 4-byte number to
              all rows. It is never re-used within the same table.</p></td></tr><tr class="calibre12"><td width="11" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE">tableoid</tt> (table object identifier)</p></td><td width="18" valign="TOP" class="calibre15"><p class="calibre9">The oid of the table that contains a row. The name and oid of a table are
              related by the <tt class="REPLACEABLE">pg_class</tt> system table.</p></td></tr><tr class="calibre12"><td width="11" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE">xmin</tt> (transaction minimum)</p></td><td width="18" valign="TOP" class="calibre15"><p class="calibre9">The transaction identifier of the inserting transaction of a tuple.</p></td></tr><tr class="calibre12"><td width="11" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE">cmin</tt> (command minimum)</p></td><td width="18" valign="TOP" class="calibre15"><p class="calibre9">The command identifier, starting at 0, associated with the inserting transaction of a tuple.</p></td></tr><tr class="calibre12"><td width="11" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE">xmax</tt> (transaction maximum)</p></td><td width="18" valign="TOP" class="calibre15"><p class="calibre9">The transaction identifier of a tuple's deleting transaction. If a tuple is visible (has not been deleted) this is set to zero.</p></td></tr><tr class="calibre12"><td width="11" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE">cmax</tt> (command maximum)</p></td><td width="18" valign="TOP" class="calibre15"><p class="calibre9">The command identifier associated with the deleting transaction of a tuple. Like <tt class="REPLACEABLE">xmax</tt>, if a tuple is visible, this is set to zero.</p></td></tr><tr class="calibre12"><td width="11" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE">ctid</tt> (tuple identifier)</p></td><td width="18" valign="TOP" class="calibre15"><p class="calibre9">The identifier which describes the physical location of the tuple within the database. A pair of numbers are represented by the <tt class="REPLACEABLE">ctid</tt>: the block number, and tuple index within that block.</p></td></tr></tbody></table></div></div><div class="NAVHEADER"><h2 class="SECT"><a name="OBJECTIDENTIFIER" class="calibre8">Object Identifiers</a></h2><p class="calibre9">As described in <a href="x1277.htm#UNDERSTANDINGTABLES">the Section called <i class="EMPHASIS">Understanding Tables</i></a>," each database consists of tables, and each table consists of at
      least one named column. These tables may contain rows, but do not necessarily at any given time.</p><p class="calibre9">One table management concern can be how to distinguish between
      two rows whose column values are identical. A very useful PostgreSQL
      feature is that every row has its own <span><i class="EMPHASIS">object identifier</i></span>
      number, or <span><i class="EMPHASIS">OID</i></span>, which is
      unique within that table. In other words, no two rows within the same
      table will ever have the same OID.  This means that even if a table
      were designed in such a way that two rows might be identical, there is
      still a programmatic way to discern between them: via the OID. This is
      demonstrated in <a href="x4636.htm#DIFFERENTIATINGROWSVIATHEOID">Example 3-31</a>.</p><div class="NAVHEADER"><a name="DIFFERENTIATINGROWSVIATHEOID"></a><p class="calibre9"><b class="calibre10">Example 3-31. Differentiating rows via the OID</b></p><pre class="SCREEN">testdb=# <tt class="REPLACEABLE"><b class="calibre10">SELECT * FROM my_list;</b></tt>
              todos
----------------------------------
 Correct redundancies in my list.
 Correct redundancies in my list.
(2 rows)

testdb=# <tt class="REPLACEABLE"><b class="calibre10">SELECT *,oid FROM my_list;</b></tt>
              todos               |   oid
----------------------------------+---------
 Correct redundancies in my list. | 3391263
 Correct redundancies in my list. | 3391264
(2 rows)

testdb=# <tt class="REPLACEABLE"><b class="calibre10">DELETE FROM my_list </b></tt>
testdb-#  <tt class="REPLACEABLE"><b class="calibre10">   WHERE oid = 3391264;</b></tt>
DELETE 1
testdb=# SELECT *,oid FROM my_list;
              todos               |   oid
----------------------------------+---------
 Correct redundancies in my list. | 3391263
(1 row)</pre></div></div><div class="NAVHEADER"><h2 class="SECT"><a name="AEN4730" class="calibre8">Planning Ahead</a></h2><p class="calibre9">Before you start creating any tables, we suggest that you take some extra time to plan out your intended database
      objects by deciding the names, types, and purposes of all columns within each table. This can help you to be
      consistent with table naming structures, which in turn helps you more easily read and construct "legible" queries and
      statements.</p><p class="calibre9">In addition to taking the somewhat semantic considerations just
      described (names, types, and purposes), it is important to be sure
      that each table's relationship to each other table is clearly defined.
      This can be an important point of table design, as you do not wish to
      redundantly represent large amounts of data, nor do you want to end up
      omitting important data from one table by misunderstanding the needs
      that must be satisfied by your implementation.</p><p class="calibre9">As an example, consider again the Book Town <tt class="REPLACEABLE">books</tt> table, from <a href="x1277.htm#ANEXAMPLESQLTABLE">Table 3-1</a>. This table holds an internal Book Town identification number for each book, the title,
      author identification number, and a subject identification number. Notice that rather than storing the name of the author,
      and rather than storing a text representation of the subject of the book, simple identification integers are stored.
      These identification numbers are used to create relationships to two other tables: the
      <tt class="REPLACEABLE">authors</tt>, and <tt class="REPLACEABLE">subjects</tt> tables, whose partial
      contents are shown in <a href="x4636.htm#THEAUTHORSTABLE">Table 3-26</a> and <a href="x4636.htm#THESUBJECTSTABLE">Table 3-27</a>.</p><div class="NAVHEADER"><a name="THEAUTHORSTABLE"></a><p class="calibre9"><b class="calibre10">Table 3-26. The authors table</b></p><table border="1" class="calibre"><thead class="calibre11"><tr class="calibre12"><th width="4" valign="TOP" class="calibre13"><p class="calibre9"><tt class="REPLACEABLE">id</tt></p></th><th width="8" valign="TOP" class="calibre13"><p class="calibre9"><tt class="REPLACEABLE">last_name</tt></p></th><th width="8" valign="TOP" class="calibre13"><p class="calibre9"><tt class="REPLACEABLE">first_name</tt></p></th></tr></thead><tbody class="calibre14"><tr class="calibre12"><td width="4" valign="TOP" class="calibre15"><p class="calibre9">1809</p></td><td width="8" valign="TOP" class="calibre15"><p class="calibre9">Geisel</p></td><td width="8" valign="TOP" class="calibre15"><p class="calibre9">Theodor Seuss</p></td></tr><tr class="calibre12"><td width="4" valign="TOP" class="calibre15"><p class="calibre9">1111</p></td><td width="8" valign="TOP" class="calibre15"><p class="calibre9">Denham</p></td><td width="8" valign="TOP" class="calibre15"><p class="calibre9">Ariel</p></td></tr><tr class="calibre12"><td width="4" valign="TOP" class="calibre15"><p class="calibre9">15990</p></td><td width="8" valign="TOP" class="calibre15"><p class="calibre9">Bourgeois</p></td><td width="8" valign="TOP" class="calibre15"><p class="calibre9">Paulette</p></td></tr><tr class="calibre12"><td width="4" valign="TOP" class="calibre15"><p class="calibre9">2031</p></td><td width="8" valign="TOP" class="calibre15"><p class="calibre9">Brown</p></td><td width="8" valign="TOP" class="calibre15"><p class="calibre9">Margaret Wise</p></td></tr><tr class="calibre12"><td width="4" valign="TOP" class="calibre15"><p class="calibre9">25041</p></td><td width="8" valign="TOP" class="calibre15"><p class="calibre9">Margery Williams</p></td><td width="8" valign="TOP" class="calibre15"><p class="calibre9">Bianco</p></td></tr><tr class="calibre12"><td width="4" valign="TOP" class="calibre15"><p class="calibre9">16</p></td><td width="8" valign="TOP" class="calibre15"><p class="calibre9">Alcott</p></td><td width="8" valign="TOP" class="calibre15"><p class="calibre9">Louisa May</p></td></tr><tr class="calibre12"><td width="4" valign="TOP" class="calibre15"><p class="calibre9">115</p></td><td width="8" valign="TOP" class="calibre15"><p class="calibre9">Poe</p></td><td width="8" valign="TOP" class="calibre15"><p class="calibre9">Edgar Allen</p></td></tr></tbody></table></div><div class="NAVHEADER"><a name="THESUBJECTSTABLE"></a><p class="calibre9"><b class="calibre10">Table 3-27. The subjects table</b></p><table border="1" class="calibre"><thead class="calibre11"><tr class="calibre12"><th width="4" valign="TOP" class="calibre13"><p class="calibre9"><tt class="REPLACEABLE">id</tt></p></th><th width="8" valign="TOP" class="calibre13"><p class="calibre9"><tt class="REPLACEABLE">subject</tt></p></th><th width="8" valign="TOP" class="calibre13"><p class="calibre9"><tt class="REPLACEABLE">location</tt></p></th></tr></thead><tbody class="calibre14"><tr class="calibre12"><td width="4" valign="TOP" class="calibre15"><p class="calibre9">0</p></td><td width="8" valign="TOP" class="calibre15"><p class="calibre9">Arts</p></td><td width="8" valign="TOP" class="calibre15"><p class="calibre9">Creativity St</p></td></tr><tr class="calibre12"><td width="4" valign="TOP" class="calibre15"><p class="calibre9">2</p></td><td width="8" valign="TOP" class="calibre15"><p class="calibre9">Children's Books</p></td><td width="8" valign="TOP" class="calibre15"><p class="calibre9">Kids Ct</p></td></tr><tr class="calibre12"><td width="4" valign="TOP" class="calibre15"><p class="calibre9">3</p></td><td width="8" valign="TOP" class="calibre15"><p class="calibre9">Classics</p></td><td width="8" valign="TOP" class="calibre15"><p class="calibre9">Academic Rd</p></td></tr><tr class="calibre12"><td width="4" valign="TOP" class="calibre15"><p class="calibre9">4</p></td><td width="8" valign="TOP" class="calibre15"><p class="calibre9">Computers</p></td><td width="8" valign="TOP" class="calibre15"><p class="calibre9">Productivity Ave</p></td></tr><tr class="calibre12"><td width="4" valign="TOP" class="calibre15"><p class="calibre9">6</p></td><td width="8" valign="TOP" class="calibre15"><p class="calibre9">Drama</p></td><td width="8" valign="TOP" class="calibre15"><p class="calibre9">Main St</p></td></tr><tr class="calibre12"><td width="4" valign="TOP" class="calibre15"><p class="calibre9">9</p></td><td width="8" valign="TOP" class="calibre15"><p class="calibre9">Horror</p></td><td width="8" valign="TOP" class="calibre15"><p class="calibre9">Black Raven Dr</p></td></tr><tr class="calibre12"><td width="4" valign="TOP" class="calibre15"><p class="calibre9">15</p></td><td width="8" valign="TOP" class="calibre15"><p class="calibre9">Science Fiction</p></td><td width="8" valign="TOP" class="calibre15"><p class="calibre9">Main St</p></td></tr></tbody></table></div><p class="calibre9">By keeping the author and subject-specific data separate from the <tt class="REPLACEABLE">books</tt> table, the
      data is stored more efficiently. When multiple books need to be correlated with a particular subject, only the
      <tt class="REPLACEABLE">subject_id</tt> needs to be stored, rather than all of the data associated with that subject. This
      also makes for simpler maintenance of data associated with book subjects, such as the location in the store. Such data can
      be updated in a single, small table, rather than having to update all affected book records with such a
      modification. The same general principle applies to the <tt class="REPLACEABLE">authors</tt> table, and its relationship
      to the <tt class="REPLACEABLE">books</tt> table via the <tt class="REPLACEABLE">author_id</tt>.</p><p class="calibre9">Thoughtful planning can also help to avoid mistakes in choosing appropriate data types. For example, in the
      <tt class="REPLACEABLE">editions</tt> table, ISBN numbers are associated with Book Town book identification numbers.
      At first glance, it might seem that the ISBN number could be represented with a column of type
      <tt class="REPLACEABLE">integer</tt>. The design oversight in this case would be that not only can ISBNs sometimes
      contain character data, but a value of type <tt class="REPLACEABLE">integer</tt> would lose any leading zeroes in the
      ISBN (e.g., <span><i class="EMPHASIS">0451160916</i></span> would become 451160916).</p><p class="calibre9">For all of these reasons, good table design is not an issue to be overlooked in database administration.</p></div></div><div class="NAVHEADER"><hr width="100%" class="calibre6"/><table summary="Footer navigation table" width="100%" border="0" cellpadding="0" cellspacing="0" class="calibre"><tr class="calibre1"><td width="33%" valign="top" class="calibre3"><a href="x2632.htm" accesskey="P">Prev</a></td><td width="34%" valign="top" class="calibre4"><a href="book1.htm" accesskey="H">Home</a></td><td width="33%" valign="top" class="calibre5"><a href="c4890.htm" accesskey="N">Next</a></td></tr><tr class="calibre1"><td width="33%" valign="top" class="calibre3">Data Types</td><td width="34%" valign="top" class="calibre4"><a href="c1164.htm" accesskey="U">Up</a></td><td width="33%" valign="top" class="calibre5">Using SQL with PostgreSQL</td></tr></table></div></div>

{% endraw %}

