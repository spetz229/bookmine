---
layout: page
title: "Unknown"
prev: x21430.htm
next: x21649.htm
book_path: books/o-reilly-practical-postgresql_oeb/
---
{% include JB/setup %}
{% raw %}
<div>
<div class="NAVHEADER"><table summary="Header navigation table" width="100%" border="0" cellpadding="0" cellspacing="0" class="calibre"><tr class="calibre1"><th colspan="3" class="calibre2">Practical PostgreSQL</th></tr><tr class="calibre1"><td width="10%" valign="bottom" class="calibre3"><a href="x21430.htm" accesskey="P">Prev</a></td><td width="80%" valign="bottom" class="calibre4">Chapter 13. LXP</td><td width="10%" valign="bottom" class="calibre5"><a href="x21649.htm" accesskey="N">Next</a></td></tr></table><hr width="100%" class="calibre6"/></div><div class="NAVHEADER"><h1 class="calibre7"><a name="LXPVARIABLES" class="calibre8">LXP Variables and Objects</a></h1><p class="calibre9">A <span><i class="EMPHASIS">variable</i></span> is a modifiable value in memory that is accessed through an associated name. This name
    is used to identify, and subsequently utilize in some fashion, the value that it represents. The specific use varies based on
    the LXP tag employed.</p><p class="calibre9">LXP also implements a special type of data structure called an <span><i class="EMPHASIS">object</i></span>. An LXP object is typically
    used to identify several associated variable values through a common name. The particular value you wish to address in an LXP
    object is identified either by a trailing subscript (a numeric or text value, in square brackets, such as
    <tt class="REPLACEABLE">example[0]</tt>) or a dot-notated trailing identifier (such as
    <tt class="REPLACEABLE">for.count</tt>).</p><p class="calibre9">The concept of an LXP object is similar to the programmatic concept of arrays and objects in traditional programming
    languages, though LXP objects are generally much simpler in their nature. In practice, the only difference between variables
    and objects is syntactic, having to do with how values are identified. Variables are identified with a plain name (e.g.,
    <tt class="REPLACEABLE">my_value</tt>), while objects are identified by a name and a secondary identifier (e.g.,
    <tt class="REPLACEABLE">my_value[0]</tt>, <tt class="REPLACEABLE">my_value[1]</tt>, <tt class="REPLACEABLE">my_value.size</tt>).</p><p class="calibre9">From a programmer's perspective, variables and objects are considered <span><i class="EMPHASIS">global</i></span>, meaning that once
    set, they are available anywhere in a document. Included documents will also have access to the variables which are set in
    memory.</p><div class="NAVHEADER"><h2 class="SECT"><a name="AEN21509" class="calibre8">Naming Conventions</a></h2><p class="calibre9">The valid characters with which you may define an LXP variable's name are:</p><p class="calibre9"> </p><p class="calibre9"></p><ul class="calibre21"><li class="calibre22"><p class="calibre9">Any letter (<span><i class="EMPHASIS">a–z</i></span>, <span><i class="EMPHASIS">A–Z</i></span>)</p></li><li class="calibre22"><p class="calibre9">Any digit (<span><i class="EMPHASIS">0–9</i></span>)</p></li><li class="calibre22"><p class="calibre9">The underscore ( <span><i class="EMPHASIS">_</i></span> )</p></li></ul>
<p class="calibre9">The valid characters with which you define a complete LXP object's name are:</p><p class="calibre9"> </p><p class="calibre9"></p><ul class="calibre21"><li class="calibre22"><p class="calibre9">Any letter (<span><i class="EMPHASIS">a–z</i></span>, <span><i class="EMPHASIS">A–Z</i></span>)</p></li><li class="calibre22"><p class="calibre9">Any digit (<span><i class="EMPHASIS">0–9</i></span>)</p></li><li class="calibre22"><p class="calibre9">The underscore ( <span><i class="EMPHASIS">_</i></span> )</p></li><li class="calibre22"><p class="calibre9">The period (<span><i class="EMPHASIS">.</i></span>)</p></li><li class="calibre22"><p class="calibre9">Square brackets (<span><i class="EMPHASIS">[ ]</i></span> )</p></li></ul>
<p class="calibre9">Note that while numbers are the most common form of subscript (since they are used implicitly by CGI arrays; see
      <a href="x21491.htm#CGIARRAYS">the Section called <i class="EMPHASIS">CGI Arrays</i></a>"), any legal characters may be used within square brackets following an object's name (e.g.,
      <tt class="REPLACEABLE">pseudo_array[example]</tt>).</p><p class="calibre9">When parsing the attributes of an LXP tag, some special character symbols may be used to
      <span><i class="EMPHASIS">substitute</i></span> the value of a variable directly into either the attribute's name or value (see <a href="x21718.htm">the Section called <i class="EMPHASIS">Tag Parsing</i></a>" for more about this technique). These characters are: the dollar sign
      (<tt class="REPLACEABLE">$</tt>) for variables, and the at sign (<tt class="REPLACEABLE">@</tt>) for objects.</p><p class="calibre9">It <span><i class="EMPHASIS">must</i></span> be understood that while special character symbols are sometimes used to substitute
      variable values into a tag's attributes, these character symbols are <span><i class="EMPHASIS">not</i></span> part of a variable's name and
      should <span><i class="EMPHASIS">not</i></span> be used in contexts where a literal variable or object name is expected.</p></div><div class="NAVHEADER"><h2 class="SECT"><a name="AEN21555" class="calibre8">Using Variables and Objects</a></h2><p class="calibre9">Variable values can be displayed anywhere in the body of an LXP region through the
      <tt class="REPLACEABLE">&lt;putvar&gt;</tt> tag. Here is the syntax for
      <tt class="REPLACEABLE">&lt;putvar&gt;</tt>, where <tt class="REPLACEABLE">variablename</tt> is the name of the
      variable whose value is to be displayed:</p><pre class="SCREEN">&lt;putvar name="<tt class="REPLACEABLE"><i class="EMPHASIS">variablename</i></tt>" /&gt;</pre><p class="calibre9">Variable values may also be set and reset via the <tt class="REPLACEABLE">&lt;setvar&gt;</tt> and
      <tt class="REPLACEABLE">&lt;setvars&gt;</tt> tags. Here is the syntax for these tags:</p><pre class="SCREEN">&lt;setvar <tt class="REPLACEABLE"><i class="EMPHASIS">variablename</i></tt>="<tt class="REPLACEABLE"><i class="EMPHASIS">variablevalue</i></tt>" /&gt;
&lt;setvars <tt class="REPLACEABLE"><i class="EMPHASIS">variable1</i></tt>="<tt class="REPLACEABLE"><i class="EMPHASIS">value1</i></tt>"
          <tt class="REPLACEABLE"><i class="EMPHASIS">variable2</i></tt>="<tt class="REPLACEABLE"><i class="EMPHASIS">value2</i></tt>"
          [...]
          /&gt;</pre><p class="calibre9">Like variables, the values referenced by objects can also be displayed and set by the
      <tt class="REPLACEABLE">&lt;putvar&gt;</tt> and <tt class="REPLACEABLE">&lt;setvar&gt;</tt> tags.</p><div class="NAVHEADER"><blockquote class="NOTE"><p class="calibre9"><b class="calibre10">Note: </b>Remember that the use of either a dot (period) or square brackets in setting a name with
        <tt class="REPLACEABLE">&lt;setvar&gt;</tt> implies that you are setting a variable value to an
        <span><i class="EMPHASIS">object</i></span>, rather than a plain variable. Such a value can therefore only be substituted later with the
        at sign, rather than the dollar sign.</p></blockquote></div></div><div class="NAVHEADER"><h2 class="SECT"><a name="AEN21580" class="calibre8">CGI Arguments</a></h2><p class="calibre9">Like many web-based programming languages, LXP keeps an internal list of CGI <span><i class="EMPHASIS">arguments</i></span> that have
      been passed to it. These arguments are implicitly treated by LXP as variables.</p><div class="NAVHEADER"><blockquote class="NOTE"><p class="calibre9"><b class="calibre10">Note: </b>For the purpose of this chapter, the terms "argument" and "variable" will be nearly synonymous.  In context, the
        term "argument" applies specifically to form-passed variables, while "variable" applies to any variable set in memory
        (either passed by a form, or set by the developer).</p></blockquote></div><p class="calibre9">Arguments are each passed from forms with a <span><i class="EMPHASIS">name</i></span> and a <span><i class="EMPHASIS">value</i></span>.  For each
      argument passed to an LXP document (e.g., via an HTML form), a single variable is created with the passed argument used as
      the variable's name. </p><p class="calibre9">If two arguments have the same name, the last value passed by the form is used (with the exception of array values;
      see <a href="x21491.htm#CGIARRAYS">the Section called <i class="EMPHASIS">CGI Arrays</i></a>").</p></div><div class="NAVHEADER"><h2 class="SECT"><a name="CGIARRAYS" class="calibre8">CGI Arrays</a></h2><p class="calibre9">Objects are useful when handling CGI <span><i class="EMPHASIS">arrays</i></span>. Ordinarily, if more than one argument value is
      passed to an LXP document with the same argument name, the value of the last passed argument is used, and any preceding
      values are ignored. However, by passing a CGI argument with a name ending in empty square brackets (e.g.,
      <tt class="REPLACEABLE">&lt;select name="test[]"&gt;</tt>), an LXP object will automatically have an array of values
      assigned to an object bearing the name preceding the square brackets.</p><p class="calibre9">In other words, any argument passed from a CGI form whose name ends in square brackets (e.g.,
      <tt class="REPLACEABLE">test[]</tt>) will be implicitly treated by LXP as an array of values. When such an argument is
      passed to LXP by a submitted form, each separate value found for it is automatically set as a separate variable value in
      memory, with an incrementing numeric value between the brackets following the object's name.</p><p class="calibre9">For example, if an HTML form passes an argument named <tt class="REPLACEABLE">test[]</tt> that has three values
      set to its name, three variable values will be set for a <tt class="REPLACEABLE">test</tt> object. These values may be
      referenced as <tt class="REPLACEABLE">test[0]</tt>, <tt class="REPLACEABLE">test[1]</tt>, and <tt class="REPLACEABLE">test[2]</tt>, respectively.</p></div><div class="NAVHEADER"><h2 class="SECT"><a name="AEN21612" class="calibre8">Direct SQL objects</a></h2><p class="calibre9">During a direct SQL query's execution, a special object called <tt class="REPLACEABLE">this</tt> is used to
      reference column values in the result set. Each column selected from the result set can be referenced as
      <tt class="REPLACEABLE">this.</tt><tt class="REPLACEABLE"><i class="EMPHASIS">column_name</i></tt> where <tt class="REPLACEABLE"><i class="EMPHASIS">column_name</i></tt>
      is the name of the column.</p><p class="calibre9">Additionally, an object called <tt class="REPLACEABLE">sql</tt> is created with meta-information about the query.
      These pieces of information include the number of the current row being accessed
      (<tt class="REPLACEABLE">sql.row</tt>), the offset of the current row being accessed
      (<tt class="REPLACEABLE">sql.offset</tt>), the number of rows last selected by a SQL query
      (<tt class="REPLACEABLE">sql.numrows</tt>), and the number of columns last selected by a SQL query
      (<tt class="REPLACEABLE">sql.numcols</tt>, or <tt class="REPLACEABLE">sql.numfields</tt>).</p></div><div class="NAVHEADER"><h2 class="SECT"><a name="AEN21626" class="calibre8">Global LXP objects</a></h2><p class="calibre9">Two special objects named <tt class="REPLACEABLE">lxp</tt> and <tt class="REPLACEABLE">env</tt> are
      pre-defined system objects that can supply information about the LXP system and environment variables.</p><p class="calibre9">Any environment variable set by Apache's CGI configuration (e.g., <tt class="REPLACEABLE">REMOTE_ADDR</tt>) can
      be accessed by referencing the name of the variable as a dot-notated identifier through the
      <tt class="REPLACEABLE">env</tt> object. For example, the <tt class="REPLACEABLE">env.REMOTE_ADDR</tt> variable
      value identifies the address of the remote client accessing the current document (if that feature is enabled in
      Apache).</p><p class="calibre9">The <tt class="REPLACEABLE">lxp</tt> object is reserved for system purposes. As of Version 0.8, only three values
      are defined. The most useful of these is the <tt class="REPLACEABLE">lxp.self</tt> value, which describes the URI which
      Apache received for the current LXP request (e.g., <span><i class="EMPHASIS">/app/index.lxp</i></span>).</p><p class="calibre9">Additionally, the <tt class="REPLACEABLE">lxp.version</tt> variable value contains the current version of the LXP
      software being used, and the <tt class="REPLACEABLE">lxp.copyright</tt> variable value contains the copyright on the
      software.</p><p class="calibre9">Users submitting data to an LXP document are not able to pass variables beginning with
      <tt class="REPLACEABLE">lxp.</tt> via a <tt class="REPLACEABLE">GET</tt> or <tt class="REPLACEABLE">POST</tt>
      request. Thus, any variable beginning with <tt class="REPLACEABLE">lxp.</tt> is a <span><i class="EMPHASIS">protected</i></span>
      variable, and can only be set by an LXP document through the <tt class="REPLACEABLE">&lt;setvar&gt;</tt> tag. This can
      be useful in maintaining the integrity of sensitive variables, such as the results of password-based authentication.</p></div></div><div class="NAVHEADER"><hr width="100%" class="calibre6"/><table summary="Footer navigation table" width="100%" border="0" cellpadding="0" cellspacing="0" class="calibre"><tr class="calibre1"><td width="33%" valign="top" class="calibre3"><a href="x21430.htm" accesskey="P">Prev</a></td><td width="34%" valign="top" class="calibre4"><a href="book1.htm" accesskey="H">Home</a></td><td width="33%" valign="top" class="calibre5"><a href="x21649.htm" accesskey="N">Next</a></td></tr><tr class="calibre1"><td width="33%" valign="top" class="calibre3">Understanding LXP Mark-Up</td><td width="34%" valign="top" class="calibre4"><a href="lxp.htm" accesskey="U">Up</a></td><td width="33%" valign="top" class="calibre5">Using Cookies with LXP</td></tr></table></div></div>

{% endraw %}

