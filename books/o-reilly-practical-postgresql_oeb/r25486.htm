---
layout: page
title: "Unknown"
prev: r25397.htm
next: r25669.htm
book_path: books/o-reilly-practical-postgresql_oeb/
---
{% include JB/setup %}
{% raw %}
<div>
<div class="NAVHEADER"><table summary="Header navigation table" width="100%" border="0" cellpadding="0" cellspacing="0" class="calibre"><tr class="calibre1"><th colspan="3" class="calibre2">Practical PostgreSQL</th></tr><tr class="calibre1"><td width="10%" valign="bottom" class="calibre3"><a href="r25397.htm" accesskey="P">Prev</a></td><td width="80%" valign="bottom" class="calibre4"/><td width="10%" valign="bottom" class="calibre5"><a href="r25669.htm" accesskey="N">Next</a></td></tr></table><hr width="100%" class="calibre6"/></div><h1 class="calibre7"><a name="SQL-CREATETYPE" class="calibre8">CREATE TYPE</a></h1><div class="NAVHEADER"><a name="AEN25490"></a><h2 class="SECT">Name</h2>CREATE TYPE -- Defines a new data type for use in the database.</div><div class="NAVHEADER"><a name="AEN25493"></a><h2 class="SECT">Synopsis</h2><pre class="SCREEN">CREATE TYPE <tt class="REPLACEABLE"><i class="EMPHASIS">typename</i></tt> ( INPUT = <tt class="REPLACEABLE"><i class="EMPHASIS">input_function</i></tt>, OUTPUT = <tt class="REPLACEABLE"><i class="EMPHASIS">output_function</i></tt>
      , INTERNALLENGTH = { <tt class="REPLACEABLE"><i class="EMPHASIS">internallength</i></tt> | VARIABLE }
    [ , EXTERNALLENGTH = { <tt class="REPLACEABLE"><i class="EMPHASIS">externallength</i></tt> | VARIABLE } ]
    [ , DEFAULT = "<tt class="REPLACEABLE"><i class="EMPHASIS">default</i></tt>" ]
    [ , ELEMENT = <tt class="REPLACEABLE"><i class="EMPHASIS">element</i></tt> ] [ , DELIMITER = <tt class="REPLACEABLE"><i class="EMPHASIS">delimiter</i></tt> ]
    [ , SEND = <tt class="REPLACEABLE"><i class="EMPHASIS">send_function</i></tt> ] [ , RECEIVE = <tt class="REPLACEABLE"><i class="EMPHASIS">receive_function</i></tt> ]
    [ , PASSEDBYVALUE ]
    [ , ALIGNMENT = <tt class="REPLACEABLE"><i class="EMPHASIS">alignment</i></tt> ]
    [ , STORAGE = <tt class="REPLACEABLE"><i class="EMPHASIS">storage</i></tt> ] )</pre><div class="NAVHEADER"><a name="R2-SQL-CREATETYPE-1"></a><h3 class="AUTHOR">Parameters</h3><p class="calibre9">
</p><p class="calibre9"></p><div class="NAVHEADER"><dl class="calibre9"><dt class="NAVHEADER"><tt class="REPLACEABLE"><i class="EMPHASIS">typename</i></tt></dt><dd class="calibre16"><p class="calibre9">The name of the new type being created, which may be up to 30 characters in length.  All type names must be unique within a database, and may not begin with an underscore (which is reserved for implicit array types).</p></dd><dt class="NAVHEADER"><tt class="REPLACEABLE"><i class="EMPHASIS">internallength</i></tt></dt><dd class="calibre16"><p class="calibre9">The internal length of the new type, in bytes.</p></dd><dt class="NAVHEADER"><tt class="REPLACEABLE"><i class="EMPHASIS">externallength</i></tt></dt><dd class="calibre16"><p class="calibre9">The optional external (displayed) length of the new type.</p></dd><dt class="NAVHEADER"><tt class="REPLACEABLE"><i class="EMPHASIS">input_function</i></tt></dt><dd class="calibre16"><p class="calibre9">The name of the new type's input function.  You must have already defined the function using <tt class="REPLACEABLE">CREATE FUNCTION</tt>, and it must act to convert data of the type's external form into the type's internal form.</p></dd><dt class="NAVHEADER"><tt class="REPLACEABLE"><i class="EMPHASIS">output_function</i></tt></dt><dd class="calibre16"><p class="calibre9">The name of the new type's output function.  This function must convert data of the type's internal form into its displayable form.</p></dd><dt class="NAVHEADER"><tt class="REPLACEABLE"><i class="EMPHASIS">element</i></tt></dt><dd class="calibre16"><p class="calibre9">The data type of individual array elements which this type addresses, if you intend to create an array type manually. The <tt class="REPLACEABLE"><i class="EMPHASIS">element</i></tt> must be fixed-length data type.</p></dd><dt class="NAVHEADER"><tt class="REPLACEABLE"><i class="EMPHASIS">delimiter</i></tt></dt><dd class="calibre16"><p class="calibre9">The value delimiter for the implicitly created array associated with the new type (<tt class="REPLACEABLE"><i class="EMPHASIS">typename</i></tt><tt class="REPLACEABLE">[]</tt>).</p></dd><dt class="NAVHEADER"><tt class="REPLACEABLE"><i class="EMPHASIS">default</i></tt></dt><dd class="calibre16"><p class="calibre9">The default value for the new data type. If you do not specify a default, the default value for an unspecified column will fall back to either a table-level <tt class="REPLACEABLE">DEFAULT</tt> constraint or <tt class="REPLACEABLE">NULL</tt>.</p></dd><dt class="NAVHEADER"><tt class="REPLACEABLE"><i class="EMPHASIS">send_function</i></tt></dt><dd class="calibre16"><p class="calibre9">The name of the new type's <tt class="REPLACEABLE">send</tt> function. This function would convert data of the type into a form that can be transferred to another machine, but is not used by PostgreSQL as of 7.1.x, and can be omitted.</p></dd><dt class="NAVHEADER"><tt class="REPLACEABLE"><i class="EMPHASIS">receive_function</i></tt></dt><dd class="calibre16"><p class="calibre9">The name of the new type's <tt class="REPLACEABLE">receive</tt> function. This function would accept data of the form returned by <tt class="REPLACEABLE"><i class="EMPHASIS">send_function</i></tt>, and convert that into the type's internal form, but it is also not used by PostgreSQL as of 7.1.x, and can be omitted.</p></dd><dt class="NAVHEADER"><tt class="REPLACEABLE">PASSEDBYVALUE</tt></dt><dd class="calibre16"><p class="calibre9">The optional <tt class="REPLACEABLE">PASSEDBYVALUE</tt> keyword indicates that operators and functions that use this data type should be passed the argument by value, rather than by reference (the default). You may not use this option on types whose internal representation is more than four bytes in length.</p></dd><dt class="NAVHEADER"><tt class="REPLACEABLE"><i class="EMPHASIS">alignment</i></tt></dt><dd class="calibre16"><p class="calibre9">The storage alignment that this type will require.  This must be either <tt class="REPLACEABLE">char</tt>, <tt class="REPLACEABLE">int2</tt>, <tt class="REPLACEABLE">int4</tt>, or <tt class="REPLACEABLE">double</tt>. If unspecified, <tt class="REPLACEABLE">int4</tt> will be chosen by default.</p></dd><dt class="NAVHEADER"><tt class="REPLACEABLE"><i class="EMPHASIS">storage</i></tt></dt><dd class="calibre16"><p class="calibre9">The storage technique that will be used for the type. Set this to one of <tt class="REPLACEABLE">plain</tt>, <tt class="REPLACEABLE">external</tt>, <tt class="REPLACEABLE">extended</tt>, or <tt class="REPLACEABLE">main</tt>. If left unspecified, the storage type will default to <tt class="REPLACEABLE">plain</tt>.</p></dd></dl></div>
</div><div class="NAVHEADER"><a name="R2-SQL-CREATETYPE-2"></a><h3 class="AUTHOR">Results</h3><p class="calibre9"> </p><p class="calibre9"></p><div class="NAVHEADER"><dl class="calibre9"><dt class="NAVHEADER"><tt class="REPLACEABLE">CREATE</tt></dt><dd class="calibre16"><p class="calibre9">The message returned when a type is successfully created.</p></dd></dl></div>
</div></div><div class="NAVHEADER"><a name="R1-SQL-CREATETYPE-1"></a><h2 class="SECT">Description</h2><p class="calibre9">Use the <tt class="REPLACEABLE">CREATE TYPE</tt> command to register a new, user-defined data type within the
    current database. The PostgreSQL user that issues the command becomes the owner of the data type.</p><p class="calibre9">For a type to be created, it must use two user-defined functions (written in C). These functions are the input and
    output functions of the data type. The input function converts the type's external representation into an internal
    representation that can be used by the system objects associated with the type.  The output function converts the internal
    representation back to an external representation.</p><p class="calibre9">Both the input and output functions must take a single argument of the <tt class="REPLACEABLE">opaque</tt> type.
    The output function must return a value of type <tt class="REPLACEABLE">opaque</tt>, while the input function should
    return a value of the type you intend to create.  Notice that this is done before the type is actually created.</p><p class="calibre9">You can set the type as either fixed or variable length. If you intend to create a fixed-length type, set
    <tt class="REPLACEABLE"><i class="EMPHASIS">internallength</i></tt> to set its numeric length, in bytes. If you intend to create a variable-length
    type, use the <tt class="REPLACEABLE">VARIABLE</tt> keyword instead of the <tt class="REPLACEABLE"><i class="EMPHASIS">internallength</i></tt>
    parameter, and the length will be handled in the same way as for the <tt class="REPLACEABLE">text</tt> data type. 
    Specify the external length in the same way, using either a numeric value for <tt class="REPLACEABLE"><i class="EMPHASIS">externallength</i></tt>, or
    the <tt class="REPLACEABLE">VARIABLE</tt> keyword.</p><p class="calibre9">When a new type is created, PostgreSQL automatically adds an implicit array type for the new data type. Internally,
    this implicit array type is named <tt class="REPLACEABLE"><i class="EMPHASIS">_typename</i></tt> (with a leading underscore). Any reference to a data
    type called <tt class="REPLACEABLE"><i class="EMPHASIS">typename</i></tt><tt class="REPLACEABLE">[]</tt> will automatically be translated to the
    internal array type (<tt class="REPLACEABLE"><i class="EMPHASIS">_typename</i></tt>).</p><p class="calibre9">If you wish to provide a delimiter character for the array type, use <tt class="REPLACEABLE"><i class="EMPHASIS">delimiter</i></tt> to do so.
    This is the character used to separate array elements within array constants passed to PostgreSQL (e.g.,
    <tt class="REPLACEABLE">{1,2,3}</tt>). This is also the character used to separate elements in the external display of values for this
    array type. By default the delimiter is set to a comma.</p><p class="calibre9">If you choose to manually create an array data type, you may provide the PostgreSQL <tt class="REPLACEABLE">array_in</tt> and
    <tt class="REPLACEABLE">array_out</tt> functions as the input and output function, respectively. You may then use the
    <tt class="REPLACEABLE">ELEMENT</tt> keyword to specify the data type of the array elements.</p><p class="calibre9">To define a system-wide default value for insertion on a column of the new data type (which would ordinarily default to
    <tt class="REPLACEABLE">NULL</tt>, in instances where a value is neither provided by a user, or by a <tt class="REPLACEABLE">DEFAULT</tt>
    constraint), use the <tt class="REPLACEABLE">DEFAULT</tt> keyword. Note that, as of PostgreSQL 7.1.x, this must be the
    <span><i class="EMPHASIS">internal</i></span> representation of the default value.</p><p class="calibre9">The <tt class="REPLACEABLE"><i class="EMPHASIS">alignment</i></tt> value dictates the internal storage alignment of the new data type. Data types
    created with a variable internal length must be either <tt class="REPLACEABLE">int4</tt> or <tt class="REPLACEABLE">double</tt>.</p><p class="calibre9">The <tt class="REPLACEABLE"><i class="EMPHASIS">storage</i></tt> value determines the internal storage method. Data types with fixed internal
    length can only be set to <tt class="REPLACEABLE">plain</tt>. Data types with variable internal length can be set to
    <tt class="REPLACEABLE">plain</tt>, <tt class="REPLACEABLE">extended</tt>, <tt class="REPLACEABLE">external</tt>, or <tt class="REPLACEABLE">main</tt>.</p><p class="calibre9">The <tt class="REPLACEABLE">plain</tt> method causes data to be stored in an uncompressed, literal representation. This
    representation is subject to a maximum length of 8 kilobytes. The <tt class="REPLACEABLE">extended</tt> method allows
    values that go over this limit to be compressed, as well as to be stored outside of the physical location of the table if the
    size of the value goes over the physical limit through PostgreSQL's <span><i class="EMPHASIS">TOAST</i></span> extension (<span><i class="EMPHASIS">The
    Oversized Attribute Storage Technique</i></span>, coined by Tom Lane).</p><p class="calibre9">The <tt class="REPLACEABLE">external</tt> method is similar to the <tt class="REPLACEABLE">extended</tt> method, but does not
    attempt to compress the value before using TOAST to store values over the physical limit of the table. The
    <tt class="REPLACEABLE">main</tt> method is also similar to the <tt class="REPLACEABLE">extended</tt> method, in that
    it supports compression and TOAST, but it prefers to be maintained physically within the main table unless there is
    no other storage alternative.</p></div><div class="NAVHEADER"><a name="R1-SQL-CREATETYPE-2"></a><h2 class="SECT">Example</h2><p class="calibre9">The following example demonstrates the creation of a new data type called <tt class="REPLACEABLE">zero</tt>, which
    is a numeric data type always set to 0. First, the input and output functions are created.
    Then, the type itself is created, referencing those functions, as follows.</p><pre class="SCREEN">booktown=# <tt class="REPLACEABLE"><b class="calibre10">CREATE FUNCTION zero_out(opaque) RETURNS opaque</b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">                AS '/usr/local/pgsql/lib/zero.so' LANGUAGE 'C';</b></tt>
CREATE
booktown=# <tt class="REPLACEABLE"><b class="calibre10">CREATE FUNCTION zero_in(opaque) RETURNS zero</b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">                AS '/usr/local/pgsql/lib/zero.so' LANGUAGE 'C';</b></tt>
NOTICE:  ProcedureCreate: type 'zero' is not yet defined
CREATE
booktown=# <tt class="REPLACEABLE"><b class="calibre10">CREATE TYPE zero (internallength = 16, </b></tt>
booktown(# <tt class="REPLACEABLE"><b class="calibre10">                  input = zero_in, output = zero_out);</b></tt>
CREATE</pre></div><div class="NAVHEADER"><hr width="100%" class="calibre6"/><table summary="Footer navigation table" width="100%" border="0" cellpadding="0" cellspacing="0" class="calibre"><tr class="calibre1"><td width="33%" valign="top" class="calibre3"><a href="r25397.htm" accesskey="P">Prev</a></td><td width="34%" valign="top" class="calibre4"><a href="book1.htm" accesskey="H">Home</a></td><td width="33%" valign="top" class="calibre5"><a href="r25669.htm" accesskey="N">Next</a></td></tr><tr class="calibre1"><td width="33%" valign="top" class="calibre3">CREATE TRIGGER</td><td width="34%" valign="top" class="calibre4"><a href="c22759.htm" accesskey="U">Up</a></td><td width="33%" valign="top" class="calibre5">CREATE USER</td></tr></table></div></div>

{% endraw %}

