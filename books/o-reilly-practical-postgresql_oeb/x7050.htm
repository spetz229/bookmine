---
layout: page
title: "Unknown"
prev: x5802.htm
next: x7234.htm
book_path: books/o-reilly-practical-postgresql_oeb/
---
{% include JB/setup %}
{% raw %}
<div>
<div class="NAVHEADER"><table summary="Header navigation table" width="100%" border="0" cellpadding="0" cellspacing="0" class="calibre"><tr class="calibre1"><th colspan="3" class="calibre2">Practical PostgreSQL</th></tr><tr class="calibre1"><td width="10%" valign="bottom" class="calibre3"><a href="x5802.htm" accesskey="P">Prev</a></td><td width="80%" valign="bottom" class="calibre4">Chapter 4. Using SQL with PostgreSQL</td><td width="10%" valign="bottom" class="calibre5"><a href="x7234.htm" accesskey="N">Next</a></td></tr></table><hr width="100%" class="calibre6"/></div><div class="NAVHEADER"><h1 class="calibre7"><a name="AEN7050" class="calibre8">Modifying Rows with UPDATE</a></h1><p class="calibre9">Once data has been inserted into rows within the database, those rows can have one or more of their column values
      modified through use of the SQL <tt class="REPLACEABLE">UPDATE</tt> command. Column values may be updated either with
      constants, identifiers to other data sets, or expressions. They may apply to an entire column, or a subset of a column's
      values through specified conditions. The <tt class="REPLACEABLE">UPDATE</tt> command uses the following syntax:</p><pre class="SCREEN">  UPDATE [ ONLY ] <tt class="REPLACEABLE"><i class="EMPHASIS">table</i></tt> SET
         <tt class="REPLACEABLE"><i class="EMPHASIS">column</i></tt> = <tt class="REPLACEABLE"><i class="EMPHASIS">expression</i></tt> [, ...]
         [ FROM <tt class="REPLACEABLE"><i class="EMPHASIS">source</i></tt> ]
         [ WHERE <tt class="REPLACEABLE"><i class="EMPHASIS">condition</i></tt> ]</pre><p class="calibre9"> </p><p class="calibre9"></p><div class="NAVHEADER"><dl class="calibre9"><dt class="NAVHEADER"><tt class="REPLACEABLE">UPDATE [ ONLY ] </tt><tt class="REPLACEABLE"><i class="EMPHASIS">table</i></tt></dt><dd class="calibre16"><p class="calibre9">              The <tt class="REPLACEABLE">ONLY</tt> keyword may be used to indicate that only the table
              <tt class="REPLACEABLE"><i class="EMPHASIS">table</i></tt> should be updated, and none of its sub-tables. This is only relevant if
              <tt class="REPLACEABLE"><i class="EMPHASIS">table</i></tt> is inherited by any other tables.
            </p></dd><dt class="NAVHEADER"><tt class="REPLACEABLE">SET </tt><tt class="REPLACEABLE"><i class="EMPHASIS">column</i></tt> = <tt class="REPLACEABLE"><i class="EMPHASIS">expression</i></tt> [, ...]</dt><dd class="calibre16"><p class="calibre9">              The required <tt class="REPLACEABLE">SET</tt> clause is followed by an update expression for each
              column name that needs to have its values modified, separated by commas. This expression is always of the form
              <tt class="REPLACEABLE"><i class="EMPHASIS">column</i></tt><tt class="REPLACEABLE"> = </tt><tt class="REPLACEABLE"><i class="EMPHASIS">expression</i></tt>, where <tt class="REPLACEABLE"><i class="EMPHASIS">column</i></tt> is the name of the column
              to be updated (which may not be aliased, or dot-notated), and where <tt class="REPLACEABLE"><i class="EMPHASIS">expression</i></tt> describes the
              new value to be inserted into the column.
            </p></dd><dt class="NAVHEADER"><tt class="REPLACEABLE">FROM </tt><tt class="REPLACEABLE"><i class="EMPHASIS">source</i></tt></dt><dd class="calibre16"><p class="calibre9">              The <tt class="REPLACEABLE">FROM</tt> clause is a non-standard PostgreSQL extension that allows
              table columns from other data sets to update a column's value.
            </p></dd><dt class="NAVHEADER"><tt class="REPLACEABLE">WHERE </tt><tt class="REPLACEABLE"><i class="EMPHASIS">condition</i></tt></dt><dd class="calibre16"><p class="calibre9">              The <tt class="REPLACEABLE">WHERE</tt> clause describes the <tt class="REPLACEABLE"><i class="EMPHASIS">condition</i></tt> upon which a row in <tt class="REPLACEABLE"><i class="EMPHASIS">table</i></tt> will
              be updated. If unspecified, <span><i class="EMPHASIS">all values</i></span> in <tt class="REPLACEABLE"><i class="EMPHASIS">column</i></tt> will be modified.
              This may be used to qualify sources in the <tt class="REPLACEABLE">FROM</tt> clause, as you would in a
              <tt class="REPLACEABLE">SELECT</tt> statement.
            </p></dd></dl></div>
<p class="calibre9"><a href="x7050.htm#ASIMPLEUPDATE">Example 4-53</a> demonstrates a simple <tt class="REPLACEABLE">UPDATE</tt> statement. It instructs
      PostgreSQL to update the value in the <tt class="REPLACEABLE">stock</tt> table's
      <tt class="REPLACEABLE">retail</tt> column with the floating-point constant value of 29.95. The
      <tt class="REPLACEABLE">WHERE</tt> clause constrains any modifications to rows that match the criteria described
      by it.</p><div class="NAVHEADER"><a name="ASIMPLEUPDATE"></a><p class="calibre9"><b class="calibre10">Example 4-53. A simple UPDATE</b></p><pre class="SCREEN">booktown=# <tt class="REPLACEABLE"><b class="calibre10">SELECT retail FROM stock</b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">       WHERE isbn = '0590445065';</b></tt>
 retail
--------
  23.95
(1 row)

booktown=# <tt class="REPLACEABLE"><b class="calibre10">UPDATE stock</b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">       SET retail = 25.95</b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">       WHERE isbn = '0590445065';</b></tt>
UPDATE 1
booktown=# <tt class="REPLACEABLE"><b class="calibre10">SELECT retail FROM stock</b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">       WHERE isbn = '0590445065';</b></tt>
 retail
--------
  25.95
(1 row)</pre></div><p class="calibre9">The resultant <tt class="REPLACEABLE">UPDATE 1</tt> message from <a href="x7050.htm#ASIMPLEUPDATE">Example 4-53</a> indicates that one
      record was successfully updated. Even if the value that is modified is identical to the record previously stored, it is
      considered an update, and the database files on disk are still modified as a result of the statement.</p><div class="NAVHEADER"><h2 class="SECT"><a name="UPDATINGWHOLECOLUMNS" class="calibre8">Updating Entire Columns</a></h2><p class="calibre9">If the <tt class="REPLACEABLE">WHERE</tt> clause is omitted, an <tt class="REPLACEABLE">UPDATE</tt>
        statement will modify each of the values within the entire specified column. This is generally most useful when updating
        columns with an <tt class="REPLACEABLE"><i class="EMPHASIS">expression</i></tt> rather than a constant value. When an expression is specified in the
        <tt class="REPLACEABLE">SET</tt> clause, it is re-evaluated just before updating each row. Thus, each row is updated
        to a value determined dynamically by the interpreted expression's value for each row. This is demonstrated in <a href="x7050.htm#UPDATINGENTIRECOLUMNS">Example 4-54</a>.  </p><p class="calibre9"><a href="x7050.htm#UPDATINGENTIRECOLUMNS">Example 4-54</a> demonstrates using an <tt class="REPLACEABLE">UPDATE</tt> statement on
        the <tt class="REPLACEABLE">stock</tt> table's <tt class="REPLACEABLE">retail</tt> column. It uses a mathematical
        expression to raise the retail price of each stocked book. The expression itself has several components, separated by
        parentheses to enforce order of execution.</p><p class="calibre9">The <tt class="REPLACEABLE">(retail / cost)</tt> sub-expression determines the current profit margin of the
        book, which is then incremented by one tenth with the <tt class="REPLACEABLE">+</tt> operator and a floating-point
        constant of 0.1. The <tt class="REPLACEABLE">0.1::numeric</tt> syntax explicitly casts the
        floating point constant to a value of type <tt class="REPLACEABLE">numeric</tt>.  This is necessary due to the result
        of the division sub-expression returning a value of type <tt class="REPLACEABLE">numeric</tt>. Finally, this new
        profit margin is multiplied by the base cost from the <tt class="REPLACEABLE">cost</tt> column, resulting in the new
        price with which the <tt class="REPLACEABLE">retail</tt> column should be updated.</p><div class="NAVHEADER"><a name="UPDATINGENTIRECOLUMNS"></a><p class="calibre9"><b class="calibre10">Example 4-54. Updating entire columns</b></p><pre class="SCREEN">booktown=# <tt class="REPLACEABLE"><b class="calibre10">SELECT isbn, retail, cost</b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">       FROM stock</b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">       ORDER BY isbn ASC</b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">       LIMIT 3;</b></tt>
    isbn    | retail | cost
------------+--------+-------
 0385121679 |  36.95 | 29.00
 039480001X |  32.95 | 30.00
 0394800753 |  16.95 | 16.00
(3 rows)

booktown=# <tt class="REPLACEABLE"><b class="calibre10">UPDATE stock</b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">       SET retail =</b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">           (cost * ((retail / cost) + 0.1::numeric));</b></tt>
UPDATE 16

booktown=# <tt class="REPLACEABLE"><b class="calibre10">SELECT isbn, retail, cost</b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">       FROM stock</b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">       ORDER BY isbn ASC</b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">       LIMIT 3;</b></tt>
    isbn    | retail | cost
------------+--------+-------
 0385121679 |  39.85 | 29.00
 039480001X |  35.95 | 30.00
 0394800753 |  18.55 | 16.00
(3 rows)</pre></div><p class="calibre9">Since the <tt class="REPLACEABLE">UPDATE</tt> statement in <a href="x7050.htm#UPDATINGENTIRECOLUMNS">Example 4-54</a> has no
        <tt class="REPLACEABLE">WHERE</tt> clause, all rows within the <tt class="REPLACEABLE">stock</tt> table
        are modified by this statement.</p></div><div class="NAVHEADER"><h2 class="SECT"><a name="AEN7170" class="calibre8">Updating Several Columns</a></h2><p class="calibre9">By separating assignment expressions in the <tt class="REPLACEABLE">SET</tt> clause with commas, you may
        execute updates to several columns of a table in a single statement. <a href="x7050.htm#USINGUPDATEONSEVERALCOLUMNS">Example 4-55</a>
        illustrates updating both the <tt class="REPLACEABLE">name</tt> and <tt class="REPLACEABLE">address</tt> column
        of the <tt class="REPLACEABLE">publishers</tt> table for the Publisher with the <tt class="REPLACEABLE">id</tt>
        of 113.</p><div class="NAVHEADER"><a name="USINGUPDATEONSEVERALCOLUMNS"></a><p class="calibre9"><b class="calibre10">Example 4-55. Using UPDATE on several columns</b></p><pre class="SCREEN">booktown=# <tt class="REPLACEABLE"><b class="calibre10">UPDATE publishers</b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">       SET name = 'O\'Reilly &amp; Associates',</b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">           address = 'O\'Reilly &amp; Associates, Inc. '</b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">                  || '101 Morris St, Sebastopol, CA 95472'</b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">       WHERE id = 113;</b></tt>
UPDATE 1
booktown=# <tt class="REPLACEABLE"><b class="calibre10">SELECT name, substr(address, 1, 40) || '...' AS short_address</b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">       FROM publishers</b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">       WHERE id = 113;</b></tt>
         name          |                short_address
-----------------------+---------------------------------------------
 O'Reilly &amp; Associates | O'Reilly &amp; Associates, Inc. 101 Morris S...
(1 row)</pre></div><p class="calibre9">The <tt class="REPLACEABLE">UPDATE</tt> statement in <a href="x7050.htm#USINGUPDATEONSEVERALCOLUMNS">Example 4-55</a> shows both
        the <tt class="REPLACEABLE">name</tt> and <tt class="REPLACEABLE">address</tt> columns assigned through
        string constants. Notice that several backslashes within the string constants escape the input apostrophes. The
        <tt class="REPLACEABLE">SELECT</tt> statement following the update verifies that the desired information was updated.</p><p class="calibre9"><a href="x7050.htm#USINGUPDATEONSEVERALCOLUMNS">Example 4-55</a> also demonstrates the use of the <tt class="REPLACEABLE">||</tt>
        text concatenation operator, and the <tt class="REPLACEABLE">substr()</tt> function, in practical usage. The
        <tt class="REPLACEABLE">address</tt> column is set with two string constants that are attached through the
        <tt class="REPLACEABLE">||</tt> operator in order to prevent the query from wrapping past the edge of the terminal.
        The <tt class="REPLACEABLE">substr()</tt> function is then used in the <tt class="REPLACEABLE">SELECT</tt>
        verification to prevent the output from wrapping. Each of these are used here to maintain readability of the output (of course, you would not want to
        display only a substring of the address field if you were interested in verifying its complete contents).</p></div><div class="NAVHEADER"><h2 class="SECT"><a name="AEN7204" class="calibre8">Updating from Several Sources</a></h2><p class="calibre9">PostgreSQL supports a powerful non-standard enhancement to the SQL <tt class="REPLACEABLE">UPDATE</tt>
        statement in the form of the <tt class="REPLACEABLE">FROM</tt> clause. By using the
        <tt class="REPLACEABLE">FROM</tt> clause, you can apply your knowledge of the <tt class="REPLACEABLE">SELECT</tt>
        statement to draw input data from other existing data sets, such as tables, or sub-selects.</p><p class="calibre9"><a href="x7050.htm#USINGUPDATEWITHSEVERALSOURCES">Example 4-56</a> uses an <tt class="REPLACEABLE">UPDATE</tt> statement in
        conjunction with a <tt class="REPLACEABLE">FROM</tt> clause to modify the row data within the
        <tt class="REPLACEABLE">stock</tt> table via the <tt class="REPLACEABLE">stock_backup</tt> table. The
        <tt class="REPLACEABLE">WHERE</tt> clause describes the relationship between the table to be updated and
        its source. Wherever the <tt class="REPLACEABLE">isbn</tt> column is found to match, the value in the
        <tt class="REPLACEABLE">stock</tt> table is modified to the value from the previously populated
        <tt class="REPLACEABLE">stock_backup</tt> table.</p><div class="NAVHEADER"><a name="USINGUPDATEWITHSEVERALSOURCES"></a><p class="calibre9"><b class="calibre10">Example 4-56. Using UPDATE with several sources</b></p><pre class="SCREEN">booktown=# <tt class="REPLACEABLE"><b class="calibre10">UPDATE stock</b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">       SET retail = stock_backup.retail</b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">       FROM stock_backup</b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">       WHERE stock.isbn = stock_backup.isbn;</b></tt>
UPDATE 16</pre></div><p class="calibre9">The <tt class="REPLACEABLE">FROM</tt> clause supports each of the <tt class="REPLACEABLE">JOIN</tt> syntax
        options described in <a href="x5802.htm">the Section called <i class="EMPHASIS">Retrieving Rows with SELECT</i></a>," enabling a wide variety of update methods from existing
        data sets. Further, as stated previously, sub-selects may be used as a data source to the
        <tt class="REPLACEABLE">FROM</tt> clause, just as is possible with the <tt class="REPLACEABLE">SELECT</tt>
        command.</p></div></div><div class="NAVHEADER"><hr width="100%" class="calibre6"/><table summary="Footer navigation table" width="100%" border="0" cellpadding="0" cellspacing="0" class="calibre"><tr class="calibre1"><td width="33%" valign="top" class="calibre3"><a href="x5802.htm" accesskey="P">Prev</a></td><td width="34%" valign="top" class="calibre4"><a href="book1.htm" accesskey="H">Home</a></td><td width="33%" valign="top" class="calibre5"><a href="x7234.htm" accesskey="N">Next</a></td></tr><tr class="calibre1"><td width="33%" valign="top" class="calibre3">Retrieving Rows with SELECT</td><td width="34%" valign="top" class="calibre4"><a href="c4890.htm" accesskey="U">Up</a></td><td width="33%" valign="top" class="calibre5">Removing Rows with DELETE</td></tr></table></div></div>

{% endraw %}

