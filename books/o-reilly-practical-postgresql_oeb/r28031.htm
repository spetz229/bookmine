---
layout: page
title: "Unknown"
prev: r27987.htm
next: r28390.htm
book_path: books/o-reilly-practical-postgresql_oeb/
---
{% include JB/setup %}
{% raw %}
<div>
<div class="NAVHEADER"><table summary="Header navigation table" width="100%" border="0" cellpadding="0" cellspacing="0" class="calibre"><tr class="calibre1"><th colspan="3" class="calibre2">Practical PostgreSQL</th></tr><tr class="calibre1"><td width="10%" valign="bottom" class="calibre3"><a href="r27987.htm" accesskey="P">Prev</a></td><td width="80%" valign="bottom" class="calibre4"/><td width="10%" valign="bottom" class="calibre5"><a href="r28390.htm" accesskey="N">Next</a></td></tr></table><hr width="100%" class="calibre6"/></div><h1 class="calibre7"><a name="SQL-SELECT" class="calibre8">SELECT</a></h1><div class="NAVHEADER"><a name="AEN28035"></a><h2 class="SECT">Name</h2>SELECT -- Retrieves rows from a table or view.</div><div class="NAVHEADER"><a name="AEN28038"></a><h2 class="SECT">Synopsis</h2><pre class="SCREEN">SELECT [ ALL | DISTINCT [ ON ( <tt class="REPLACEABLE"><i class="EMPHASIS">distinct_expression</i></tt> [, ...] ) ] ]
    <tt class="REPLACEABLE"><i class="EMPHASIS">target_expression</i></tt> [ AS <tt class="REPLACEABLE"><i class="EMPHASIS">output_name</i></tt> ] [, ...]
    [ FROM <tt class="REPLACEABLE"><i class="EMPHASIS">from_item</i></tt> [ { , | CROSS JOIN } ...] ]
    [ WHERE <tt class="REPLACEABLE"><i class="EMPHASIS">condition</i></tt> ]
    [ GROUP BY <tt class="REPLACEABLE"><i class="EMPHASIS">aggregate_expression</i></tt> [, ...] ]
    [ HAVING <tt class="REPLACEABLE"><i class="EMPHASIS">aggregate_condition</i></tt> [, ...] ]
    [ { UNION | INTERSECT | EXCEPT [ALL] } <tt class="REPLACEABLE"><i class="EMPHASIS">select</i></tt> ]
    [ ORDER BY <tt class="REPLACEABLE"><i class="EMPHASIS">order_expression</i></tt> [ ASC | DESC | USING <tt class="REPLACEABLE"><i class="EMPHASIS">operator</i></tt> ] [, ...] ]
    [ FOR UPDATE [ OF <tt class="REPLACEABLE"><i class="EMPHASIS">update_table</i></tt> [, ...] ] ]
    [ LIMIT { ALL | <tt class="REPLACEABLE"><i class="EMPHASIS">count</i></tt> } [ { OFFSET | , } <tt class="REPLACEABLE"><i class="EMPHASIS">start</i></tt> ] ]

<tt class="REPLACEABLE"><i class="EMPHASIS">from_item</i></tt> ::= { [ ONLY ] <tt class="REPLACEABLE"><i class="EMPHASIS">table_name</i></tt> [ * ] 
                  [ [ AS ] <tt class="REPLACEABLE"><i class="EMPHASIS">from_alias</i></tt> [ ( <tt class="REPLACEABLE"><i class="EMPHASIS">column_alias_list</i></tt> ) ] ] |
                ( <tt class="REPLACEABLE"><i class="EMPHASIS">select</i></tt> ) [ [ AS ] <tt class="REPLACEABLE"><i class="EMPHASIS">alias</i></tt> [ ( <tt class="REPLACEABLE"><i class="EMPHASIS">column_alias_list</i></tt> ) ] ] |
                <tt class="REPLACEABLE"><i class="EMPHASIS">from_item</i></tt> [ NATURAL ] <tt class="REPLACEABLE"><i class="EMPHASIS">join_type</i></tt> <tt class="REPLACEABLE"><i class="EMPHASIS">from_item</i></tt>
                  [ ON ( <tt class="REPLACEABLE"><i class="EMPHASIS">join_condition</i></tt> ) | USING ( <tt class="REPLACEABLE"><i class="EMPHASIS">join_column_list</i></tt> ) ]
              }

<tt class="REPLACEABLE"><i class="EMPHASIS">join_type</i></tt> ::= [ INNER |
                LEFT  [ OUTER ] |
                RIGHT [ OUTER ] |
                FULL  [ OUTER ]
              ] JOIN</pre><div class="NAVHEADER"><a name="R2-SQL-SELECT-1"></a><h3 class="AUTHOR">Parameters</h3><p class="calibre9"> </p><p class="calibre9"></p><div class="NAVHEADER"><dl class="calibre9"><dt class="NAVHEADER"><tt class="REPLACEABLE">ALL | DISTINCT</tt></dt><dd class="calibre16"><p class="calibre9">The <tt class="REPLACEABLE">DISTINCT</tt> keyword indicates that duplicate values found in two or more rows will not be shown after the first row. The <tt class="REPLACEABLE">ALL</tt> keyword explicitly reinforces the default  to retrieve all rows regardless of uniqueness.</p><p class="calibre9">Note that the <tt class="REPLACEABLE">ORDER BY</tt> clause sorts rows before the <tt class="REPLACEABLE">DISTINCT</tt> clause removes non-unique rows. Use these clauses together to ensure that the row found is the row you intend to retrieve.</p></dd><dt class="NAVHEADER"><tt class="REPLACEABLE">DISTINCT ON</tt></dt><dd class="calibre16"><p class="calibre9">The <tt class="REPLACEABLE">ON</tt> keyword, following the <tt class="REPLACEABLE">DISTINCT</tt> keyword, allows you to specify one or more <tt class="REPLACEABLE"><i class="EMPHASIS">distinct_expressions</i></tt> by which to judge uniqueness.    </p></dd><dt class="NAVHEADER"><tt class="REPLACEABLE"><i class="EMPHASIS">distinct_expression</i></tt></dt><dd class="calibre16"><p class="calibre9">A column name within a <tt class="REPLACEABLE"><i class="EMPHASIS">from_item</i></tt>, or a valid expression, whose value is used by the <tt class="REPLACEABLE">DISTINCT ON</tt> clause as a basis for removing duplicate values.</p></dd><dt class="NAVHEADER"><tt class="REPLACEABLE"><i class="EMPHASIS">target_expression</i></tt></dt><dd class="calibre16"><p class="calibre9">A column name within a <tt class="REPLACEABLE"><i class="EMPHASIS">from_item</i></tt>, or a valid expression.</p></dd><dt class="NAVHEADER"><tt class="REPLACEABLE"><i class="EMPHASIS">output_name</i></tt></dt><dd class="calibre16"><p class="calibre9">An alternate name for an output column, following the <tt class="REPLACEABLE">AS</tt> clause.  This name will then be used during display of the output and can be used to reference the column within <tt class="REPLACEABLE">ORDER BY</tt> and <tt class="REPLACEABLE">GROUP BY</tt> clauses in the same <tt class="REPLACEABLE">SELECT</tt> statement.  However, this name does <span><i class="EMPHASIS">not</i></span> apply to the <tt class="REPLACEABLE">WHERE</tt> or <tt class="REPLACEABLE">HAVING</tt> clauses; you will need to use the correct column name for them.</p></dd><dt class="NAVHEADER"><tt class="REPLACEABLE">FROM</tt></dt><dd class="calibre16"><p class="calibre9">The clause which is passed <tt class="REPLACEABLE"><i class="EMPHASIS">from_items</i></tt>, from which to retrieve rows.</p></dd><dt class="NAVHEADER"><tt class="REPLACEABLE"><i class="EMPHASIS">from_item</i></tt></dt><dd class="calibre16"><p class="calibre9">The name of a table, a subselect, or a <tt class="REPLACEABLE">JOIN</tt>ed set of <tt class="REPLACEABLE"><i class="EMPHASIS">from_items</i></tt> that you wish to retrieve data from.</p></dd><dt class="NAVHEADER"><tt class="REPLACEABLE">{ , | CROSS JOIN }</tt></dt><dd class="calibre16"><p class="calibre9">The comma (or formal <tt class="REPLACEABLE">CROSS JOIN</tt> clause) separates multiple <tt class="REPLACEABLE"><i class="EMPHASIS">from_items</i></tt>.</p></dd><dt class="NAVHEADER"><tt class="REPLACEABLE">WHERE</tt></dt><dd class="calibre16"><p class="calibre9">The clause that is passed <tt class="REPLACEABLE"><i class="EMPHASIS">conditions</i></tt> by which to constraint a result set.</p></dd><dt class="NAVHEADER"><tt class="REPLACEABLE"><i class="EMPHASIS">condition</i></tt></dt><dd class="calibre16"><p class="calibre9">An expression that yields either true or false, applied conditionally to non-grouped target expressions.</p></dd><dt class="NAVHEADER"><tt class="REPLACEABLE">GROUP BY</tt></dt><dd class="calibre16"><p class="calibre9">The clause that is passed <tt class="REPLACEABLE"><i class="EMPHASIS">aggregate_expressions</i></tt> to aggregate (group) rows together.</p></dd><dt class="NAVHEADER"><tt class="REPLACEABLE"><i class="EMPHASIS">aggregate_expression</i></tt></dt><dd class="calibre16"><p class="calibre9">A column name within a <tt class="REPLACEABLE"><i class="EMPHASIS">from_item</i></tt>, or a valid expression, to be used as a basis to aggregate (group) rows together.</p></dd><dt class="NAVHEADER"><tt class="REPLACEABLE">HAVING</tt></dt><dd class="calibre16"><p class="calibre9">The clause to which is passed any <tt class="REPLACEABLE"><i class="EMPHASIS">aggregate_conditions</i></tt> by which to constrain a result set.</p></dd><dt class="NAVHEADER"><tt class="REPLACEABLE"><i class="EMPHASIS">aggregate_condition</i></tt></dt><dd class="calibre16"><p class="calibre9">An expression that yields either true or false, applied conditionally to aggregated (grouped) target expressions.</p></dd><dt class="NAVHEADER"><tt class="REPLACEABLE">UNION</tt></dt><dd class="calibre16"><p class="calibre9">The clause that  combines two result sets with compatible column structure into a single combined result set.</p></dd><dt class="NAVHEADER"><tt class="REPLACEABLE">INTERSECT</tt></dt><dd class="calibre16"><p class="calibre9">The clause that removes any rows from the initial result set <span><i class="EMPHASIS">not</i></span> found in the following <tt class="REPLACEABLE"><i class="EMPHASIS">select</i></tt>  statement's result set (resulting in the overlapping, or intersecting, set).</p></dd><dt class="NAVHEADER"><tt class="REPLACEABLE">EXCEPT</tt></dt><dd class="calibre16"><p class="calibre9">The clause that removes any rows from the initial result set that <span><i class="EMPHASIS">are</i></span> found in the following <tt class="REPLACEABLE"><i class="EMPHASIS">select</i></tt> statement's result set (resulting in the difference set).</p></dd><dt class="NAVHEADER"><tt class="REPLACEABLE"><i class="EMPHASIS">select</i></tt></dt><dd class="calibre16"><p class="calibre9">A full <tt class="REPLACEABLE"><i class="EMPHASIS">select</i></tt> statement. The limitation on this form of subquery is that you cannot use any of the <tt class="REPLACEABLE">ORDER BY</tt>, <tt class="REPLACEABLE">FOR UPDATE</tt>, or <tt class="REPLACEABLE">LIMIT</tt> clauses unless the statement is enclosed in parentheses.</p></dd><dt class="NAVHEADER"><tt class="REPLACEABLE">ORDER BY</tt></dt><dd class="calibre16"><p class="calibre9">The <tt class="REPLACEABLE">ORDER BY</tt> clause sorts the retrieved result set by each <tt class="REPLACEABLE"><i class="EMPHASIS">order_expression</i></tt> provided.</p></dd><dt class="NAVHEADER"><tt class="REPLACEABLE"><i class="EMPHASIS">order_expression</i></tt> <tt class="REPLACEABLE">[ ASC | DESC | USING</tt> <tt class="REPLACEABLE"><i class="EMPHASIS">operator</i></tt><tt class="REPLACEABLE">]</tt></dt><dd class="calibre16"><p class="calibre9">A column name in the retrieved result set by which the <tt class="REPLACEABLE">ORDER BY</tt> clause sorts the results. The use of the <tt class="REPLACEABLE">ASC</tt> keyword explicitly defines the default of ascending sorting, while the <tt class="REPLACEABLE">DESC</tt> implies descending sorting. The <tt class="REPLACEABLE">USING</tt> clause defines an <tt class="REPLACEABLE"><i class="EMPHASIS">operator</i></tt> (e.g., <tt class="REPLACEABLE">&gt;</tt>) to compare subsequent <tt class="REPLACEABLE"><i class="EMPHASIS">order_expression</i></tt> values with.</p></dd><dt class="NAVHEADER"><tt class="REPLACEABLE">FOR UPDATE</tt></dt><dd class="calibre16"><p class="calibre9">The locking clause that places an implicit <tt class="REPLACEABLE">ROW SHARE MODE</tt> lock (see <a href="r27479.htm">LOCK</a>") on the <tt class="REPLACEABLE"><i class="EMPHASIS">from_item</i></tt> table selected in the current transaction.</p></dd><dt class="NAVHEADER"><tt class="REPLACEABLE">OF</tt> <tt class="REPLACEABLE"><i class="EMPHASIS">update_table</i></tt></dt><dd class="calibre16"><p class="calibre9">A specific table to which to apply <tt class="REPLACEABLE">ROW SHARE MODE</tt> locking when multiple tables are selected in the <tt class="REPLACEABLE">FROM</tt> clause.</p></dd><dt class="NAVHEADER"><tt class="REPLACEABLE">LIMIT</tt></dt><dd class="calibre16"><p class="calibre9">The <tt class="REPLACEABLE">LIMIT</tt> clause constrains only a specified portion of the retrieved results.</p></dd><dt class="NAVHEADER"><tt class="REPLACEABLE">ALL | </tt><tt class="REPLACEABLE"><i class="EMPHASIS">count</i></tt></dt><dd class="calibre16"><p class="calibre9">The <tt class="REPLACEABLE">ALL</tt> keyword explicitly specifies the default, which is to not limit the number of rows returned. The use of a numeric <tt class="REPLACEABLE"><i class="EMPHASIS">count</i></tt> value limits the number of rows in the retrieved result set to <tt class="REPLACEABLE"><i class="EMPHASIS">count</i></tt>.</p></dd><dt class="NAVHEADER"><tt class="REPLACEABLE">{ OFFSET | , }</tt> <tt class="REPLACEABLE"><i class="EMPHASIS">start</i></tt></dt><dd class="calibre16"><p class="calibre9">The <tt class="REPLACEABLE">OFFSET</tt> keyword (or informal comma, following the <tt class="REPLACEABLE">LIMIT</tt> clause) allows a result set to ignore the first <tt class="REPLACEABLE"><i class="EMPHASIS">start</i></tt> rows.</p></dd></dl></div>
<p class="calibre9">The following clauses and parameters are available within each <tt class="REPLACEABLE"><i class="EMPHASIS">from_item</i></tt>:
        </p><a name="AEN28259"></a><blockquote class="NOTE"><p class="calibre9"></p></blockquote><p class="calibre9"> </p><p class="calibre9"></p><div class="NAVHEADER"><dl class="calibre9"><dt class="NAVHEADER"><tt class="REPLACEABLE">[ ONLY ] </tt><tt class="REPLACEABLE"><i class="EMPHASIS">table_name</i></tt><tt class="REPLACEABLE"> [ * ]</tt></dt><dd class="calibre16"><p class="calibre9">The name of an existing table or view from which you wish to retrieve rows. If you do not specify <tt class="REPLACEABLE">ONLY</tt>, all descendant tables will be searched as well.  You can also add an asterisk (<tt class="REPLACEABLE">*</tt>) to indicate a wildcard after the table name to have descendant tables searched.</p></dd><dt class="NAVHEADER"><tt class="REPLACEABLE"><i class="EMPHASIS">sub_select</i></tt></dt><dd class="calibre16"><p class="calibre9">A sub-<tt class="REPLACEABLE">SELECT</tt> statement within the <tt class="REPLACEABLE">FROM</tt> clause of a <tt class="REPLACEABLE">SELECT</tt> statement; this creates a temporary table from which rows can be pulled for the duration of the command.  Aliases must be provided for sub-<tt class="REPLACEABLE">SELECT</tt>s, and they must also be surrounded in parentheses.</p></dd><dt class="NAVHEADER"><tt class="REPLACEABLE">[ AS ]</tt> <tt class="REPLACEABLE"><i class="EMPHASIS">from_alias</i></tt></dt><dd class="calibre16"><p class="calibre9">The <tt class="REPLACEABLE"><i class="EMPHASIS">from_alias</i></tt> is a substitute name for a referenced table in the <tt class="REPLACEABLE">FROM</tt> clause.</p></dd><dt class="NAVHEADER"><tt class="REPLACEABLE"><i class="EMPHASIS">column_alias_list</i></tt></dt><dd class="calibre16"><p class="calibre9">A comma-delimited list of alias names for each column in the <tt class="REPLACEABLE"><i class="EMPHASIS">from_alias</i></tt> source immediately preceding it. There may be fewer aliases listed in <tt class="REPLACEABLE"><i class="EMPHASIS">column_alias_list</i></tt> than there are columns in the <tt class="REPLACEABLE"><i class="EMPHASIS">from_alias</i></tt> source to which it applies.</p></dd><dt class="NAVHEADER"><tt class="REPLACEABLE"><i class="EMPHASIS">join_type</i></tt></dt><dd class="calibre16"><p class="calibre9">The join type, where the type is one of the following:
              
              </p><p class="calibre9"></p><ul class="calibre26"><li class="calibre22"><p class="calibre9"><tt class="REPLACEABLE">[ INNER ] JOIN</tt></p></li><li class="calibre22"><p class="calibre9"><tt class="REPLACEABLE">LEFT [ OUTER ] JOIN</tt></p></li><li class="calibre22"><p class="calibre9"><tt class="REPLACEABLE">RIGHT [ OUTER ] JOIN</tt></p></li><li class="calibre22"><p class="calibre9"><tt class="REPLACEABLE">FULL [ OUTER ] JOIN</tt></p></li></ul>
</dd><dt class="NAVHEADER"><tt class="REPLACEABLE">NATURAL</tt></dt><dd class="calibre16"><p class="calibre9">The optional <tt class="REPLACEABLE">NATURAL</tt> keyword indicates that the join will join the two <tt class="REPLACEABLE"><i class="EMPHASIS">from_items</i></tt> based on any identically-named columns they share. The use of this keyword precludes the use of explicit <tt class="REPLACEABLE"><i class="EMPHASIS">join_conditions</i></tt> or a <tt class="REPLACEABLE"><i class="EMPHASIS">join_column_list</i></tt>.</p></dd><dt class="NAVHEADER"><tt class="REPLACEABLE"><i class="EMPHASIS">join_condition</i></tt></dt><dd class="calibre16"><p class="calibre9">A join qualification condition following the <tt class="REPLACEABLE">ON</tt> clause. Functionally, this clause is the same as a <tt class="REPLACEABLE">WHERE</tt> clause, except that the condition will only be applied to the two objects being joined.</p></dd><dt class="NAVHEADER"><tt class="REPLACEABLE"><i class="EMPHASIS">join_column_list</i></tt></dt><dd class="calibre16"><p class="calibre9">A list of columns following the <tt class="REPLACEABLE">USING</tt> clause. This list is a shortened way of specifying the <tt class="REPLACEABLE">ON</tt> clause; it implies equivalence of columns within the <tt class="REPLACEABLE">FROM</tt> sources of a join that have the <span><i class="EMPHASIS">same names</i></span> in the two joined sources.</p></dd></dl></div>
</div><div class="NAVHEADER"><a name="R2-SQL-SELECT-2"></a><h3 class="AUTHOR">Results</h3><p class="calibre9">The primary result of a <tt class="REPLACEABLE">SELECT</tt> statement is a list of rows contained in the selected result set, followed by the number of rows retrieved. One of the following error messages may alternatively be encountered:
      
      </p><p class="calibre9"></p><div class="NAVHEADER"><dl class="calibre9"><dt class="NAVHEADER"><tt class="REPLACEABLE">ERROR:  Relation '</tt><tt class="REPLACEABLE"><i class="EMPHASIS">from_item</i></tt><tt class="REPLACEABLE">' does not exist</tt></dt><dd class="calibre16"><p class="calibre9">The error returned if a specified <tt class="REPLACEABLE"><i class="EMPHASIS">from_item</i></tt> table or view cannot be found in the connected database.</p></dd><dt class="NAVHEADER"><tt class="REPLACEABLE">ERROR:  Table name "</tt><tt class="REPLACEABLE"><i class="EMPHASIS">from_item</i></tt><tt class="REPLACEABLE">" specified more than once</tt></dt><dd class="calibre16"><p class="calibre9">The error returned if a <tt class="REPLACEABLE"><i class="EMPHASIS">from_item</i></tt> database table or view is specified twice without an alias. You can avoid this error by applying an alias to one of the named <tt class="REPLACEABLE"><i class="EMPHASIS">from_item</i></tt> sources with the <tt class="REPLACEABLE">AS</tt> clause.</p></dd><dt class="NAVHEADER"><tt class="REPLACEABLE">ERROR:  Attribute '</tt><tt class="REPLACEABLE"><i class="EMPHASIS">column</i></tt><tt class="REPLACEABLE">' not found</tt></dt><dd class="calibre16"><p class="calibre9">The error returned if a specified <tt class="REPLACEABLE"><i class="EMPHASIS">column</i></tt> cannot be found in any specified <tt class="REPLACEABLE"><i class="EMPHASIS">from_item</i></tt>.</p></dd></dl></div>
</div></div><div class="NAVHEADER"><a name="R1-SQL-SELECT-1"></a><h2 class="SECT">Description</h2><p class="calibre9">Use the <tt class="REPLACEABLE">SELECT</tt> command to retrieve rows of data from table, view, subquery, or any joined result set. Use the <tt class="REPLACEABLE">WHERE</tt> clause to set a condition that rows must meet in order to be retrieved; rows will not be retrieved if they don't meet the condition.  If you do not specify any conditions using <tt class="REPLACEABLE">WHERE</tt>, all rows in the data source will be retrieved.</p><p class="calibre9">There are many clauses available within a <tt class="REPLACEABLE">SELECT</tt> statement.  See the "Parameters" section of this reference entry for a listing of these clauses and their descriptions. See <a href="c4890.htm">Chapter 4</a> for more detailed instructions for their use.</p></div><div class="NAVHEADER"><a name="R1-SQL-SELECT-2"></a><h2 class="SECT">Examples</h2><p class="calibre9">The following example selects all rows from the <tt class="REPLACEABLE">books</tt> table:</p><pre class="SCREEN">booktown=# <tt class="REPLACEABLE"><b class="calibre10">SELECT * FROM books;</b></tt>
  id   |            title            | author_id | subject_id
-------+-----------------------------+-----------+------------
  7808 | The Shining                 |      4156 |          9
  4513 | Dune                        |      1866 |         15
  4267 | 2001: A Space Odyssey       |      2001 |         15
  1608 | The Cat in the Hat          |      1809 |          2
  1590 | Bartholomew and the Oobleck |      1809 |          2
 25908 | Franklin in the Dark        |     15990 |          2
  1501 | Goodnight Moon              |      2031 |          2
   190 | Little Women                |        16 |          6
  1234 | The Velveteen Rabbit        |     25041 |          3
  2038 | Dynamic Anatomy             |      1644 |          0
   156 | The Tell-Tale Heart         |       115 |          9
 41472 | Practical PostgreSQL        |      1212 |          4
 41473 | Programming Python          |      7805 |          4
 41477 | Learning Python             |      7805 |          4
 41478 | Perl Cookbook               |      7806 |          4
(15 rows)</pre><p class="calibre9">The next example selects only rows with an ID number higher than 5000 will be retrieved:</p><pre class="SCREEN">booktown=# <tt class="REPLACEABLE"><b class="calibre10">SELECT * FROM books WHERE id &gt; 5000;</b></tt>
  id   |         title         | author_id | subject_id
-------+-----------------------+-----------+------------
  7808 | The Shining           |      4156 |          9
 25908 | Franklin in the Dark  |     15990 |          2
 41472 | Practical PostgreSQL  |      1212 |          4
 41473 | Programming Python    |      7805 |          4
 41477 | Learning Python       |      7805 |          4
 41478 | Perl Cookbook         |      7806 |          4
(6 rows)</pre></div><div class="NAVHEADER"><hr width="100%" class="calibre6"/><table summary="Footer navigation table" width="100%" border="0" cellpadding="0" cellspacing="0" class="calibre"><tr class="calibre1"><td width="33%" valign="top" class="calibre3"><a href="r27987.htm" accesskey="P">Prev</a></td><td width="34%" valign="top" class="calibre4"><a href="book1.htm" accesskey="H">Home</a></td><td width="33%" valign="top" class="calibre5"><a href="r28390.htm" accesskey="N">Next</a></td></tr><tr class="calibre1"><td width="33%" valign="top" class="calibre3">ROLLBACK</td><td width="34%" valign="top" class="calibre4"><a href="c22759.htm" accesskey="U">Up</a></td><td width="33%" valign="top" class="calibre5">SELECT INTO</td></tr></table></div></div>

{% endraw %}

