---
layout: page
title: "Unknown"
prev: x17549.htm
next: c18591.htm
book_path: books/o-reilly-practical-postgresql_oeb/
---
{% include JB/setup %}
{% raw %}
<div>
<div class="NAVHEADER"><table summary="Header navigation table" width="100%" border="0" cellpadding="0" cellspacing="0" class="calibre"><tr class="calibre1"><th colspan="3" class="calibre2">Practical PostgreSQL</th></tr><tr class="calibre1"><td width="10%" valign="bottom" class="calibre3"><a href="x17549.htm" accesskey="P">Prev</a></td><td width="80%" valign="bottom" class="calibre4">Chapter 9. Database Management</td><td width="10%" valign="bottom" class="calibre5"><a href="c18591.htm" accesskey="N">Next</a></td></tr></table><hr width="100%" class="calibre6"/></div><div class="NAVHEADER"><h1 class="calibre7"><a name="BACKINGANDRESTORINGDATA" class="calibre8">Backing Up and Restoring Data</a></h1><p class="calibre9">The concept of backup and restoration of data is a vital one to any database administrator. No system is immune from
    hard drive crashes, careless users, or any number of potential catastrophes that can endanger data stored within PostgreSQL.</p><p class="calibre9">This section covers two general methods for backing up your data. The first approach uses the
    <span><i class="EMPHASIS">pg_dump</i></span> application distributed with PostgreSQL to create a set of SQL instructions with which a
    database can be fully restored. The second method consists of backing up the filesystem itself.</p><div class="NAVHEADER"><h2 class="SECT"><a name="USINGPGDUMP" class="calibre8">Using pg_dump</a></h2><p class="calibre9">The <span><i class="EMPHASIS">pg_dump</i></span> (which is short for "PostgreSQL dump") application is run from a command line, and
      creates a list of SQL commands. These commands, executed in the order provided, re-create the database from
      scratch.</p><p class="calibre9">Here is the syntax for <span><i class="EMPHASIS">pg_dump</i></span>:</p><pre class="SCREEN">  pg_dump [ <tt class="REPLACEABLE"><i class="EMPHASIS">options</i></tt> ] <tt class="REPLACEABLE"><i class="EMPHASIS">dbname</i></tt></pre><p class="calibre9">In this syntax, <tt class="REPLACEABLE"><i class="EMPHASIS">dbname</i></tt> is the name of the database that you want to "dump" SQL instructions for.
      The available <tt class="REPLACEABLE"><i class="EMPHASIS">options</i></tt> are similar in format to those of the other database management utilities
      included with PostgreSQL, such as <span><i class="EMPHASIS">createdb</i></span>. The most common flag specified in the
      <tt class="REPLACEABLE"><i class="EMPHASIS">options</i></tt> to <span><i class="EMPHASIS">pg_dump</i></span> is the <span><i class="EMPHASIS">-f</i></span> flag, which specifies the file
      to store the dumped SQL statements within.</p><div class="NAVHEADER"><blockquote class="NOTE"><p class="calibre9"><b class="calibre10">Note: </b>If the <span><i class="EMPHASIS">-f</i></span> flag is not specified to <span><i class="EMPHASIS">pg_dump</i></span>, the dumped SQL will
        be written to <span><i class="EMPHASIS">stdout</i></span> rather than stored in a file.</p></blockquote></div><p class="calibre9">The complete list of <span><i class="EMPHASIS">pg_dump</i></span> options follow:
      
      </p><p class="calibre9"></p><div class="NAVHEADER"><dl class="calibre9"><dt class="NAVHEADER">-a, - -data-only</dt><dd class="calibre16"><p class="calibre9">            Forces only <tt class="REPLACEABLE">COPY</tt> or <tt class="REPLACEABLE">INSERT</tt> SQL statements to be
            dumped (depending on whether or not the <span><i class="EMPHASIS">-d</i></span> flag is used). This results in a backup of data, and
            not database objects (or <span><i class="EMPHASIS">schema</i></span>). If the <span><i class="EMPHASIS">-d</i></span> flag is
            <span><i class="EMPHASIS">not</i></span> passed along with this flag, the dumped <tt class="REPLACEABLE">COPY</tt> commands are
            used to copy all data from <span><i class="EMPHASIS">stdin</i></span> (i.e., the rows are stored literally within the dumped file as
            <tt class="REPLACEABLE">COPY</tt> commands from <span><i class="EMPHASIS">stdin</i></span>). Otherwise, each row is represented
            as sequential <tt class="REPLACEABLE">INSERT</tt> statements.
          </p></dd><dt class="NAVHEADER">-b, - -blobs</dt><dd class="calibre16"><p class="calibre9">            Causes any large objects to be dumped as well as normal data. This option also requires that the
            <span><i class="EMPHASIS">-F</i></span> flag be provided with either the <span><i class="EMPHASIS">t</i></span> or <span><i class="EMPHASIS">c</i></span> format.
            By default, large object data is not dumped.
          </p></dd><dt class="NAVHEADER">-c, - -clean</dt><dd class="calibre16"><p class="calibre9">            Specifies that SQL statements to drop all existing objects will precede the SQL statements to create those objects.
            This option is useful in re-initializing an existing database, rather than dropping it and
            recreating it from scratch.
          </p></dd><dt class="NAVHEADER">-C, - -create</dt><dd class="calibre16"><p class="calibre9">            Specifies that the SQL statement to create the database (<tt class="REPLACEABLE">CREATE DATABASE</tt>)
            should be included in the dump.
          </p></dd><dt class="NAVHEADER">-d, - -inserts</dt><dd class="calibre16"><p class="calibre9">            Causes <tt class="REPLACEABLE">INSERT</tt> statements to be dumped for each row of data, rather than the default
            <tt class="REPLACEABLE">COPY</tt> statements. This can be safer, as a single corrupted row will cause a
            <tt class="REPLACEABLE">COPY</tt> statement to fail, though it is a much slower process to add a single row at a time during restoration.
          </p></dd><dt class="NAVHEADER">-D, - -attribute-inserts</dt><dd class="calibre16"><p class="calibre9">            Like the <span><i class="EMPHASIS">-d</i></span> flag, causes <tt class="REPLACEABLE">INSERT</tt> statements to be dumped;
            however, with this flag, each <tt class="REPLACEABLE">INSERT</tt> statement is created with an explicit column
            target list in parentheses, immediately preceding the <tt class="REPLACEABLE">VALUES</tt>.
          </p></dd><dt class="NAVHEADER">-f <tt class="REPLACEABLE"><i class="EMPHASIS">FILENAME</i></tt>, - -file=FILENAME</dt><dd class="calibre16"><p class="calibre9">            Directs the output of <span><i class="EMPHASIS">pg_dump</i></span> to a file named <span><i class="EMPHASIS">FILENAME</i></span>, rather
            than to <span><i class="EMPHASIS">stdout</i></span>. The user executing <span><i class="EMPHASIS">pg_dump</i></span> must have system permissions
            to write to this file.
          </p></dd><dt class="NAVHEADER">-F { c | t | p }, - -format { c | t | p }</dt><dd class="calibre16"><p class="calibre9">            Determines the file format of the output:
            
            </p><p class="calibre9"></p><div class="NAVHEADER"><dl class="calibre17"><dt class="NAVHEADER"><span><i class="EMPHASIS">c</i></span> (<span><i class="EMPHASIS">gzip</i></span> compressed)</dt><dd class="calibre16"><p class="calibre9">                  A format of <span><i class="EMPHASIS">c</i></span> creates a <span><i class="EMPHASIS">gzip</i></span>-compressed <span><i class="EMPHASIS">tar</i></span> file
                  (i.e., a <span><i class="EMPHASIS">.tar.gz</i></span> file).
                </p></dd><dt class="NAVHEADER"><span><i class="EMPHASIS">t</i></span> (<span><i class="EMPHASIS">tar</i></span>)</dt><dd class="calibre16"><p class="calibre9">                  A value of <span><i class="EMPHASIS">t</i></span> creates a <span><i class="EMPHASIS">tar</i></span> file (i.e., a <span><i class="EMPHASIS">.tar</i></span>
                  file).
                </p></dd><dt class="NAVHEADER"><span><i class="EMPHASIS">p</i></span> (plain text)</dt><dd class="calibre16"><p class="calibre9">                  The default value of <span><i class="EMPHASIS">p</i></span> causes plain text output.
                </p></dd></dl></div>
<p class="calibre9">Note that <span><i class="EMPHASIS">pg_restore</i></span> is typically used to handle files created with the
          <span><i class="EMPHASIS">c</i></span> or <span><i class="EMPHASIS">t</i></span> (<span><i class="EMPHASIS">gzip</i></span>-compressed or <span><i class="EMPHASIS">tar</i></span>)
          formats.
          
          </p></dd><dt class="NAVHEADER">-h <tt class="REPLACEABLE"><i class="EMPHASIS">HOSTNAME</i></tt>, - -host=<tt class="REPLACEABLE"><i class="EMPHASIS">HOSTNAME</i></tt></dt><dd class="calibre16"><p class="calibre9">            Specifies that <tt class="REPLACEABLE"><i class="EMPHASIS">HOSTNAME</i></tt> should be connected to, rather than the localhost.  Use this when the target
            database is on another server.
          </p></dd><dt class="NAVHEADER">-i, - -ignore-version</dt><dd class="calibre16"><p class="calibre9">            Overrides the check between the version of <span><i class="EMPHASIS">pg_dump</i></span> and the version of PostgreSQL
            running. This option is not recommended unless there is no other alternative, as it most likely will
            produce errors due to changes in the system catalogs between versions.  Normally, you should use the version of
            <span><i class="EMPHASIS">pg_dump</i></span> matching the database that you are backing up.
          </p></dd><dt class="NAVHEADER">-n, - -no-quotes</dt><dd class="calibre16"><p class="calibre9">            Suppresses any double-quotes surrounding identifiers unless there are normally illegal characters in
            the identifier (e.g., spaces, or uppercase characters).
          </p></dd><dt class="NAVHEADER">-N, - -quotes</dt><dd class="calibre16"><p class="calibre9">            Explicitly indicates that double-quotes should be used around all identifiers. This has been the default behavior
            of <span><i class="EMPHASIS">pg_dump</i></span> since PostgreSQL 6.4.
          </p></dd><dt class="NAVHEADER">-o, - -oid</dt><dd class="calibre16"><p class="calibre9">            Causes OIDs (object identifiers) for each row of data to be dumped as well. This can be vital if any of your
            applications based around the data in PostgreSQL use OIDs in any kind of meaningful or associative way.
          </p></dd><dt class="NAVHEADER">-O, - -no-owner</dt><dd class="calibre16"><p class="calibre9">            Causes ownership to not be taken into account in the dump. A restore with suppressed ownership will cause all
            re-created objects to belong to the user performing the restore.
          </p></dd><dt class="NAVHEADER">-p <tt class="REPLACEABLE"><i class="EMPHASIS">PORT</i></tt>, - -port=<tt class="REPLACEABLE"><i class="EMPHASIS">PORT</i></tt></dt><dd class="calibre16"><p class="calibre9">            Specifies that the database connection should be made on port <tt class="REPLACEABLE"><i class="EMPHASIS">PORT</i></tt>, rather than the
            default port (usually 5432, though it may have been configured differently when PostgreSQL was
            compiled, by the <span><i class="EMPHASIS">- -with-pgport</i></span> flag).
          </p></dd><dt class="NAVHEADER">-R, - -no-reconnect</dt><dd class="calibre16"><p class="calibre9">            Suppresses any <tt class="REPLACEABLE">\connect</tt> statements, which are usually used to enforce currently
            reflected ownerships when a backup is restored. This is similar in practice to the <span><i class="EMPHASIS">-O</i></span> flag,
            but also precludes the ability to use the <span><i class="EMPHASIS">-C</i></span> flag, as a reconnect is required after creation
            of a new database.
          </p></dd><dt class="NAVHEADER">-s, - -schema-only</dt><dd class="calibre16"><p class="calibre9">            Causes only the <span><i class="EMPHASIS">schema-related</i></span> (database objects such as tables, sequences, indices and views)
            SQL statements to be dumped, ignoring re-creation of the data. This can be useful in moving a general database
            structure from a development machine to a production machine.
          </p></dd><dt class="NAVHEADER">-t <tt class="REPLACEABLE"><i class="EMPHASIS">TABLE</i></tt>, - -table=<tt class="REPLACEABLE"><i class="EMPHASIS">TABLE</i></tt></dt><dd class="calibre16"><p class="calibre9">            Causes only <tt class="REPLACEABLE"><i class="EMPHASIS">TABLE</i></tt> to be dumped from the specified database, rather than all tables.
          </p></dd><dt class="NAVHEADER">-u, - -password</dt><dd class="calibre16"><p class="calibre9">            Provides a prompt for a username and password. As of PostgreSQL 7.1.x, this is the only method to provide an
            alternate username. If the user's password is unset (<tt class="REPLACEABLE">NULL</tt>), you may simply press enter
            when prompted for it.
          </p></dd><dt class="NAVHEADER">-v, - -verbose</dt><dd class="calibre16"><p class="calibre9">            Causes verbose output from the <span><i class="EMPHASIS">pg_dump</i></span> functions being performed to be displayed to <span><i class="EMPHASIS">stderr</i></span> (not
            <span><i class="EMPHASIS">stdout</i></span>).
          </p></dd><dt class="NAVHEADER">-x, - -no-acl</dt><dd class="calibre16"><p class="calibre9">            Suppresses any <tt class="REPLACEABLE">GRANT</tt> or <tt class="REPLACEABLE">REVOKE</tt> statements, which
            are usually used to preserve the rights set at the time of the dump. Use this flag if you do not wish to enforce
            any existing rights or restrictions when re-creating a database from this dump.
          </p></dd><dt class="NAVHEADER">-Z, - -compress { 0 - 9 }</dt><dd class="calibre16"><p class="calibre9">            Sets the degree of compression (0 for the least compression, 9 for the most) when used with the <span><i class="EMPHASIS">-F c</i></span> argument.
          </p></dd></dl></div>
<p class="calibre9">Any system user may run <span><i class="EMPHASIS">pg_dump</i></span> by default, but the user with which you connect to PostgreSQL
      must have <tt class="REPLACEABLE">SELECT</tt> rights for every object in the database being dumped.
      
      <a href="x17860.htm#USINGPGDUMPEXAMPLE">Example 9-20</a> demonstrates the use of <span><i class="EMPHASIS">pg_dump</i></span> on the
      <tt class="REPLACEABLE">booktown</tt> database, with the <tt class="REPLACEABLE">manager</tt> PostgreSQL user. The
      <span><i class="EMPHASIS">-C</i></span> flag passed causes the <tt class="REPLACEABLE">CREATE DATABASE</tt> command to be
      included in the SQL dump as well. This command is not always included, as you may prefer to create the database
      beforehand with non-standard options.</p><div class="NAVHEADER"><a name="USINGPGDUMPEXAMPLE"></a><p class="calibre9"><b class="calibre10">Example 9-20. Using pg_dump</b></p><pre class="SCREEN">[jworsley@booktown ~]$ <tt class="REPLACEABLE"><b class="calibre10">pg_dump -u -C -f booktown.sql booktown</b></tt>
Username: <tt class="REPLACEABLE"><b class="calibre10">manager</b></tt>
Password:

[jworsley@booktown ~]$ <tt class="REPLACEABLE"><b class="calibre10">ls -l booktown.sql</b></tt>
-rw-rw-r- -    1 jworsley jworsley    46542 Sep 13 16:42 booktown.sql</pre></div><p class="calibre9">Note that since <span><i class="EMPHASIS">pg_dump</i></span> provides the standard connection options for specifying a host
      connection (e.g., the <span><i class="EMPHASIS">-h</i></span>, <span><i class="EMPHASIS">-u</i></span> and <span><i class="EMPHASIS">-p</i></span> flags), it can be used
      to perform remote backups from any host allowed to make a remote connection (according to the
      <span><i class="EMPHASIS">pg_hba.conf</i></span> file: see <a href="c15679.htm">Chapter 8</a> for more on this subject).  <a href="x17860.htm#USINGPGDUMPREMOTELY">Example 9-21</a> shows a user on a remote server specifying a connection to the
      <span><i class="EMPHASIS">booktown.commandprompt.com</i></span> server, in order to create a backup file in <span><i class="EMPHASIS">compressed</i></span>
      format (with the <span><i class="EMPHASIS">-F c</i></span> flag) called <span><i class="EMPHASIS">booktown.sql.tar.gz</i></span>.</p><div class="NAVHEADER"><a name="USINGPGDUMPREMOTELY"></a><p class="calibre9"><b class="calibre10">Example 9-21. Using pg_dump remotely</b></p><pre class="SCREEN">[jworsley@cmd ~]$ <tt class="REPLACEABLE"><b class="calibre10">pg_dump -u -h booktown.commandprompt.com \</b></tt>
&gt; <tt class="REPLACEABLE"><b class="calibre10">                        -F c -f booktown.sql.tar.gz booktown</b></tt>
Username: <tt class="REPLACEABLE"><b class="calibre10">manager</b></tt>
Password:

[jworsley@cmd ~]$ <tt class="REPLACEABLE"><b class="calibre10">ls -l booktown.sql.tar.gz</b></tt>
-rw-rw-r- -    1 jworsley jworsley   45909 Sep 13 17:12 booktown.sql.tar.gz</pre></div><p class="calibre9">If you wish to use large objects in your dumped file, it is necessary that you use either the
      <span><i class="EMPHASIS">tar</i></span> (<span><i class="EMPHASIS">t</i></span>) or <span><i class="EMPHASIS">gzip</i></span>-compressed (<span><i class="EMPHASIS">c</i></span>) format,
      since the plain-text format cannot include large objects. Otherwise, normal plain-text formatted dumps are suitable for
      most users.</p><p class="calibre9">Creating a dump in <span><i class="EMPHASIS">tar</i></span> format can often result in a backup file more than twice the size of its
      plain-text counterpart, even without large objects. This is because the <span><i class="EMPHASIS">tar</i></span> format involves a
      hierarchy of TOC (table of contents) <span><i class="EMPHASIS">.dat</i></span> files which represent information on how to be used by the
      corresponding <span><i class="EMPHASIS">pg_restore</i></span> command; thus, more disk space is taken up by the extra instructions. Since
      <span><i class="EMPHASIS">tar</i></span> is not a compression utility, the <span><i class="EMPHASIS">gzip</i></span>-compressed (<span><i class="EMPHASIS">c</i></span>)
      format exists as well to compress the tarred file into <span><i class="EMPHASIS">gzipped</i></span> format automatically.</p></div><div class="NAVHEADER"><h2 class="SECT"><a name="USINGPGDUMPALL" class="calibre8">Using pg_dumpall</a></h2><p class="calibre9">PostgreSQL supplies a supplementary wrapper command to the <span><i class="EMPHASIS">pg_dump</i></span> application called
      <span><i class="EMPHASIS">pg_dumpall</i></span>. The primary use of this application is to allow the entire cluster of PostgreSQL databases
      on a system to be dumped at once, rather than having to perform a <span><i class="EMPHASIS">pg_dump</i></span> for each database, one at a
      time.</p><p class="calibre9">Here is the syntax for <span><i class="EMPHASIS">pg_dumpall</i></span>, displayed from the <span><i class="EMPHASIS">- -help</i></span> flag:</p><pre class="SCREEN">  pg_dumpall [ -c ] [ -h <tt class="REPLACEABLE"><i class="EMPHASIS">HOSTNAME</i></tt> ] [ -p <tt class="REPLACEABLE"><i class="EMPHASIS">PORT</i></tt> ] [ -g ]</pre><p class="calibre9">The <span><i class="EMPHASIS">pg_dumpall</i></span> command accepts the same connection parameters available to
      <span><i class="EMPHASIS">pg_dump</i></span>. The following are the <span><i class="EMPHASIS">pg_dumpall</i></span>-specific parameters:
        
        </p><p class="calibre9"></p><div class="NAVHEADER"><dl class="calibre9"><dt class="NAVHEADER">-c</dt><dd class="calibre16"><p class="calibre9">              Specifies that SQL statements to drop existing global objects will precede the SQL statements to create those objects.
            </p></dd><dt class="NAVHEADER">-h <tt class="REPLACEABLE"><i class="EMPHASIS">HOSTNAME</i></tt>, - -host=<tt class="REPLACEABLE"><i class="EMPHASIS">HOSTNAME</i></tt></dt><dd class="calibre16"><p class="calibre9">              Specifies that <tt class="REPLACEABLE"><i class="EMPHASIS">HOSTNAME</i></tt> should be connected to, rather than the localhost, or the host defined
              by the <tt class="REPLACEABLE">PGHOST</tt> environment variable.  Use this when the target database is on another
              server.
            </p></dd><dt class="NAVHEADER">-p <tt class="REPLACEABLE"><i class="EMPHASIS">PORT</i></tt>, - -port=<tt class="REPLACEABLE"><i class="EMPHASIS">PORT</i></tt></dt><dd class="calibre16"><p class="calibre9">              Specifies that the database connection should be made on port <tt class="REPLACEABLE"><i class="EMPHASIS">PORT</i></tt>, rather than the
              default port (usually 5432).
            </p></dd><dt class="NAVHEADER">-g, - -globals-only</dt><dd class="calibre16"><p class="calibre9">              Specifies that only global objects will be dumped. This is primarily useful for recreating just users and groups, or
              for duplicating them on another machine (by taking the dump to another machine, and executing it). The <span><i class="EMPHASIS">-g</i></span>
              flag implicitly causes all users to be deleted from the <tt class="REPLACEABLE">pg_shadow</tt> table prior to the
              <tt class="REPLACEABLE">CREATE</tt> statements. Exercise caution with the output from this command!
            </p></dd></dl></div>
<div class="NAVHEADER"><p class="calibre9"></p><table class="calibre" border="1" width="100%"><tr class="calibre1"><td class="calibre23"><b class="calibre10">Warning</b></td></tr><tr class="calibre1"><td class="calibre15"><p class="calibre9">Do not pass the <span><i class="EMPHASIS">-?</i></span> flag to <span><i class="EMPHASIS">pg_dumpall</i></span>, as it will result in passing that
        flag to <span><i class="EMPHASIS">pg_dump</i></span> for each database, which may result in quite a few more help screens than you would
        expect. If you wish to view <span><i class="EMPHASIS">pg_dumpall</i></span>'s help, use the <span><i class="EMPHASIS">- -help</i></span> flag.</p></td></tr></table></div><p class="calibre9">Note that as of PostgreSQL 7.1.x, the use of the <span><i class="EMPHASIS">pg_dumpall</i></span> script does have some practical
      limitations over the normal use of <span><i class="EMPHASIS">pg_dump</i></span>. For example, the <span><i class="EMPHASIS">-u</i></span> flag
      cannot be used to provide a different username and password, and the <span><i class="EMPHASIS">-F</i></span> flag may not be used to
      specify a format other than plain text (your backups will be stored as plain text, regardless of chosen format). This means
      that the <span><i class="EMPHASIS">-b</i></span> flag cannot be used with <span><i class="EMPHASIS">pg_dumpall</i></span> either, as it requires a format
      other than plain-text.</p><p class="calibre9">While the <span><i class="EMPHASIS">-f</i></span> flag can be used to pass a filename through to <span><i class="EMPHASIS">pg_dump</i></span>, doing
      so does not create a complete dump, as <span><i class="EMPHASIS">pg_dumpall</i></span>'s global data is still sent to
      <span><i class="EMPHASIS">stdout</i></span>. To solve the problem of not having the <span><i class="EMPHASIS">-f</i></span> flag available to
      <span><i class="EMPHASIS">pg_dumpall</i></span>, the shell re-direction operator (<tt class="REPLACEABLE">&gt;</tt>) can be used to
      redirect the output of <span><i class="EMPHASIS">pg_dumpall</i></span> to a file.</p><p class="calibre9">A simple workaround to the lack of the <span><i class="EMPHASIS">-u</i></span> flag is to set the
      <tt class="REPLACEABLE">PGUSER</tt> environment variable. You can also set the
      <tt class="REPLACEABLE">PGPASSWORD</tt> environment variable in this fashion if you are connecting to a system which
      requires password authentication, and you do not wish to provide a password for <span><i class="EMPHASIS">each</i></span> database that it
      connects to and dumps.</p><p class="calibre9"><a href="x17860.htm#USINGPGDUMPALLEXAMPLE">Example 9-22</a> demonstrates a simple bash-shell shorthand for a temporary environment
      variable (<tt class="REPLACEABLE">PGUSER</tt>) when invoking any PostgreSQL client. While not usually necessary, it can
      be a handy trick to know for exceptions such as the <span><i class="EMPHASIS">pg_dumpall</i></span> script.  <a href="x17860.htm#USINGPGDUMPALLEXAMPLE">Example 9-22</a> uses this technique to create one dump file for all databases.</p><div class="NAVHEADER"><a name="USINGPGDUMPALLEXAMPLE"></a><p class="calibre9"><b class="calibre10">Example 9-22. Using pg_dumpall</b></p><pre class="SCREEN">[jworsley@booktown ~]$ <tt class="REPLACEABLE"><b class="calibre10">PGUSER=postgres pg_dumpall &gt; all.sql</b></tt></pre></div><p class="calibre9">The first part of the shell statement demonstrated in <a href="x17860.htm#USINGPGDUMPALLEXAMPLE">Example 9-22</a> sets a temporary
      environment variable named <tt class="REPLACEABLE">PGUSER</tt> to the value of <span><i class="EMPHASIS">postgres</i></span>. This
      variable is set for the duration of the <span><i class="EMPHASIS">pg_dumpall</i></span> command, and expires when the command has finished.
      </p><div class="NAVHEADER"><blockquote class="NOTE"><p class="calibre9"><b class="calibre10">Note: </b>The <span><i class="EMPHASIS">pg_dumpall</i></span> command generally requires that the user executing the script be a
        PostgreSQL superuser. This is because the <span><i class="EMPHASIS">pg_dumpall</i></span> command requires access to the PostgreSQL system catalogs,
        as it dumps global objects as well as database objects.
        </p></blockquote></div><p class="calibre9">You can also run the <span><i class="EMPHASIS">pg_dumpall</i></span> command remotely, though be sure to set any environment
      variables as needed. These will depend greatly on the remote host configuration in the <span><i class="EMPHASIS">pg_hba.conf</i></span>
      file.</p><p class="calibre9">You should use the <span><i class="EMPHASIS">pg_dumpall</i></span> command if it is especially
      inconvenient to backup all your existing databases individually, or if you have any kind of complex user and group system
      in place. If you are inhibited by the limitations of <span><i class="EMPHASIS">pg_dumpall</i></span> for data output (particularly if your
      database makes use of large objects), the simplest solution is to use <span><i class="EMPHASIS">pg_dumpall</i></span> with the
      <span><i class="EMPHASIS">-g</i></span> flag to keep a backup of all user and group data, and to subsequently use
      <span><i class="EMPHASIS">pg_dump</i></span> for each database which needs to be backed up, individually.</p></div><div class="NAVHEADER"><h2 class="SECT"><a name="AEN18232" class="calibre8">Restoring a Database</a></h2><p class="calibre9">Data from a SQL dump can be restored to a database in one of two ways. If the dump created by
      <span><i class="EMPHASIS">pg_dump</i></span> as a simple, plain-text file, it may be passed through to <span><i class="EMPHASIS">psql</i></span> directly
      as an input file. Alternatively, if another output format was chosen (e.g., the <span><i class="EMPHASIS">tar</i></span> or
      <span><i class="EMPHASIS">compressed tar</i></span> format), the <span><i class="EMPHASIS">pg_restore</i></span> command must be used.</p><p class="calibre9">A database may either be restored from scratch, to an empty database, or to a non-existent database; how you go about
      restoring a database depends largely on how it was dumped (e.g., if only data were dumped, or if the commands to create the
      database were included).</p><div class="NAVHEADER"><h3 class="AUTHOR"><a name="USINGPSQLFORPLAINTEXTDUMPS" class="calibre8">Using psql for plain text dumps</a></h3><p class="calibre9">A plain text output file from <span><i class="EMPHASIS">pg_dump</i></span> may be passed through to <span><i class="EMPHASIS">psql</i></span> as an
        input file. This executes sequentially each of the dumped SQL instructions. Depending on how the dump was created,
        and for what purpose, there are a variety of ways to invoke <span><i class="EMPHASIS">psql</i></span> with the dump.</p><p class="calibre9">If your dump was created with the <span><i class="EMPHASIS">-C</i></span> flag, the SQL statement to create the database is
        included in the dump file itself. This means that, most likely, the database was either dropped, or has not
        yet been created on the system on which it is being restored. If the database already exists, it may need to be dropped,
        <span><i class="EMPHASIS">but only do this if you are sure the dump is up to date.</i></span></p><p class="calibre9">On the other hand, if the <span><i class="EMPHASIS">-C</i></span> flag was <span><i class="EMPHASIS">not</i></span> used, you may need to first
        create the database before connecting to it and restoring its attributes and data. Remember also that you need to specify
        the usual connection parameters to <span><i class="EMPHASIS">psql</i></span> in order to operate as a user with the
        rights to create a database.</p><p class="calibre9"><a href="x17860.htm#RECREATINGTHEBOOKTOWNDATABASE">Example 9-23</a> demonstrates recreating the
        <tt class="REPLACEABLE">booktown</tt> database with the <span><i class="EMPHASIS">booktown.sql</i></span> file created in <a href="x17860.htm#USINGPGDUMPEXAMPLE">Example 9-20</a>, in <a href="x17860.htm#USINGPGDUMP">the Section called <i class="EMPHASIS">Using pg_dump</i></a>" earlier in this chapter. Since the
        <span><i class="EMPHASIS">-C</i></span> flag was used in this example, there is no need to create the database first; it can be
        created by bootstrapping through the <tt class="REPLACEABLE">template1</tt> database.</p><div class="NAVHEADER"><a name="RECREATINGTHEBOOKTOWNDATABASE"></a><p class="calibre9"><b class="calibre10">Example 9-23. Recreating the booktown database</b></p><pre class="SCREEN">[jworsley@booktown ~]$ <tt class="REPLACEABLE"><b class="calibre10">psql -U manager -f booktown.sql template1</b></tt>
CREATE DATABASE
You are now connected to database booktown as user postgres.
COMMENT
CREATE
CREATE
CHANGE

[...]</pre></div><p class="calibre9">As each dumped command in the <span><i class="EMPHASIS">booktown.sql</i></span> file is processed by PostgreSQL, the resulting
        server messages (e.g., <tt class="REPLACEABLE">CREATE</tt>, <tt class="REPLACEABLE">CHANGE</tt>) will be
        displayed to <span><i class="EMPHASIS">stderr</i></span>.</p><div class="NAVHEADER"><blockquote class="NOTE"><p class="calibre9"><b class="calibre10">Note: </b>Since <span><i class="EMPHASIS">psql</i></span> can be used remotely, this same technique may be used across a network,
          provided the correct connection parameters are used from an authorized host.</p></blockquote></div></div><div class="NAVHEADER"><h3 class="AUTHOR"><a name="AEN18285" class="calibre8">Using pg_restore for tarred and compressed dumps</a></h3><p class="calibre9">For files created by <span><i class="EMPHASIS">pg_dump</i></span> with a file format other than plain text, the
        <span><i class="EMPHASIS">pg_restore</i></span> command exists to seamlessly restore the dumped database from the tar,
        or compressed tar file.</p><p class="calibre9">Here is the syntax for the <span><i class="EMPHASIS">pg_restore</i></span> command:</p><pre class="SCREEN">  pg_restore [ <tt class="REPLACEABLE"><i class="EMPHASIS">options</i></tt> ] [ <tt class="REPLACEABLE"><i class="EMPHASIS">file</i></tt> ]</pre><p class="calibre9">In this syntax, if <tt class="REPLACEABLE"><i class="EMPHASIS">file</i></tt> is not specified, <span><i class="EMPHASIS">pg_restore</i></span> will wait for data
        from <span><i class="EMPHASIS">stdin</i></span>. This means that you may effectively use the <tt class="REPLACEABLE">&lt;</tt> shell
        redirection character with the same results. Notice especially in the <tt class="REPLACEABLE"><i class="EMPHASIS">options</i></tt> the
        <span><i class="EMPHASIS">-d</i></span> flag. If left unspecified, <span><i class="EMPHASIS">pg_restore</i></span> will simply display the database
        restoration statements to <span><i class="EMPHASIS">stdout</i></span> (and thus, to the screen) rather than actually restoring a
        database.</p><p class="calibre9">If you are using the <tt class="REPLACEABLE"><i class="EMPHASIS">-C</i></tt> flag to create a database from scratch, you must still supply the
        <tt class="REPLACEABLE"><i class="EMPHASIS">-d</i></tt> flag (with the name of an existing database to connect to first, e.g.,
        <tt class="REPLACEABLE">template1</tt>) from which to initialize a connection and create the new database. In
        such a case, it is not important to which database you initially connect, as it is only a temporary connection until the
        new database is created.</p><p class="calibre9">Many of the options for <tt class="REPLACEABLE"><i class="EMPHASIS">pg_restore</i></tt> directly mirror those available in
        <tt class="REPLACEABLE"><i class="EMPHASIS">pg_dump</i></tt>.  In some cases, the same option must be supplied in both <tt class="REPLACEABLE"><i class="EMPHASIS">pg_dump</i></tt> and
        <tt class="REPLACEABLE"><i class="EMPHASIS">pg_restore</i></tt> in order for the desired functionality to be achieved. For example, this is the case with
        the <tt class="REPLACEABLE"><i class="EMPHASIS">-C</i></tt> flag.  If used with <tt class="REPLACEABLE"><i class="EMPHASIS">pg_dump</i></tt>, but not <tt class="REPLACEABLE"><i class="EMPHASIS">pg_restore</i></tt>,
        the <tt class="REPLACEABLE">CREATE DATABASE</tt> command will be ignored by <tt class="REPLACEABLE"><i class="EMPHASIS">pg_restore</i></tt>, even
        though the command is present in the dump file.</p><p class="calibre9">The following are more detailed explanations of each option:
        
        
        
          
          </p><p class="calibre9"></p><div class="NAVHEADER"><dl class="calibre9"><dt class="NAVHEADER">-a, --data-only</dt><dd class="calibre16"><p class="calibre9">                Causes any reference to creation of database schema objects to be ignored, restoring only data records (those with
                <tt class="REPLACEABLE">COPY</tt> or <tt class="REPLACEABLE">INSERT</tt> statements).
              </p></dd><dt class="NAVHEADER">-c, - -clean</dt><dd class="calibre16"><p class="calibre9">                Causes any <tt class="REPLACEABLE">DROP</tt> SQL statements to be executed before creating database objects.
                Without the <span><i class="EMPHASIS">-c</i></span> flag, these statements are ignored, even if they are present in the dump file.
              </p></dd><dt class="NAVHEADER">-C, - -create</dt><dd class="calibre16"><p class="calibre9">                Causes the <tt class="REPLACEABLE">CREATE DATABASE</tt> SQL statement (if found in the dump file) to be
                executed. Without the <span><i class="EMPHASIS">-C</i></span> flag, the statement is ignored.
              </p></dd><dt class="NAVHEADER">-d <tt class="REPLACEABLE"><i class="EMPHASIS">NAME</i></tt>, - -dbname=<tt class="REPLACEABLE"><i class="EMPHASIS">NAME</i></tt></dt><dd class="calibre16"><p class="calibre9">                Specifies the database called <tt class="REPLACEABLE"><i class="EMPHASIS">NAME</i></tt> to be connected to for the restoration. If the
                <span><i class="EMPHASIS">-C</i></span> flag is used to create a new database, the <span><i class="EMPHASIS">-d</i></span> flag should
                be pointed to <tt class="REPLACEABLE">template1</tt>. If this parameter is not specified, the commands to restore
                the database will instead be displayed to <span><i class="EMPHASIS">stdout</i></span> rather than sent to PostgreSQL.
              </p></dd><dt class="NAVHEADER">-f <tt class="REPLACEABLE"><i class="EMPHASIS">FILENAME</i></tt>, - -file=<tt class="REPLACEABLE"><i class="EMPHASIS">FILENAME</i></tt></dt><dd class="calibre16"><p class="calibre9">                Indicates that <tt class="REPLACEABLE"><i class="EMPHASIS">FILENAME</i></tt> is the target for the database restoration SQL commands, rather than
                a the <span><i class="EMPHASIS">postmaster</i></span> backend (with the <span><i class="EMPHASIS">-d</i></span> flag), or <span><i class="EMPHASIS">stdout</i></span>
                (the default).
              </p></dd><dt class="NAVHEADER">-F { c | t }, - -format={ c | t }</dt><dd class="calibre16"><p class="calibre9">                Specifies the format of the input file, <tt class="REPLACEABLE"><i class="EMPHASIS">FILENAME</i></tt>. A value of <span><i class="EMPHASIS">c</i></span>
                indicates that it is a compressed and tarred dump, while <span><i class="EMPHASIS">t</i></span> indicates that it is only
                tarred. Note that this option is usually not necessary, as <span><i class="EMPHASIS">pg_restore</i></span> can judge
                what kind of file it is dealing with through its header data.
              </p></dd><dt class="NAVHEADER">-h <tt class="REPLACEABLE"><i class="EMPHASIS">HOSTNAME</i></tt>, - -host=<tt class="REPLACEABLE"><i class="EMPHASIS">HOSTNAME</i></tt></dt><dd class="calibre16"><p class="calibre9">                Specifies that you should connect to <tt class="REPLACEABLE"><i class="EMPHASIS">HOSTNAME</i></tt>, rather than the localhost.
              </p></dd><dt class="NAVHEADER">-i, - -index</dt><dd class="calibre16"><p class="calibre9">                Specifies that <span><i class="EMPHASIS">only</i></span> indices be recreated. Note that due to a bug, the <span><i class="EMPHASIS">-i</i></span>
                flag may not work, though the <span><i class="EMPHASIS">- -index</i></span> flag should (as of PostgreSQL 7.1.x).
              </p></dd><dt class="NAVHEADER">-l, - -list</dt><dd class="calibre16"><p class="calibre9">                Specifies that only the table of contents of database objects should be output in a comma-delimited, PostgreSQL
                specific TOC (table of contents) format. This output can be redirected to a file (either with shell redirection
                via the &lt; character, or with the <span><i class="EMPHASIS">-f</i></span> flag) and later used with the <span><i class="EMPHASIS">-L</i></span>
                flag to control what database objects are restored.
              </p></dd><dt class="NAVHEADER">-L <tt class="REPLACEABLE"><i class="EMPHASIS">FILENAME</i></tt>, - -use-list=<tt class="REPLACEABLE"><i class="EMPHASIS">FILENAME</i></tt></dt><dd class="calibre16"><p class="calibre9">                Indicates use of the PostgreSQL TOC file <tt class="REPLACEABLE"><i class="EMPHASIS">FILENAME</i></tt> to determine which objects should be
                restored by <span><i class="EMPHASIS">pg_restore</i></span>. This file is generated using the <span><i class="EMPHASIS">-l</i></span>
                flag.  After generating the file, delete lines for objects you do now wish to restore, or preface those lines with a semicolon (;).
                When <span><i class="EMPHASIS">-L</i></span> is used, <span><i class="EMPHASIS">pg_restore</i></span> only restores those objects listed
                in the specified TOC file.
              </p></dd><dt class="NAVHEADER">-N, - -orig-order</dt><dd class="calibre16"><p class="calibre9">                Causes the restore to occur in the same order that the <span><i class="EMPHASIS">pg_dump</i></span> originally dumped the objects
                in (through the use of the extra TOC information in a <span><i class="EMPHASIS">tar</i></span> or
                <span><i class="EMPHASIS">gzip</i></span>-compressed format). This is not the same as the literal order in which the statements are
                placed in the dump file itself, which is the default restore order. This option excludes the use of the
                <span><i class="EMPHASIS">-o</i></span> or <span><i class="EMPHASIS">-r</i></span> options.
              </p><p class="calibre9">                If, during a restoration, database objects are created in an incorrect order (e.g., an object which relies on
                another existing object is created before the object it relies on), you can re-initialize a database and try this
                flag to override the order which was originally chosen by <span><i class="EMPHASIS">pg_dump</i></span>.
              </p></dd><dt class="NAVHEADER">-o, - -oid-order</dt><dd class="calibre16"><p class="calibre9">                Causes the restore to occur strictly in the order of OIDs, ascending; this option excludes the use of the
                <span><i class="EMPHASIS">-N</i></span> or <span><i class="EMPHASIS">-r</i></span> options.
              </p></dd><dt class="NAVHEADER">-O, - -no-owner</dt><dd class="calibre16"><p class="calibre9">                Forces <span><i class="EMPHASIS">pg_restore</i></span> to ignore any <tt class="REPLACEABLE">\connect</tt> statements which
                would be used to enforce ownership.
              </p></dd><dt class="NAVHEADER">-p <tt class="REPLACEABLE"><i class="EMPHASIS">PORT</i></tt>, - -port=<tt class="REPLACEABLE"><i class="EMPHASIS">PORT</i></tt></dt><dd class="calibre16"><p class="calibre9">                Specifies that the database connection should be made on port <tt class="REPLACEABLE"><i class="EMPHASIS">PORT</i></tt>, rather than the
                default port (usually 5432, though it may have been configured differently when PostgreSQL was
                compiled, by the <span><i class="EMPHASIS">- -with-pgport</i></span> flag).
              </p></dd><dt class="NAVHEADER">-P, - -function</dt><dd class="calibre16"><p class="calibre9">                Specifies that <span><i class="EMPHASIS">only</i></span> functions are to be recreated. Like the <span><i class="EMPHASIS">-i</i></span>
                flag, due to a bug, the <span><i class="EMPHASIS">-P</i></span> flag may not work, though the <span><i class="EMPHASIS">- -function</i></span> flag should,
                as of PostgreSQL 7.1.x.
              </p></dd><dt class="NAVHEADER">-r, - -rearrange</dt><dd class="calibre16"><p class="calibre9">                Causes the restore to occur in the order chosen by <span><i class="EMPHASIS">pg_dump</i></span> at the time of the dump file's
                creation.  Most of the objects are created in OID order with this option, though statements creating rules and
                indices are placed towards the end of the file. This option is the default.
              </p></dd><dt class="NAVHEADER">-R, - -no-reconnect</dt><dd class="calibre16"><p class="calibre9">                Forces <span><i class="EMPHASIS">pg_restore</i></span> to ignore <span><i class="EMPHASIS">all</i></span> <tt class="REPLACEABLE">\connect</tt>
                statements (not just those intended to enforce ownership). This cannot be used with the <span><i class="EMPHASIS">-C</i></span>
                flag, which requires at least one reconnection after the creation of a new database.
              </p></dd><dt class="NAVHEADER">-s, - -schema-only</dt><dd class="calibre16"><p class="calibre9">                Causes only the creation of database schema objects, such as tables, views, sequences, and indices. No rows will
                be copied or inserted into the tables, and sequences will initialize to their default values. This can be used, for example,
                to create an empty production database that matches the structure of a development database.
              </p></dd><dt class="NAVHEADER">-S <tt class="REPLACEABLE"><i class="EMPHASIS">NAME</i></tt>, - -superuser=<tt class="REPLACEABLE"><i class="EMPHASIS">NAME</i></tt></dt><dd class="calibre16"><p class="calibre9">                Specifies the superuser with username <tt class="REPLACEABLE"><i class="EMPHASIS">NAME</i></tt> to be used in disabling triggers (if necessary, to
                recreate a trigger), as well as to set ownership of schema elements.
              </p></dd><dt class="NAVHEADER">-t <tt class="REPLACEABLE"><i class="EMPHASIS">NAME</i></tt>, - -table[=<tt class="REPLACEABLE"><i class="EMPHASIS">NAME</i></tt>]</dt><dd class="calibre16"><p class="calibre9">                Causes only the table <tt class="REPLACEABLE"><i class="EMPHASIS">NAME</i></tt> to be restored, rather than all database objects.
                Specifying just <span><i class="EMPHASIS">- -table</i></span> causes only tables to be restored.
              </p></dd><dt class="NAVHEADER">-T <tt class="REPLACEABLE"><i class="EMPHASIS">NAME</i></tt>, - -trigger[=<tt class="REPLACEABLE"><i class="EMPHASIS">NAME</i></tt>]</dt><dd class="calibre16"><p class="calibre9">                Causes only the trigger <tt class="REPLACEABLE"><i class="EMPHASIS">NAME</i></tt> to be restored, rather than all database objects.
                Specifying just <span><i class="EMPHASIS">- -trigger</i></span> causes only triggers to be restored.
              </p></dd><dt class="NAVHEADER">-u, - -password</dt><dd class="calibre16"><p class="calibre9">                Causes <span><i class="EMPHASIS">pg_restore</i></span> to provide a prompt for a username and password.
              </p></dd><dt class="NAVHEADER">-v, - -verbose</dt><dd class="calibre16"><p class="calibre9">                Causes verbose output of each action as it is performed. This output is sent to <span><i class="EMPHASIS">stderr</i></span>,
                rather than <span><i class="EMPHASIS">stdout</i></span>.
              </p></dd><dt class="NAVHEADER">-x, - -no-acl</dt><dd class="calibre16"><p class="calibre9">                Suppresses any SQL <tt class="REPLACEABLE">GRANT</tt> or <tt class="REPLACEABLE">REVOKE</tt> statement
                in the dump being restored.
              </p></dd></dl></div>
<p class="calibre9"><a href="x17860.htm#RESTORINGWITHPGRESTORE">Example 9-24</a> demonstrates a restoration of the <tt class="REPLACEABLE">booktown</tt>
        database on a separate machine from which the original was made. It uses the <span><i class="EMPHASIS">booktown.sql.tar</i></span> file
        created in <a href="x17860.htm#USINGPGDUMPREMOTELY">Example 9-21</a>, in <a href="x17860.htm#USINGPGDUMP">the Section called <i class="EMPHASIS">Using pg_dump</i></a>," earlier in this chapter, as the source
        for the restoration.</p><div class="NAVHEADER"><a name="RESTORINGWITHPGRESTORE"></a><p class="calibre9"><b class="calibre10">Example 9-24. Restore with pg_restore</b></p><pre class="SCREEN">[jworsley@cmd ~]$ <tt class="REPLACEABLE"><b class="calibre10">pg_restore -v -C -O -d template1 booktown.sql.tar</b></tt>
Connecting to database for restore
Creating DATABASE booktown
Connecting to new DB 'booktown' as postgres
Connecting to booktown as postgres
Creating COMMENT DATABASE "booktown"
Creating TABLE inventory

[...]</pre></div><p class="calibre9">You can see upon examining the <span><i class="EMPHASIS">pg_restore</i></span> command in <a href="x17860.htm#RESTORINGWITHPGRESTORE">Example 9-24</a> that it
        uses the <span><i class="EMPHASIS">-v</i></span> flag for verbose output as it operates, the <span><i class="EMPHASIS">-C</i></span> flag to create the
        database (as this is a new database on this machine), and the <span><i class="EMPHASIS">-O</i></span> flag to ignore ownership from the
        original database (as the users on another machine are not guaranteed to exist locally). Notice also the
        <span><i class="EMPHASIS">-d</i></span> flag is used to connect to the <tt class="REPLACEABLE">template1</tt> database before creating, and
        connecting to, the <tt class="REPLACEABLE">booktown</tt> database. </p><p class="calibre9">Note that the use of the <span><i class="EMPHASIS">-O</i></span> flag can be dangerous if ownership is an important part of the
        recreation of a database. It can play a helpful role in moving from a development environment to a production
        environment (e.g., if test or development account names were associated with various database objects). However, if a
        database is being restored on an existing machine (e.g., from a nightly backup), it is not recommended that the
        <span><i class="EMPHASIS">-O</i></span> flag be used.</p><div class="NAVHEADER"><p class="calibre9"></p><table class="calibre" border="1" width="100%"><tr class="calibre1"><td class="calibre23"><b class="calibre10">Warning</b></td></tr><tr class="calibre1"><td class="calibre15"><p class="calibre9">Remember that <span><i class="EMPHASIS">pg_restore</i></span> exists only for files that are output in either
          <span><i class="EMPHASIS">tar</i></span> format (<span><i class="EMPHASIS">t</i></span>), or compressed <span><i class="EMPHASIS">tar</i></span> format
          (<span><i class="EMPHASIS">c</i></span>). Plain text SQL dumps may be processed with <span><i class="EMPHASIS">psql</i></span>, as
          documented in <a href="x17860.htm#USINGPSQLFORPLAINTEXTDUMPS">the Section called <i class="EMPHASIS">Using psql for plain text dumps</i></a>," earlier in this chapter.</p></td></tr></table></div></div></div><div class="NAVHEADER"><h2 class="SECT"><a name="AEN18531" class="calibre8">When to Backup and Restore Data</a></h2><p class="calibre9">An important consideration to the use of the <span><i class="EMPHASIS">pg_dump</i></span>, <span><i class="EMPHASIS">pg_dumpall</i></span>, and
      <span><i class="EMPHASIS">pg_restore</i></span> commands is <span><i class="EMPHASIS">when</i></span> to use them, and when not to. Fortunately, in respect
      to each of these procedures, PostgreSQL is quite accommodating.</p><div class="NAVHEADER"><h3 class="AUTHOR"><a name="AEN18538" class="calibre8">When to backup</a></h3><p class="calibre9">With regards to backing up data with either <span><i class="EMPHASIS">pg_dump</i></span> or <span><i class="EMPHASIS">pg_dumpall</i></span>, there
        are few considerations necessary for when they may be performed. PostgreSQL has supported <span><i class="EMPHASIS">hot backup</i></span>
        procedures since Version 6.5—these allow you to request data without blocking the normal activity of other concurrent
        users. It is called a hot backup because it is performed while the system is running, uninterrupted.</p><p class="calibre9">Therefore, the only potential considerations for backup PostgreSQL  center around performance. An
        exceptionally large database may take a while to dump all of its contents. The use of large objects may also be a factor
        if you intend to back up large object data with <span><i class="EMPHASIS">pg_dump</i></span>'s <span><i class="EMPHASIS">-b</i></span> flag (thus, adding
        to the amount of data needing to be output).</p><p class="calibre9">If you have a large database that takes a substantial amount of time to complete a dump, it is recommended that you
        schedule the <span><i class="EMPHASIS">pg_dump</i></span> execution for a time when the database is not heavily used. Even though a dump
        does not block users from requesting and completing transactions, it can still slow down the general performance of such
        a system during heavy, or even medium usage.</p></div><div class="NAVHEADER"><h3 class="AUTHOR"><a name="AEN18549" class="calibre8">When to restore</a></h3><p class="calibre9">With respect to restoration there are several more considerations to be taken into account than when merely backing
        up data. Specifically, these apply to how "deep" a restoration must go; restoring just the data is a very different
        operation from totally recreating the database from scratch, and the restrictions involved scale with the depth of the
        operation.</p><p class="calibre9">The least restrictive kind of restoration is one which restores data <span><i class="EMPHASIS">only</i></span>. This can be
        executed while users are actively connected to the database. It may even be executed while connected users are in the
        middle of transactions. This is possible through PostgreSQL's multiversion control. Such a restore can be performed on
        the fly, without having to restart the database system. Once modifications are synchronized with the database, the
        changes are immediately available to connected users.</p><p class="calibre9">A restoration involving dropping and recreating database schema (e.g., tables, views, etc.) may also be performed
        while the system is running. This method is not as seamless as a data-only restoration, because database objects will
        briefly be removed from the system, which may cause temporary problems to applications relying on certain objects to
        exist. The exact nature of such a restriction is dependent on the nature of the application accessing the
        database.</p><p class="calibre9">The most restrictive kind of restoration is one which involves dropping the database itself. If such a restoration
        is scheduled, it <span><i class="EMPHASIS">must</i></span> be done at a time when no other user is connected to that database. The
        <tt class="REPLACEABLE">DROP DATABASE</tt> command will fail if any user is actively connected at the time it is
        executed.</p><p class="calibre9">It may in fact be necessary to shut down and restart PostgreSQL with TCP/IP connections disabled if a highly-used
        database is intended to be dropped and recreated from scratch; this will prevent any external machine from connecting to
        the database server until the work is completed.</p></div></div><div class="NAVHEADER"><h2 class="SECT"><a name="AEN18559" class="calibre8">Backing Up the Filesystem</a></h2><p class="calibre9">While PostgreSQL abstracts the literal data files from its users, all of the data within PostgreSQL databases can be
      found in normal system files. These files are constantly in a state of flux when the database is running, as not all
      changes made in PostgreSQL are immediately written to disk. These files are stored within the PostgreSQL directory (e.g.,
      <span><i class="EMPHASIS">/usr/local/pgsql/data</i></span>, or whatever path is specified by the
      <tt class="REPLACEABLE">PGDATA</tt> environment variable).</p><p class="calibre9">Rather than creating a set of SQL instructions to re-create a database, you may instead opt to stop the PostgreSQL
      server (in order to ensure that all changes are synchronized with the hard disk) and create a backup of that area of the
      filesystem. Typically this is done with the <span><i class="EMPHASIS">tar</i></span> utility, and optionally compressed with a compression
      utility such as <span><i class="EMPHASIS">gzip</i></span>.</p><p class="calibre9"><a href="x17860.htm#BACKINGUPTHEPOSTGRESQLFILESYSTEM">Example 9-25</a> demonstrates the backing up of a filesystem in which PostgreSQL
      keeps its data, as performed by the user who owns the data files (which is the same user that runs PostgreSQL's backend). In
      this case, the path is <span><i class="EMPHASIS">/usr/local/pgsql/data</i></span>, and the system user is
      <span><i class="EMPHASIS">postgres</i></span>.</p><div class="NAVHEADER"><a name="BACKINGUPTHEPOSTGRESQLFILESYSTEM"></a><p class="calibre9"><b class="calibre10">Example 9-25. Backing up the PostgreSQL filesystem</b></p><pre class="SCREEN">[postgres@booktown ~]$ <tt class="REPLACEABLE"><b class="calibre10">cd /usr/local/pgsql</b></tt>
[postgres@booktown pgsql]$ <tt class="REPLACEABLE"><b class="calibre10">pg_ctl stop</b></tt>
Smart Shutdown request at Fri Sep 14 14:54:15 2001
DEBUG:  shutting down
waiting for postmaster to shut down......DEBUG:  database system is shut down
done
postmaster successfully shut down
[postgres@booktown pgsql]$ <tt class="REPLACEABLE"><b class="calibre10">tar czf pgsql.bak.tar.gz data/</b></tt>
[postgres@booktown pgsql]$ <tt class="REPLACEABLE"><b class="calibre10">ls -l *.tar.gz</b></tt>
-rw-rw-r- -    1 postgres postgres 66124795 Sep 14 14:36 pgsql.bak.tar.gz</pre></div><p class="calibre9">Notice that the <span><i class="EMPHASIS">pg_ctl</i></span> command is called before the <span><i class="EMPHASIS">tar</i></span> process, to stop
      the PostgreSQL backend (if installed, the SysV script may be invoked with the <span><i class="EMPHASIS">service</i></span> command to the
      same end). As stated, this is to ensure that the most recent changes to the database have been synchronized with the hard
      disk, as well as to verify that none of the data files are modified while backed up.</p><p class="calibre9">The primary advantage to backing up your data in this fashion is that you have a <span><i class="EMPHASIS">literal</i></span> backup of
      PostgreSQL's data files. In order to restore a crashed database from this kind of file, it needs to be decompressed in the
      appropriate location, and for the backend to be re-started. There is no need for negotiation of options, ownership, or
      potential conflicts between the <span><i class="EMPHASIS">pg_dump</i></span> output and restoring it to a live PostgreSQL server through
      sequential SQL statements.</p><p class="calibre9">However, while this method is easier to implement, it presents several limitations. First, the database must be shut
      down completely to backup or restore the data, eliminating the primary advantage of a hot backup-capable DBMS, which is
      limited downtime. Further, it is not possible to backup only specific databases, or tables. The entire data directory must
      be backed up for a complete restoration of the filesystem. This is because there are many files associated with a
      particular database, and it is not obvious which files correlate to which databases.</p><p class="calibre9">Finally, because more than abstract information is represented on disk by a live database, a much greater amount of
      disk space is required to backup even a compressed copy of the entire data directory.</p></div></div><div class="NAVHEADER"><hr width="100%" class="calibre6"/><table summary="Footer navigation table" width="100%" border="0" cellpadding="0" cellspacing="0" class="calibre"><tr class="calibre1"><td width="33%" valign="top" class="calibre3"><a href="x17549.htm" accesskey="P">Prev</a></td><td width="34%" valign="top" class="calibre4"><a href="book1.htm" accesskey="H">Home</a></td><td width="33%" valign="top" class="calibre5"><a href="c18591.htm" accesskey="N">Next</a></td></tr><tr class="calibre1"><td width="33%" valign="top" class="calibre3">Maintaining a Database</td><td width="34%" valign="top" class="calibre4"><a href="c16573.htm" accesskey="U">Up</a></td><td width="33%" valign="top" class="calibre5">User and Group Management</td></tr></table></div></div>

{% endraw %}

