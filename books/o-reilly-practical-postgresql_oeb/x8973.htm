---
layout: page
title: "Unknown"
prev: c7547.htm
next: c12119.htm
book_path: books/o-reilly-practical-postgresql_oeb/
---
{% include JB/setup %}
{% raw %}
<div>
<div class="NAVHEADER"><table summary="Header navigation table" width="100%" border="0" cellpadding="0" cellspacing="0" class="calibre"><tr class="calibre1"><th colspan="3" class="calibre2">Practical PostgreSQL</th></tr><tr class="calibre1"><td width="10%" valign="bottom" class="calibre3"><a href="c7547.htm" accesskey="P">Prev</a></td><td width="80%" valign="bottom" class="calibre4">Chapter 5. Operators and Functions</td><td width="10%" valign="bottom" class="calibre5"><a href="c12119.htm" accesskey="N">Next</a></td></tr></table><hr width="100%" class="calibre6"/></div><div class="NAVHEADER"><h1 class="calibre7"><a name="FUNCTIONS" class="calibre8">Functions</a></h1><p class="calibre9">A <span><i class="EMPHASIS">function</i></span> is an identifier that instructs PostgreSQL to perform a programmatic operation within
    a SQL statement. A function returns a single value from its operation, and that value is then used in the SQL statement where
    the function was invoked. This process is similar to the way operators return their results in the location from which they
    were called in the query.  (In fact, operators are technically pointers to built-in system functions, and are sometimes
    called "syntactic sugar" for functions, as they are a syntactically convenient way to call underlying functions.)</p><div class="NAVHEADER"><h2 class="SECT"><a name="AEN8979" class="calibre8">Using Functions</a></h2><p class="calibre9">To use a function in a SQL statement, type the function's name, followed by its list of parameters
      (called <span><i class="EMPHASIS">arguments</i></span>), if any. The arguments passed to a function are enclosed in parentheses. There
      are two general styles of entering arguments: the standard SQL92 functions are generally implemented
      so that they accept their arguments delimited by special SQL keywords, such as
      <tt class="REPLACEABLE">FROM</tt>, <tt class="REPLACEABLE">FOR</tt>, and <tt class="REPLACEABLE">USING</tt>.
      PostgreSQL-style functions, on the other hand, accept arguments delimited by commas (which you might expect if you
      have experience with a programming language such as C).</p><p class="calibre9">Arguments may be constants, valid identifiers, or expressions. The particular arguments you need to pass to a function
      will depend completely on the function being used, and its requirements: especially with regards to data types.  With a
      couple of exceptions, all functions require the open and closing parentheses following the function name, even if no
      arguments are passed.</p><pre class="SCREEN"> <tt class="REPLACEABLE"><i class="EMPHASIS">sql92_style_function</i></tt> ( { <tt class="REPLACEABLE"><i class="EMPHASIS">argument</i></tt> | <tt class="REPLACEABLE"><i class="EMPHASIS">KEYWORD</i></tt> } [...] )
  <tt class="REPLACEABLE"><i class="EMPHASIS">pgsql_style_function</i></tt> ( <tt class="REPLACEABLE"><i class="EMPHASIS">argument</i></tt> [, ...] )</pre><div class="NAVHEADER"><blockquote class="NOTE"><p class="calibre9"><b class="calibre10">Note: </b>The exceptions to the parenthetical function syntax are the SQL92 functions <tt class="REPLACEABLE">current_date</tt>,
        <tt class="REPLACEABLE">current_time</tt>, and <tt class="REPLACEABLE">current_timestamp</tt>. These lack parentheses
        to remain compatible with the SQL92 specification.</p></blockquote></div><p class="calibre9">A powerful use of functions is that they may be nested, provided that the data type returned by a nested function is
      compatible with the argument accepted by the function it is nested within. Functions may be nested to any depth:</p><pre class="SCREEN"> <tt class="REPLACEABLE"><i class="EMPHASIS">function_name</i></tt> ( <tt class="REPLACEABLE"><i class="EMPHASIS">nested_function_name</i></tt> ( <tt class="REPLACEABLE"><i class="EMPHASIS">arguments</i></tt> [, ...] ) [, ...] )</pre><p class="calibre9">PostgreSQL defines a rich set of functions for its built-in data types. To view a complete list of functions available,
      execute the <tt class="REPLACEABLE">\df</tt> slash command within <span><i class="EMPHASIS">psql</i></span>. PostgreSQL
      also supports extensibility of its function set through the <tt class="REPLACEABLE">CREATE FUNCTION</tt> command. See
      <a href="c13329.htm">Chapter 7</a> for more on this topic.</p><div class="NAVHEADER"><blockquote class="NOTE"><p class="calibre9"><b class="calibre10">Note: </b>The default name for a column that is described by a function in the target list will be the name
        of the function, without trailing parentheses, or arguments (e.g., <tt class="REPLACEABLE">to_char</tt>).</p></blockquote></div></div><div class="NAVHEADER"><h2 class="SECT"><a name="MATHEMATICALFUNCTIONS" class="calibre8">Mathematical Functions</a></h2><p class="calibre9">The mathematical functions provided for PostgreSQL operate on a variety of numeric data types, and generally return a
      value of the same type as the function's arguments. They can perform many useful and common arithmetic and trigonometric
      operations; <a href="x8973.htm#MATHEMATICALFUNCTIONSTABLE">Table 5-9</a> provides an overview of some of the most common mathematical
      functions in PostgreSQL.</p><div class="NAVHEADER"><a name="MATHEMATICALFUNCTIONSTABLE"></a><p class="calibre9"><b class="calibre10">Table 5-9. Mathematical functions in PostgreSQL</b></p><table border="1" width="100%" class="calibre"><thead class="calibre11"><tr class="calibre12"><th width="5" valign="TOP" class="calibre13"><p class="calibre9">Function</p></th><th width="24" valign="TOP" class="calibre13"><p class="calibre9">Description</p></th></tr></thead><tbody class="calibre14"><tr class="calibre12"><td width="5" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE">abs(</tt><tt class="REPLACEABLE"><i class="EMPHASIS">x</i></tt> )</p></td><td width="24" valign="TOP" class="calibre15"><p class="calibre9">Returns the absolute value of <tt class="REPLACEABLE"><i class="EMPHASIS">x</i></tt></p></td></tr><tr class="calibre12"><td width="5" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE">acos(</tt><tt class="REPLACEABLE"><i class="EMPHASIS">x</i></tt> )</p></td><td width="24" valign="TOP" class="calibre15"><p class="calibre9">Returns the inverse cosine of <tt class="REPLACEABLE"><i class="EMPHASIS">x</i></tt></p></td></tr><tr class="calibre12"><td width="5" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE">asin(</tt><tt class="REPLACEABLE"><i class="EMPHASIS">x</i></tt> )</p></td><td width="24" valign="TOP" class="calibre15"><p class="calibre9">Returns the inverse sine of <tt class="REPLACEABLE"><i class="EMPHASIS">x</i></tt></p></td></tr><tr class="calibre12"><td width="5" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE">atan(</tt><tt class="REPLACEABLE"><i class="EMPHASIS">x</i></tt> )</p></td><td width="24" valign="TOP" class="calibre15"><p class="calibre9">Returns the inverse tangent of <tt class="REPLACEABLE"><i class="EMPHASIS">x</i></tt></p></td></tr><tr class="calibre12"><td width="5" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE">atan2(</tt><tt class="REPLACEABLE"><i class="EMPHASIS">x</i></tt> , <tt class="REPLACEABLE"><i class="EMPHASIS">y</i></tt> )</p></td><td width="24" valign="TOP" class="calibre15"><p class="calibre9">Returns the inverse tangent of the quotient of <tt class="REPLACEABLE"><i class="EMPHASIS">x</i></tt> and <tt class="REPLACEABLE"><i class="EMPHASIS">y</i></tt></p></td></tr><tr class="calibre12"><td width="5" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE">cbrt(</tt><tt class="REPLACEABLE"><i class="EMPHASIS">x</i></tt> )</p></td><td width="24" valign="TOP" class="calibre15"><p class="calibre9">Returns the cube root of <tt class="REPLACEABLE"><i class="EMPHASIS">x</i></tt></p></td></tr><tr class="calibre12"><td width="5" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE">ceil(</tt><tt class="REPLACEABLE"><i class="EMPHASIS">x</i></tt> )</p></td><td width="24" valign="TOP" class="calibre15"><p class="calibre9">Returns the smallest whole integer not less than argument (rounds up)</p></td></tr><tr class="calibre12"><td width="5" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE">cos(</tt><tt class="REPLACEABLE"><i class="EMPHASIS">x</i></tt> )</p></td><td width="24" valign="TOP" class="calibre15"><p class="calibre9">Returns the cosine of <tt class="REPLACEABLE"><i class="EMPHASIS">x</i></tt></p></td></tr><tr class="calibre12"><td width="5" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE">cot(</tt><tt class="REPLACEABLE"><i class="EMPHASIS">x</i></tt> )</p></td><td width="24" valign="TOP" class="calibre15"><p class="calibre9">Returns the cotangent of <tt class="REPLACEABLE"><i class="EMPHASIS">x</i></tt></p></td></tr><tr class="calibre12"><td width="5" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE">degrees(</tt><tt class="REPLACEABLE"><i class="EMPHASIS">r</i></tt> )</p></td><td width="24" valign="TOP" class="calibre15"><p class="calibre9">Returns degrees from radians <tt class="REPLACEABLE"><i class="EMPHASIS">r</i></tt></p></td></tr><tr class="calibre12"><td width="5" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE">exp(</tt><tt class="REPLACEABLE"><i class="EMPHASIS">x</i></tt> )</p></td><td width="24" valign="TOP" class="calibre15"><p class="calibre9">Returns the <span><i class="EMPHASIS">e</i></span> constant (2.71828...), to the power of <tt class="REPLACEABLE"><i class="EMPHASIS">x</i></tt></p></td></tr><tr class="calibre12"><td width="5" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE">floor(</tt><tt class="REPLACEABLE"><i class="EMPHASIS">x</i></tt> )</p></td><td width="24" valign="TOP" class="calibre15"><p class="calibre9">Returns the largest whole integer not greater than <tt class="REPLACEABLE"><i class="EMPHASIS">x</i></tt> (rounds down)</p></td></tr><tr class="calibre12"><td width="5" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE">ln(</tt><tt class="REPLACEABLE"><i class="EMPHASIS">x</i></tt> )</p></td><td width="24" valign="TOP" class="calibre15"><p class="calibre9">Returns the natural logarithm of <tt class="REPLACEABLE"><i class="EMPHASIS">x</i></tt> (the inverse of the <tt class="REPLACEABLE">exp()</tt> function)</p></td></tr><tr class="calibre12"><td width="5" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE">log(</tt><tt class="REPLACEABLE"><i class="EMPHASIS">b</i></tt> , <tt class="REPLACEABLE"><i class="EMPHASIS">x</i></tt> )</p></td><td width="24" valign="TOP" class="calibre15"><p class="calibre9">Returns the base <tt class="REPLACEABLE"><i class="EMPHASIS">b</i></tt> logarithm of <tt class="REPLACEABLE"><i class="EMPHASIS">x</i></tt></p></td></tr><tr class="calibre12"><td width="5" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE">log(</tt><tt class="REPLACEABLE"><i class="EMPHASIS">x</i></tt> )</p></td><td width="24" valign="TOP" class="calibre15"><p class="calibre9">Returns the base 10 logarithm of <tt class="REPLACEABLE"><i class="EMPHASIS">x</i></tt></p></td></tr><tr class="calibre12"><td width="5" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE">mod(</tt><tt class="REPLACEABLE"><i class="EMPHASIS">x</i></tt> , <tt class="REPLACEABLE"><i class="EMPHASIS">y</i></tt> )</p></td><td width="24" valign="TOP" class="calibre15"><p class="calibre9">Returns the remainder (modulus) when dividing <tt class="REPLACEABLE"><i class="EMPHASIS">x</i></tt> / <tt class="REPLACEABLE"><i class="EMPHASIS">y</i></tt></p></td></tr><tr class="calibre12"><td width="5" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE">pi()</tt></p></td><td width="24" valign="TOP" class="calibre15"><p class="calibre9">Returns the <span><i class="EMPHASIS">pi</i></span> constant (3.14159...)</p></td></tr><tr class="calibre12"><td width="5" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE">pow(</tt><tt class="REPLACEABLE"><i class="EMPHASIS">x</i></tt> , <tt class="REPLACEABLE"><i class="EMPHASIS">y</i></tt> )</p></td><td width="24" valign="TOP" class="calibre15"><p class="calibre9">Returns value of <tt class="REPLACEABLE"><i class="EMPHASIS">x</i></tt> to the exponential power of <tt class="REPLACEABLE"><i class="EMPHASIS">y</i></tt></p></td></tr><tr class="calibre12"><td width="5" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE">radians(</tt><tt class="REPLACEABLE"><i class="EMPHASIS">d</i></tt> )</p></td><td width="24" valign="TOP" class="calibre15"><p class="calibre9">Returns radian equivalent to <tt class="REPLACEABLE"><i class="EMPHASIS">d</i></tt> degrees</p></td></tr><tr class="calibre12"><td width="5" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE">random()</tt></p></td><td width="24" valign="TOP" class="calibre15"><p class="calibre9">Returns a pseudo-random value from 0.0 to 1.0</p></td></tr><tr class="calibre12"><td width="5" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE">round(</tt><tt class="REPLACEABLE"><i class="EMPHASIS">x</i></tt> )</p></td><td width="24" valign="TOP" class="calibre15"><p class="calibre9">Returns <tt class="REPLACEABLE"><i class="EMPHASIS">x</i></tt> rounded to the nearest whole integer</p></td></tr><tr class="calibre12"><td width="5" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE">round(</tt><tt class="REPLACEABLE"><i class="EMPHASIS">x</i></tt> , <tt class="REPLACEABLE"><i class="EMPHASIS">s</i></tt> )</p></td><td width="24" valign="TOP" class="calibre15"><p class="calibre9">Returns the value of <tt class="REPLACEABLE"><i class="EMPHASIS">x</i></tt>, optionally rounded to <tt class="REPLACEABLE"><i class="EMPHASIS">s</i></tt> decimal places</p></td></tr><tr class="calibre12"><td width="5" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE">sin(</tt><tt class="REPLACEABLE"><i class="EMPHASIS">x</i></tt> )</p></td><td width="24" valign="TOP" class="calibre15"><p class="calibre9">Returns the sine of <tt class="REPLACEABLE"><i class="EMPHASIS">x</i></tt></p></td></tr><tr class="calibre12"><td width="5" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE">sqrt(</tt><tt class="REPLACEABLE"><i class="EMPHASIS">x</i></tt> )</p></td><td width="24" valign="TOP" class="calibre15"><p class="calibre9">Returns the square root of <tt class="REPLACEABLE"><i class="EMPHASIS">x</i></tt></p></td></tr><tr class="calibre12"><td width="5" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE">tan(</tt><tt class="REPLACEABLE"><i class="EMPHASIS">x</i></tt> )</p></td><td width="24" valign="TOP" class="calibre15"><p class="calibre9">Returns the tangent of <tt class="REPLACEABLE"><i class="EMPHASIS">x</i></tt></p></td></tr><tr class="calibre12"><td width="5" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE">trunc(</tt><tt class="REPLACEABLE"><i class="EMPHASIS">x</i></tt> )</p></td><td width="24" valign="TOP" class="calibre15"><p class="calibre9">Returns the value of <tt class="REPLACEABLE"><i class="EMPHASIS">x</i></tt>, with any digits past the decimal point truncated</p></td></tr><tr class="calibre12"><td width="5" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE">trunc(</tt><tt class="REPLACEABLE"><i class="EMPHASIS">x</i></tt> , <tt class="REPLACEABLE"><i class="EMPHASIS">s</i></tt> )</p></td><td width="24" valign="TOP" class="calibre15"><p class="calibre9">Returns the value of <tt class="REPLACEABLE"><i class="EMPHASIS">x</i></tt>, with any digits past <tt class="REPLACEABLE"><i class="EMPHASIS">s</i></tt> decimal points truncated</p></td></tr></tbody></table></div><p class="calibre9">The following sections elaborate on each of the functions described in <a href="x8973.htm#MATHEMATICALFUNCTIONSTABLE">Table 5-9</a>,
      detailing required arguments, data types, and functionality. Note that while a function will usually only accept one of
      a set of data types as its arguments, PostgreSQL will attempt to implicitly convert supplied arguments to the required
      types, if necessary. If an implicit type conversion fails, PostgreSQL will supply the appropriate error message, and you
      may need to use an explicit type conversion. See <a href="c1164.htm">Chapter 3</a> for more information on explicitly converting
      types.</p><div class="NAVHEADER"><h3 class="AUTHOR"><a name="AEN9261" class="calibre8">abs()</a></h3><pre class="SCREEN">abs(<tt class="REPLACEABLE"><i class="EMPHASIS">x</i></tt> )</pre><p class="calibre9">The <tt class="REPLACEABLE">abs()</tt> function accepts a single numeric argument <tt class="REPLACEABLE"><i class="EMPHASIS">x</i></tt>, and
        returns its absolute value (distance from zero). It therefore has no effect on positive numbers, but inverts the sign of
        a negative number to a positive number.</p><p class="calibre9">It can accept an argument which is of any of the numeric data types (<tt class="REPLACEABLE">numeric</tt>,
        <tt class="REPLACEABLE">bigint</tt>, <tt class="REPLACEABLE">smallint</tt>,
        <tt class="REPLACEABLE">real</tt>, or <tt class="REPLACEABLE">double precision</tt>), and returns the result in
        form of the same data type which was passed to it.</p><p class="calibre9"><span><i class="EMPHASIS">Example</i></span></p><pre class="SCREEN">testdb=# <tt class="REPLACEABLE"><b class="calibre10">SELECT abs(100) AS abs_positive,</b></tt>
testdb-# <tt class="REPLACEABLE"><b class="calibre10">       abs(-100) AS abs_negative;</b></tt>
 abs_positive | abs_negative
--------------+--------------
          100 |          100
(1 row)</pre></div><div class="NAVHEADER"><h3 class="AUTHOR"><a name="AEN9283" class="calibre8">acos()</a></h3><pre class="SCREEN">acos(<tt class="REPLACEABLE"><i class="EMPHASIS">x</i></tt> )</pre><p class="calibre9">The <tt class="REPLACEABLE">acos()</tt> function accepts a valid cosine, and returns the inverse (or arc)
        cosine of the <tt class="REPLACEABLE">double precision</tt> argument <tt class="REPLACEABLE"><i class="EMPHASIS">x</i></tt> (between –1 and 1) passed
        to it. This effectively returns the inverse of the <tt class="REPLACEABLE">cos()</tt> function. The result is a
        <tt class="REPLACEABLE">double precision</tt> value of an angle, in radians, between 0 and
        <span><i class="EMPHASIS">pi</i></span>.</p><p class="calibre9"><span><i class="EMPHASIS">Example</i></span></p><pre class="SCREEN">testdb=# <tt class="REPLACEABLE"><b class="calibre10">SELECT acos(1), acos(0), acos(-1),</b></tt>
testdb-# <tt class="REPLACEABLE"><b class="calibre10">       acos(cos(1)) AS inverse_example;</b></tt>
 acos |      acos       |       acos       | inverse_example
------+-----------------+------------------+-----------------
    0 | 1.5707963267949 | 3.14159265358979 |               1
(1 row)</pre></div><div class="NAVHEADER"><h3 class="AUTHOR"><a name="AEN9303" class="calibre8">asin()</a></h3><pre class="SCREEN">asin(<tt class="REPLACEABLE"><i class="EMPHASIS">x</i></tt> )</pre><p class="calibre9">The <tt class="REPLACEABLE">asin()</tt> function returns the inverse (or arc) sine of the
        <tt class="REPLACEABLE">double precision</tt> argument <tt class="REPLACEABLE"><i class="EMPHASIS">x</i></tt> (between –1 and 1) passed to it. Like
        <tt class="REPLACEABLE">acos()</tt>, this effectively returns the inverse of the
        <tt class="REPLACEABLE">sin()</tt> function. The result is a <tt class="REPLACEABLE">double precision</tt>
        value of an angle, in radians, between <span><i class="EMPHASIS">pi / 2</i></span> and <span><i class="EMPHASIS">–pi / 2</i></span>.</p><p class="calibre9"><span><i class="EMPHASIS">Example</i></span></p><pre class="SCREEN">testdb=# <tt class="REPLACEABLE"><b class="calibre10">SELECT asin(1), asin(0), asin(-1),</b></tt>
testdb-# <tt class="REPLACEABLE"><b class="calibre10">       asin(sin(1)) AS inverse_example;</b></tt>
      asin       | asin |       asin       | inverse_example
-----------------+------+------------------+-----------------
 1.5707963267949 |    0 | -1.5707963267949 |               1
(1 row)</pre></div><div class="NAVHEADER"><h3 class="AUTHOR"><a name="AEN9325" class="calibre8">atan()</a></h3><pre class="SCREEN">atan(<tt class="REPLACEABLE"><i class="EMPHASIS">x</i></tt> )</pre><p class="calibre9">The <tt class="REPLACEABLE">atan()</tt> function returns the inverse (or arc) tangent of a
        <tt class="REPLACEABLE">double precision</tt> argument <tt class="REPLACEABLE"><i class="EMPHASIS">x</i></tt> passed to it, which
        effectively returns the inverse of the <tt class="REPLACEABLE">tan()</tt> function.  The result is
        a <tt class="REPLACEABLE">double precision</tt> value of an angle, in radians, between
        <span><i class="EMPHASIS">pi / 2</i></span> and <span><i class="EMPHASIS">–pi / 2</i></span>.</p><p class="calibre9"><span><i class="EMPHASIS">Example</i></span></p><pre class="SCREEN">testdb=# <tt class="REPLACEABLE"><b class="calibre10">SELECT atan(1), atan(0), atan(-1),</b></tt>
testdb-# <tt class="REPLACEABLE"><b class="calibre10">       atan(tan(1)) AS inverse_example;</b></tt>
       atan        | atan |        atan        | inverse_example
-------------------+------+--------------------+-----------------
 0.785398163397448 |    0 | -0.785398163397448 |               1
(1 row)</pre></div><div class="NAVHEADER"><h3 class="AUTHOR"><a name="AEN9346" class="calibre8">atan2()</a></h3><pre class="SCREEN">atan2(<tt class="REPLACEABLE"><i class="EMPHASIS">x</i></tt> , <tt class="REPLACEABLE"><i class="EMPHASIS">y</i></tt> )</pre><p class="calibre9">Similar to the <tt class="REPLACEABLE">atan()</tt> function, the <tt class="REPLACEABLE">atan2()</tt>
        returns the inverse (or arc) tangent in the form of a <tt class="REPLACEABLE">double precision</tt> value of an
        angle, in radians, between <span><i class="EMPHASIS">pi / 2</i></span> and <span><i class="EMPHASIS">–pi / 2</i></span>. Unlike <tt class="REPLACEABLE">atan()</tt>
<tt class="REPLACEABLE">atan2()</tt> accepts two <tt class="REPLACEABLE">double precision</tt> arguments rather
        than one, and returns the inverse tangent of the quotient of the first argument divided into the second argument.</p><p class="calibre9">In general, <tt class="REPLACEABLE">atan2(</tt><tt class="REPLACEABLE"><i class="EMPHASIS">x</i></tt> , <tt class="REPLACEABLE"><i class="EMPHASIS">y</i></tt> ) is functionally identical to
        <tt class="REPLACEABLE">atan(</tt><tt class="REPLACEABLE"><i class="EMPHASIS">x</i></tt> / <tt class="REPLACEABLE"><i class="EMPHASIS">y</i></tt>), though specifying a <tt class="REPLACEABLE"><i class="EMPHASIS">y</i></tt> value of 0
        will not cause a divide by zero error with <tt class="REPLACEABLE">atan2</tt>, as it would if dividing
        <tt class="REPLACEABLE"><i class="EMPHASIS">x</i></tt> / <tt class="REPLACEABLE"><i class="EMPHASIS">y</i></tt> to the <tt class="REPLACEABLE">atan()</tt> function. If
        <tt class="REPLACEABLE"><i class="EMPHASIS">y</i></tt> is specified to <tt class="REPLACEABLE">atan2()</tt> as zero, the resultant value will be
        <span><i class="EMPHASIS">pi / 2</i></span> for a positive value of <tt class="REPLACEABLE"><i class="EMPHASIS">x</i></tt>, <span><i class="EMPHASIS">–pi / 2</i></span> for a
        negative value of <tt class="REPLACEABLE"><i class="EMPHASIS">x</i></tt>, or 0 for a zero value of <tt class="REPLACEABLE"><i class="EMPHASIS">x</i></tt>.</p><p class="calibre9"><span><i class="EMPHASIS">Example</i></span></p><pre class="SCREEN">testdb=# <tt class="REPLACEABLE"><b class="calibre10">SELECT atan2(0, 1), atan2(1, 1),</b></tt>
testdb-# <tt class="REPLACEABLE"><b class="calibre10">       atan(0 / 1) AS functionally,</b></tt>
testdb-# <tt class="REPLACEABLE"><b class="calibre10">       atan(1 / 1) AS identical;</b></tt>
 atan2 |       atan2       | functionally |     identical
-------+-------------------+--------------+-------------------
     0 | 0.785398163397448 |            0 | 0.785398163397448
(1 row)

testdb=# <tt class="REPLACEABLE"><b class="calibre10">SELECT atan2(1, 0) AS positive_x,</b></tt>
testdb-# <tt class="REPLACEABLE"><b class="calibre10">       atan2(-1, 0) AS negative_x,</b></tt>
testdb-# <tt class="REPLACEABLE"><b class="calibre10">       atan2(0, 0) AS zero_x,</b></tt>
testdb-# <tt class="REPLACEABLE"><b class="calibre10">       pi() / 2 AS pi_over_two;</b></tt>
   positive_x    |    negative_x    | zero_x |   pi_over_two
-----------------+------------------+--------+-----------------
 1.5707963267949 | -1.5707963267949 |      0 | 1.5707963267949
(1 row)</pre></div><div class="NAVHEADER"><h3 class="AUTHOR"><a name="AEN9393" class="calibre8">cbrt()</a></h3><pre class="SCREEN">cbrt(<tt class="REPLACEABLE"><i class="EMPHASIS">x</i></tt> )</pre><p class="calibre9">The <tt class="REPLACEABLE">cbrt()</tt> function accepts a single <tt class="REPLACEABLE">double precision</tt>
        argument <tt class="REPLACEABLE"><i class="EMPHASIS">x</i></tt>, and returns its cubed root as a <tt class="REPLACEABLE">double precision</tt> value.
        This function is effectively the inverse of raising a number by the power of 3 with the <tt class="REPLACEABLE">pow</tt>
        function.</p><p class="calibre9"><span><i class="EMPHASIS">Example</i></span></p><pre class="SCREEN">testdb=# <tt class="REPLACEABLE"><b class="calibre10">SELECT pow(2.0, 3) AS "two cubed",</b></tt>
testdb-# <tt class="REPLACEABLE"><b class="calibre10">       cbrt(8.0) AS "eight's cube root";</b></tt>
 two cubed | eight's cube root
-----------+-------------------
         8 |                 2
(1 row)</pre></div><div class="NAVHEADER"><h3 class="AUTHOR"><a name="AEN9412" class="calibre8">ceil()</a></h3><pre class="SCREEN">ceil(<tt class="REPLACEABLE"><i class="EMPHASIS">x</i></tt> )</pre><p class="calibre9">The <tt class="REPLACEABLE">ceil()</tt> function accepts a value <tt class="REPLACEABLE"><i class="EMPHASIS">x</i></tt> of any
        numeric data type (<tt class="REPLACEABLE">numeric</tt>, <tt class="REPLACEABLE">bigint</tt>,
        <tt class="REPLACEABLE">smallint</tt>, <tt class="REPLACEABLE">real</tt>, or
        <tt class="REPLACEABLE">double precision</tt>), and rounds it up to the smallest whole
        integer greater than the passed value. If a whole integer is passed, <tt class="REPLACEABLE">ceil()</tt>
        has no effect.</p><p class="calibre9"><span><i class="EMPHASIS">Example</i></span></p><pre class="SCREEN">testdb=# <tt class="REPLACEABLE"><b class="calibre10">SELECT ceil(1.0), ceil(1.1), ceil(1.5);</b></tt>
 ceil | ceil | ceil
------+------+------
    1 |    2 |    2
(1 row)</pre></div><div class="NAVHEADER"><h3 class="AUTHOR"><a name="AEN9433" class="calibre8">cos()</a></h3><pre class="SCREEN">cos(<tt class="REPLACEABLE"><i class="EMPHASIS">x</i></tt> )</pre><p class="calibre9">The <tt class="REPLACEABLE">cos()</tt> function accepts a single <tt class="REPLACEABLE">double precision</tt>
        value <tt class="REPLACEABLE"><i class="EMPHASIS">x</i></tt> representing an angle (in radians), and returns its cosine as a
        <tt class="REPLACEABLE">double precision</tt> value.</p><p class="calibre9"><span><i class="EMPHASIS">Example</i></span></p><pre class="SCREEN">testdb=# <tt class="REPLACEABLE"><b class="calibre10">SELECT cos(pi()) AS cos_pi,</b></tt>
testdb-# <tt class="REPLACEABLE"><b class="calibre10">       cos(0) AS cos_zero;</b></tt>
 cos_pi | cos_zero
--------+----------
     -1 |        1
(1 row)</pre></div><div class="NAVHEADER"><h3 class="AUTHOR"><a name="AEN9451" class="calibre8">cot()</a></h3><pre class="SCREEN">cot(<tt class="REPLACEABLE"><i class="EMPHASIS">x</i></tt> )</pre><p class="calibre9">The <tt class="REPLACEABLE">cot()</tt> function accepts a single <tt class="REPLACEABLE">double precision</tt>
        value <tt class="REPLACEABLE"><i class="EMPHASIS">x</i></tt> representing an angle (in radians), and returns its cotangent as a
        <tt class="REPLACEABLE">double precision</tt> value. The argument passed must be non-zero.</p><p class="calibre9"><span><i class="EMPHASIS">Example</i></span></p><pre class="SCREEN">testdb=# <tt class="REPLACEABLE"><b class="calibre10">SELECT cot(1), cot(-1);</b></tt>
        cot        |        cot
-------------------+--------------------
 0.642092615934331 | -0.642092615934331
(1 row)</pre></div><div class="NAVHEADER"><h3 class="AUTHOR"><a name="AEN9468" class="calibre8">degrees()</a></h3><pre class="SCREEN">degrees(<tt class="REPLACEABLE"><i class="EMPHASIS">r</i></tt> )</pre><p class="calibre9">The <tt class="REPLACEABLE">degrees()</tt> function accepts a <tt class="REPLACEABLE">double precision</tt>
        argument <tt class="REPLACEABLE"><i class="EMPHASIS">r</i></tt> representing a value expressed in radians, and converts them into degrees. The result is
        returned as a value of type <tt class="REPLACEABLE">double precision</tt>. <tt class="REPLACEABLE">degrees()</tt>
        is effectively the inverse function of the <tt class="REPLACEABLE">radians()</tt> function.</p><p class="calibre9"><span><i class="EMPHASIS">Example</i></span></p><pre class="SCREEN">testdb=# <tt class="REPLACEABLE"><b class="calibre10">SELECT degrees(acos(-1)) AS half_circle,</b></tt>
testdb-# <tt class="REPLACEABLE"><b class="calibre10">       degrees(pi() * 2) AS full_circle;</b></tt>
 half_circle | full_circle
-------------+-------------
         180 |         360
(1 row)</pre></div><div class="NAVHEADER"><h3 class="AUTHOR"><a name="AEN9488" class="calibre8">exp()</a></h3><pre class="SCREEN">exp(<tt class="REPLACEABLE"><i class="EMPHASIS">x</i></tt> )</pre><p class="calibre9">The <tt class="REPLACEABLE">exp()</tt> function accepts a single <tt class="REPLACEABLE">double precision</tt>
        or <tt class="REPLACEABLE">numeric</tt> argument <tt class="REPLACEABLE"><i class="EMPHASIS">x</i></tt>, and returns the special <tt class="REPLACEABLE"><i class="EMPHASIS">e</i></tt>
        constant, raised to the power passed to the function.</p><p class="calibre9"><span><i class="EMPHASIS">Example</i></span></p><pre class="SCREEN">testdb=# <tt class="REPLACEABLE"><b class="calibre10">SELECT exp(0.0) AS one,</b></tt>
testdb-# <tt class="REPLACEABLE"><b class="calibre10">       exp(1.0) AS e,</b></tt>
testdb-# <tt class="REPLACEABLE"><b class="calibre10">       exp(2.0) AS "e squared";</b></tt>
 one |        e         |    e squared
-----+------------------+------------------
   1 | 2.71828182845905 | 7.38905609893065
(1 row)</pre></div><div class="NAVHEADER"><h3 class="AUTHOR"><a name="AEN9508" class="calibre8">floor()</a></h3><pre class="SCREEN">floor(<tt class="REPLACEABLE"><i class="EMPHASIS">x</i></tt> )</pre><p class="calibre9">The <tt class="REPLACEABLE">floor()</tt> function accepts a single <tt class="REPLACEABLE">numeric</tt>
        value <tt class="REPLACEABLE"><i class="EMPHASIS">x</i></tt>, and rounds it down to the largest whole integer not greater than the passed argument. It
        therefore has no effect on a whole integer.</p><p class="calibre9"><span><i class="EMPHASIS">Example</i></span></p><pre class="SCREEN">testdb=# <tt class="REPLACEABLE"><b class="calibre10">SELECT floor(1.0) AS one, </b></tt>
testdb-# <tt class="REPLACEABLE"><b class="calibre10">       floor(1.1) AS "one point one",</b></tt>
testdb-# <tt class="REPLACEABLE"><b class="calibre10">       floor(1.8) AS "one point eight";</b></tt>
 one | one point one | one point eight
-----+---------------+-----------------
   1 |             1 |               1
(1 row)</pre></div><div class="NAVHEADER"><h3 class="AUTHOR"><a name="AEN9526" class="calibre8">ln()</a></h3><pre class="SCREEN">ln(<tt class="REPLACEABLE"><i class="EMPHASIS">x</i></tt> )</pre><p class="calibre9"><tt class="REPLACEABLE">ln()</tt> accepts a single <tt class="REPLACEABLE">numeric</tt> or
        <tt class="REPLACEABLE">double precision</tt> value <tt class="REPLACEABLE"><i class="EMPHASIS">x</i></tt> and returns the natural logarithm of
        that argument.  This is effectively the inverse of the <tt class="REPLACEABLE">exp()</tt> function, as well as the
        equivalent of selecting the <tt class="REPLACEABLE">log()</tt> of the argument, with base <tt class="REPLACEABLE"><i class="EMPHASIS">e</i></tt>.</p><p class="calibre9"><span><i class="EMPHASIS">Example</i></span></p><pre class="SCREEN">testdb=# <tt class="REPLACEABLE"><b class="calibre10">SELECT ln(10.0) AS natural_log,</b></tt>
testdb-# <tt class="REPLACEABLE"><b class="calibre10">       log(exp(1.0), 10.0) AS natural_log,</b></tt>
testdb-# <tt class="REPLACEABLE"><b class="calibre10">       ln(exp(10.0)) AS inverse_example;</b></tt>
   natural_log    |   natural_log    | inverse_example
------------------+------------------+-----------------
 2.30258509299405 | 2.30258509299404 |              10
(1 row)</pre></div><div class="NAVHEADER"><h3 class="AUTHOR"><a name="AEN9548" class="calibre8">log()</a></h3><pre class="SCREEN">log(<tt class="REPLACEABLE"><i class="EMPHASIS">x</i></tt> )
log(<tt class="REPLACEABLE"><i class="EMPHASIS">b</i></tt> , <tt class="REPLACEABLE"><i class="EMPHASIS">x</i></tt> )</pre><p class="calibre9">The <tt class="REPLACEABLE">log()</tt> function accepts either one or two arguments of
        type <tt class="REPLACEABLE">numeric</tt>. If one argument is specified, <tt class="REPLACEABLE">log(</tt><tt class="REPLACEABLE"><i class="EMPHASIS">x</i></tt> )
        returns the base 10 logarithm of the <tt class="REPLACEABLE"><i class="EMPHASIS">x</i></tt>. If two arguments are specified,
        <tt class="REPLACEABLE">log(</tt><tt class="REPLACEABLE"><i class="EMPHASIS">b</i></tt> , <tt class="REPLACEABLE"><i class="EMPHASIS">x</i></tt> ) returns the base <tt class="REPLACEABLE"><i class="EMPHASIS">b</i></tt> logarithm of
        <tt class="REPLACEABLE"><i class="EMPHASIS">x</i></tt>.</p><p class="calibre9"><span><i class="EMPHASIS">Example</i></span></p><pre class="SCREEN">testdb=# <tt class="REPLACEABLE"><b class="calibre10">SELECT log(12.0) AS log_12,</b></tt>
testdb-# <tt class="REPLACEABLE"><b class="calibre10">       log(10, 12.0) AS log_12,</b></tt>
testdb-# <tt class="REPLACEABLE"><b class="calibre10">       log(3, 12.0) AS "log 12, base 3";</b></tt>
      log_12      |    log_12    | log 12, base 3
------------------+--------------+----------------
 1.07918124604762 | 1.0791812460 |   2.2618595071
(1 row)</pre></div><div class="NAVHEADER"><h3 class="AUTHOR"><a name="AEN9575" class="calibre8">mod()</a></h3><pre class="SCREEN">mod(<tt class="REPLACEABLE"><i class="EMPHASIS">x</i></tt> , <tt class="REPLACEABLE"><i class="EMPHASIS">y</i></tt> )</pre><p class="calibre9">The <tt class="REPLACEABLE">mod</tt> function accepts two numeric arguments, <tt class="REPLACEABLE"><i class="EMPHASIS">x</i></tt> and
        <tt class="REPLACEABLE"><i class="EMPHASIS">y</i></tt>, which may be of type <tt class="REPLACEABLE">numeric</tt>,
        <tt class="REPLACEABLE">integer</tt>, <tt class="REPLACEABLE">smallint</tt>, or
        <tt class="REPLACEABLE">bigint</tt>.  The value returned is the remainder, or modulus, left over from dividing
        <tt class="REPLACEABLE"><i class="EMPHASIS">x</i></tt> / <tt class="REPLACEABLE"><i class="EMPHASIS">y</i></tt>, and is of the same data type which is passed to the function.</p><p class="calibre9"><span><i class="EMPHASIS">Example</i></span></p><pre class="SCREEN">testdb=# <tt class="REPLACEABLE"><b class="calibre10">SELECT mod(5, 5) AS no_remainder,</b></tt>
testdb-# <tt class="REPLACEABLE"><b class="calibre10">       mod(6, 5) AS remainder_one,</b></tt>
testdb-# <tt class="REPLACEABLE"><b class="calibre10">       mod(19, 5) AS remainder_four;</b></tt>
 no_remainder | remainder_one | remainder_four
--------------+---------------+----------------
            0 |             1 |              4
(1 row)</pre></div><div class="NAVHEADER"><h3 class="AUTHOR"><a name="AEN9600" class="calibre8">pi()</a></h3><pre class="SCREEN">pi()</pre><p class="calibre9">The <tt class="REPLACEABLE">pi()</tt> function requires no arguments, and returns the
        <span><i class="EMPHASIS">pi</i></span> constant of roughly 3.14159265358979.</p><p class="calibre9"><span><i class="EMPHASIS">Example</i></span></p><pre class="SCREEN">testdb=# <tt class="REPLACEABLE"><b class="calibre10">SELECT pi() AS "the pi constant";</b></tt>
 the pi constant
------------------
 3.14159265358979
(1 row)</pre></div><div class="NAVHEADER"><h3 class="AUTHOR"><a name="AEN9614" class="calibre8">pow()</a></h3><pre class="SCREEN">pow(<tt class="REPLACEABLE"><i class="EMPHASIS">x</i></tt> , <tt class="REPLACEABLE"><i class="EMPHASIS">y</i></tt> )</pre><p class="calibre9">The <tt class="REPLACEABLE">pow()</tt> function accepts two arguments, <tt class="REPLACEABLE"><i class="EMPHASIS">x</i></tt> and
        <tt class="REPLACEABLE"><i class="EMPHASIS">y</i></tt>, of type <tt class="REPLACEABLE">numeric</tt> or <tt class="REPLACEABLE">double precision</tt>.
        It returns the value of <tt class="REPLACEABLE"><i class="EMPHASIS">x</i></tt> raised to the exponent of <tt class="REPLACEABLE"><i class="EMPHASIS">y</i></tt>. The result is
        returned as a value of the same data type as the passed arguments. Note that the arguments must contain decimal points.</p><p class="calibre9"><span><i class="EMPHASIS">Example</i></span></p><pre class="SCREEN">testdb=# <tt class="REPLACEABLE"><b class="calibre10">SELECT pow(2.0, 3.0) AS "two cubed",</b></tt>
testdb-# <tt class="REPLACEABLE"><b class="calibre10">       pow(2.0, 2.0) AS "two squared",</b></tt>
testdb-# <tt class="REPLACEABLE"><b class="calibre10">       pow(2.0, 1.0) AS "just two";</b></tt>
 two cubed | two squared | just two
-----------+-------------+----------
         8 |           4 |        2
(1 row)</pre></div><div class="NAVHEADER"><h3 class="AUTHOR"><a name="AEN9637" class="calibre8">radians()</a></h3><pre class="SCREEN">radians(<tt class="REPLACEABLE"><i class="EMPHASIS">d</i></tt> )</pre><p class="calibre9">The <tt class="REPLACEABLE">radians()</tt> function accepts a single argument <tt class="REPLACEABLE"><i class="EMPHASIS">d</i></tt> of type
        <tt class="REPLACEABLE">double precision</tt>, specifying degrees. The function returns the equivalent number of
        radians, as a value of type <tt class="REPLACEABLE">double precision</tt>.
        <tt class="REPLACEABLE">radians()</tt> is effectively the inverse of the
        <tt class="REPLACEABLE">degrees()</tt> function.</p><p class="calibre9"><span><i class="EMPHASIS">Example</i></span></p><pre class="SCREEN">testdb=# <tt class="REPLACEABLE"><b class="calibre10">SELECT radians(180) AS half_circle,</b></tt>
testdb-# <tt class="REPLACEABLE"><b class="calibre10">       radians(360) AS full_circle;</b></tt>
   half_circle    |   full_circle
------------------+------------------
 3.14159265358979 | 6.28318530717959
(1 row)</pre></div><div class="NAVHEADER"><h3 class="AUTHOR"><a name="AEN9657" class="calibre8">random()</a></h3><pre class="SCREEN">random()</pre><p class="calibre9">The <tt class="REPLACEABLE">random()</tt> function accepts no arguments, and returns
        a pseudo-random value between 0.0 and 1.0, of type <tt class="REPLACEABLE">double precision</tt>.
        Each invocation of <tt class="REPLACEABLE">random()</tt> returns a different value, even when used in
        multiple places within the same query.</p><p class="calibre9">Typically this function is used in conjunction with mathematical operators (e.g., <tt class="REPLACEABLE">+</tt>
        and <tt class="REPLACEABLE">*</tt>) to set a range of random numbers, and then rounded with an appropriate
        rounding function (e.g., <tt class="REPLACEABLE">round()</tt>, <tt class="REPLACEABLE">trunc()</tt>).</p><p class="calibre9"><span><i class="EMPHASIS">Example</i></span></p><pre class="SCREEN">testdb=# <tt class="REPLACEABLE"><b class="calibre10">SELECT random() AS natural_random,</b></tt>
testdb-# <tt class="REPLACEABLE"><b class="calibre10">       round(random() * 9) + 1 AS one_through_ten,</b></tt>
testdb-# <tt class="REPLACEABLE"><b class="calibre10">       trunc(random() * 99) + 1 AS one_through_one_hundred;</b></tt>
  natural_random   | one_through_ten | one_through_one_hundred
-------------------+-----------------+-------------------------
 0.478887704424042 |               2 |                      37
(1 row)
</pre></div><div class="NAVHEADER"><h3 class="AUTHOR"><a name="AEN9679" class="calibre8">round()</a></h3><pre class="SCREEN">round(<tt class="REPLACEABLE"><i class="EMPHASIS">x</i></tt> )
round(<tt class="REPLACEABLE"><i class="EMPHASIS">x</i></tt> ,<tt class="REPLACEABLE"><i class="EMPHASIS">s</i></tt> )</pre><p class="calibre9">The <tt class="REPLACEABLE">round()</tt> function may accept either one or two arguments. The first argument,
        <tt class="REPLACEABLE"><i class="EMPHASIS">x</i></tt>, of type <tt class="REPLACEABLE">numeric</tt> or <tt class="REPLACEABLE">double precision</tt>,
        is the number that you intend to round. The second optional argument, <tt class="REPLACEABLE"><i class="EMPHASIS">s</i></tt>, of type
        <tt class="REPLACEABLE">integer</tt>, specifies how many digits past the decimal to round from. The result is returned
        as a value of the same type as the first argument.</p><p class="calibre9">If there are more digits specified by <tt class="REPLACEABLE"><i class="EMPHASIS">s</i></tt> than by <tt class="REPLACEABLE"><i class="EMPHASIS">x</i></tt>,
        the extra digits will be padded with zeroes.</p><p class="calibre9"><span><i class="EMPHASIS">Example</i></span></p><pre class="SCREEN">testdb=# <tt class="REPLACEABLE"><b class="calibre10">SELECT round(1.0) AS one,</b></tt>
testdb-# <tt class="REPLACEABLE"><b class="calibre10">       round(1.1) AS "one point one",</b></tt>
testdb-# <tt class="REPLACEABLE"><b class="calibre10">       round(1.5) AS "one point five",</b></tt>
testdb-# <tt class="REPLACEABLE"><b class="calibre10">       round(1.8) AS "one point eight";</b></tt>
 one | one point one | one point five | one point eight
-----+---------------+----------------+-----------------
   1 |             1 |              2 |               2
(1 row)

testdb=# <tt class="REPLACEABLE"><b class="calibre10">SELECT round(1.4949, 1) AS one_digit_scale,</b></tt>
testdb-# <tt class="REPLACEABLE"><b class="calibre10">       round(1.4949, 3) AS three_digit_scale,</b></tt>
testdb-# <tt class="REPLACEABLE"><b class="calibre10">       round(1.4949, 10) AS ten_digit_scale,</b></tt>
testdb-# <tt class="REPLACEABLE"><b class="calibre10">       round(1.4949, 0) AS rounded;</b></tt>
 one_digit_scale | three_digit_scale | ten_digit_scale | rounded
-----------------+-------------------+-----------------+---------
             1.5 |             1.495 |    1.4949000000 |       1
(1 row)</pre></div><div class="NAVHEADER"><h3 class="AUTHOR"><a name="AEN9710" class="calibre8">sin()</a></h3><pre class="SCREEN">sin(<tt class="REPLACEABLE"><i class="EMPHASIS">x</i></tt> )</pre><p class="calibre9">The <tt class="REPLACEABLE">sin()</tt> function accepts a single argument <tt class="REPLACEABLE"><i class="EMPHASIS">x</i></tt> of type
        <tt class="REPLACEABLE">double precision</tt>, representing an angle described in radians. The sine of
        the argument is returned as a value of type <tt class="REPLACEABLE">double precision</tt>.</p><p class="calibre9"><span><i class="EMPHASIS">Example</i></span></p><pre class="SCREEN">testdb=# <tt class="REPLACEABLE"><b class="calibre10">SELECT sin(pi() / 4) AS quarter_pi,</b></tt>
testdb-# <tt class="REPLACEABLE"><b class="calibre10">       sin(pi() / 2) AS half_pi;</b></tt>
    quarter_pi     | half_pi
-------------------+---------
 0.707106781186547 |       1
(1 row)</pre></div><div class="NAVHEADER"><h3 class="AUTHOR"><a name="AEN9728" class="calibre8">sqrt()</a></h3><pre class="SCREEN">sqrt(<tt class="REPLACEABLE"><i class="EMPHASIS">x</i></tt> )</pre><p class="calibre9">The <tt class="REPLACEABLE">sqrt()</tt> function accepts a single argument <tt class="REPLACEABLE"><i class="EMPHASIS">x</i></tt>, of either type
        <tt class="REPLACEABLE">double precision</tt>, or <tt class="REPLACEABLE">numeric</tt>, and returns its square
        root. The returned value is of the same data type passed to it. The <tt class="REPLACEABLE">sqrt</tt> function is
        effectively the inverse of the <tt class="REPLACEABLE">pow()</tt> function, used with a power of
        2.</p><p class="calibre9"><span><i class="EMPHASIS">Example</i></span></p><pre class="SCREEN">testdb=# <tt class="REPLACEABLE"><b class="calibre10">SELECT sqrt(2.0), sqrt(4.0),</b></tt>
testdb-# <tt class="REPLACEABLE"><b class="calibre10">       sqrt(pow(2.0, 2)) AS inverse_example;</b></tt>
      sqrt       | sqrt | inverse_example
-----------------+------+-----------------
 1.4142135623731 |    2 |               2
(1 row)</pre></div><div class="NAVHEADER"><h3 class="AUTHOR"><a name="AEN9748" class="calibre8">tan()</a></h3><pre class="SCREEN">tan(<tt class="REPLACEABLE"><i class="EMPHASIS">x</i></tt> )</pre><p class="calibre9">The <tt class="REPLACEABLE">tan()</tt> function accepts a single argument <tt class="REPLACEABLE"><i class="EMPHASIS">x</i></tt>, of type
        <tt class="REPLACEABLE">double precision</tt>, representing an angle described in radians. The
        tangent of the argument is returned as a value of type <tt class="REPLACEABLE">double precision</tt>.</p><p class="calibre9"><span><i class="EMPHASIS">Example</i></span></p><pre class="SCREEN">testdb=# <tt class="REPLACEABLE"><b class="calibre10">SELECT tan(pi() / 8),</b></tt>
testdb-# <tt class="REPLACEABLE"><b class="calibre10">       tan(0);</b></tt>
        tan        | tan
-------------------+-----
 0.414213562373095 |   0
(1 row)</pre></div><div class="NAVHEADER"><h3 class="AUTHOR"><a name="AEN9766" class="calibre8">trunc()</a></h3><pre class="SCREEN">trunc(<tt class="REPLACEABLE"><i class="EMPHASIS">x</i></tt> )
trunc(<tt class="REPLACEABLE"><i class="EMPHASIS">x</i></tt> , <tt class="REPLACEABLE"><i class="EMPHASIS">s</i></tt> )</pre><p class="calibre9">The <tt class="REPLACEABLE">trunc()</tt> function accepts one or two arguments, <tt class="REPLACEABLE"><i class="EMPHASIS">x</i></tt> and
        <tt class="REPLACEABLE"><i class="EMPHASIS">s</i></tt>. The <tt class="REPLACEABLE"><i class="EMPHASIS">x</i></tt> argument may be of the <tt class="REPLACEABLE">numeric</tt> or
        <tt class="REPLACEABLE">double precision</tt> type, and represents the value to be truncated. The
        <tt class="REPLACEABLE"><i class="EMPHASIS">s</i></tt> argument may be of the <tt class="REPLACEABLE">integer</tt> type.</p><p class="calibre9">If specified, <tt class="REPLACEABLE"><i class="EMPHASIS">s</i></tt> dictates the number of digits allowed to the right of the decimal before
        truncation. If unspecified, any digits past the decimal in <tt class="REPLACEABLE"><i class="EMPHASIS">x</i></tt> are truncated. If more digits are
        specified by <tt class="REPLACEABLE"><i class="EMPHASIS">s</i></tt> than there are represented by <tt class="REPLACEABLE"><i class="EMPHASIS">x</i></tt>, the extra digits will be padded
        with zeroes.</p><p class="calibre9"><span><i class="EMPHASIS">Example</i></span></p><pre class="SCREEN">testdb=# <tt class="REPLACEABLE"><b class="calibre10">SELECT trunc(1.598) AS natural_truncation,</b></tt>
testdb-# <tt class="REPLACEABLE"><b class="calibre10">       trunc(1.598, 1) AS one_decimal_point,</b></tt>
testdb-# <tt class="REPLACEABLE"><b class="calibre10">       trunc(1.598, 8) AS extra_places;</b></tt>
 natural_truncation | one_decimal_point | extra_places
--------------------+-------------------+--------------
                  1 |               1.5 |   1.59800000
(1 row)</pre></div></div><div class="NAVHEADER"><h2 class="SECT"><a name="CHARACTERSTRINGFUNCTIONS" class="calibre8">Character String Functions</a></h2><p class="calibre9">PostgreSQL supports a wide variety of text formatting, analysis and comparison functions. These include both SQL92
      standard functions, such as <tt class="REPLACEABLE">substring()</tt> and <tt class="REPLACEABLE">trim()</tt>, as
      well as PostgreSQL-specific extensions, such as <tt class="REPLACEABLE">ltrim()</tt>,
      <tt class="REPLACEABLE">rtrim()</tt> and <tt class="REPLACEABLE">substr()</tt>. <a href="x8973.htm#CHARACTERSTRINGFUNCTIONSTABLE">Table 5-10</a> lists the functions available to PostgreSQL for use with character strings.
      In general, when referring to a value of type <tt class="REPLACEABLE">text</tt>, it is functionally synonymous with
      a value of type <tt class="REPLACEABLE">character</tt>, or <tt class="REPLACEABLE">varchar</tt>.</p><div class="NAVHEADER"><a name="CHARACTERSTRINGFUNCTIONSTABLE"></a><p class="calibre9"><b class="calibre10">Table 5-10. Character string functions</b></p><table border="1" width="100%" class="calibre"><thead class="calibre11"><tr class="calibre12"><th width="8" valign="TOP" class="calibre13"><p class="calibre9">Function</p></th><th width="21" valign="TOP" class="calibre13"><p class="calibre9">Description</p></th></tr></thead><tbody class="calibre14"><tr class="calibre12"><td width="8" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE">ascii(</tt><tt class="REPLACEABLE"><i class="EMPHASIS">s</i></tt> )</p></td><td width="21" valign="TOP" class="calibre15"><p class="calibre9">Returns the ascii code of the first character passed to it in character string <tt class="REPLACEABLE"><i class="EMPHASIS">s</i></tt></p></td></tr><tr class="calibre12"><td width="8" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE">btrim(</tt><tt class="REPLACEABLE"><i class="EMPHASIS">s</i></tt>  [, <tt class="REPLACEABLE"><i class="EMPHASIS">t</i></tt> ])</p></td><td width="21" valign="TOP" class="calibre15"><p class="calibre9">Returns character string <tt class="REPLACEABLE"><i class="EMPHASIS">s</i></tt>, trimmed on the left and right of any substrings
              consisting solely of letters in character string <tt class="REPLACEABLE"><i class="EMPHASIS">t</i></tt> (or whitespace, if <tt class="REPLACEABLE"><i class="EMPHASIS">t</i></tt>
              is not specified)</p></td></tr><tr class="calibre12"><td width="8" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE">char_length(</tt><tt class="REPLACEABLE"><i class="EMPHASIS">s</i></tt> )</p></td><td width="21" valign="TOP" class="calibre15"><p class="calibre9">Returns the numeric length of character string <tt class="REPLACEABLE"><i class="EMPHASIS">s</i></tt></p></td></tr><tr class="calibre12"><td width="8" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE">chr(</tt><tt class="REPLACEABLE"><i class="EMPHASIS">n</i></tt> )</p></td><td width="21" valign="TOP" class="calibre15"><p class="calibre9">Returns the character whose ascii value corresponds to the number <tt class="REPLACEABLE"><i class="EMPHASIS">n</i></tt></p></td></tr><tr class="calibre12"><td width="8" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE"/><tt class="REPLACEABLE"><i class="EMPHASIS">s</i></tt>  ilike(<tt class="REPLACEABLE"><i class="EMPHASIS">f</i></tt> )</p></td><td width="21" valign="TOP" class="calibre15"><p class="calibre9">Returns true if the expression <tt class="REPLACEABLE"><i class="EMPHASIS">f</i></tt> is found to match (case-insensitively) <tt class="REPLACEABLE"><i class="EMPHASIS">s</i></tt></p></td></tr><tr class="calibre12"><td width="8" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE">initcap(</tt><tt class="REPLACEABLE"><i class="EMPHASIS">s</i></tt> )</p></td><td width="21" valign="TOP" class="calibre15"><p class="calibre9">Returns the character string <tt class="REPLACEABLE"><i class="EMPHASIS">s</i></tt>, with each word's first letter capitalized</p></td></tr><tr class="calibre12"><td width="8" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE">length(</tt><tt class="REPLACEABLE"><i class="EMPHASIS">s</i></tt> )</p></td><td width="21" valign="TOP" class="calibre15"><p class="calibre9">Returns the numeric length of character string <tt class="REPLACEABLE"><i class="EMPHASIS">s</i></tt></p></td></tr><tr class="calibre12"><td width="8" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE"/><tt class="REPLACEABLE"><i class="EMPHASIS">s</i></tt>  like(<tt class="REPLACEABLE"><i class="EMPHASIS">f</i></tt> )</p></td><td width="21" valign="TOP" class="calibre15"><p class="calibre9">Returns true if the expression <tt class="REPLACEABLE"><i class="EMPHASIS">f</i></tt> is found to match <tt class="REPLACEABLE"><i class="EMPHASIS">s</i></tt></p></td></tr><tr class="calibre12"><td width="8" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE">lower(</tt><tt class="REPLACEABLE"><i class="EMPHASIS">s</i></tt> )</p></td><td width="21" valign="TOP" class="calibre15"><p class="calibre9">Returns the string <tt class="REPLACEABLE"><i class="EMPHASIS">s</i></tt>, in all lowercase</p></td></tr><tr class="calibre12"><td width="8" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE">lpad(</tt><tt class="REPLACEABLE"><i class="EMPHASIS">s</i></tt> , <tt class="REPLACEABLE"><i class="EMPHASIS">n</i></tt>  [, <tt class="REPLACEABLE"><i class="EMPHASIS">c</i></tt> ])</p></td><td width="21" valign="TOP" class="calibre15"><p class="calibre9">Returns the character string <tt class="REPLACEABLE"><i class="EMPHASIS">s</i></tt>, padded to the left with character string <tt class="REPLACEABLE"><i class="EMPHASIS">c</i></tt> (or whitespace, if <tt class="REPLACEABLE"><i class="EMPHASIS">c</i></tt> is not defined to length of <tt class="REPLACEABLE"><i class="EMPHASIS">n</i></tt> characters (or truncated on the right to <tt class="REPLACEABLE"><i class="EMPHASIS">n</i></tt> characters)</p></td></tr><tr class="calibre12"><td width="8" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE">ltrim(</tt><tt class="REPLACEABLE"><i class="EMPHASIS">s</i></tt>  [, <tt class="REPLACEABLE"><i class="EMPHASIS">f</i></tt> ])</p></td><td width="21" valign="TOP" class="calibre15"><p class="calibre9">Returns character string <tt class="REPLACEABLE"><i class="EMPHASIS">s</i></tt>, trimmed on the left of a substring consisting solely
              of letters in character string <tt class="REPLACEABLE"><i class="EMPHASIS">f</i></tt> (or whitespace, if <tt class="REPLACEABLE"><i class="EMPHASIS">f</i></tt> is not specified)</p></td></tr><tr class="calibre12"><td width="8" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE">octet_length(</tt><tt class="REPLACEABLE"><i class="EMPHASIS">s</i></tt> )</p></td><td width="21" valign="TOP" class="calibre15"><p class="calibre9">Returns the number of 8-bit bytes in character string <tt class="REPLACEABLE"><i class="EMPHASIS">s</i></tt></p></td></tr><tr class="calibre12"><td width="8" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE">position(</tt><tt class="REPLACEABLE"><i class="EMPHASIS">b</i></tt> IN <tt class="REPLACEABLE"><i class="EMPHASIS">s</i></tt> )</p></td><td width="21" valign="TOP" class="calibre15"><p class="calibre9">Returns the location of character sub-string <tt class="REPLACEABLE"><i class="EMPHASIS">b</i></tt> in character string <tt class="REPLACEABLE"><i class="EMPHASIS">s</i></tt> (counting from 1)</p></td></tr><tr class="calibre12"><td width="8" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE">repeat(</tt><tt class="REPLACEABLE"><i class="EMPHASIS">s</i></tt> , <tt class="REPLACEABLE"><i class="EMPHASIS">n</i></tt> )</p></td><td width="21" valign="TOP" class="calibre15"><p class="calibre9">Returns the character string <tt class="REPLACEABLE"><i class="EMPHASIS">s</i></tt>, repeated <tt class="REPLACEABLE"><i class="EMPHASIS">n</i></tt> times</p></td></tr><tr class="calibre12"><td width="8" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE">rpad(</tt><tt class="REPLACEABLE"><i class="EMPHASIS">s</i></tt> , <tt class="REPLACEABLE"><i class="EMPHASIS">n</i></tt>  [, <tt class="REPLACEABLE"><i class="EMPHASIS">c</i></tt> ])</p></td><td width="21" valign="TOP" class="calibre15"><p class="calibre9">Returns the character string <tt class="REPLACEABLE"><i class="EMPHASIS">s</i></tt>, padded to the right with character string <tt class="REPLACEABLE"><i class="EMPHASIS">c</i></tt> (or whitespace, if <tt class="REPLACEABLE"><i class="EMPHASIS">c</i></tt> is not specified) to length of <tt class="REPLACEABLE"><i class="EMPHASIS">n</i></tt> characters (or truncated on the left to <tt class="REPLACEABLE"><i class="EMPHASIS">n</i></tt> characters)</p></td></tr><tr class="calibre12"><td width="8" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE">rtrim(</tt><tt class="REPLACEABLE"><i class="EMPHASIS">s</i></tt>  [, <tt class="REPLACEABLE"><i class="EMPHASIS">f</i></tt> ])</p></td><td width="21" valign="TOP" class="calibre15"><p class="calibre9">Returns character string <tt class="REPLACEABLE"><i class="EMPHASIS">s</i></tt>, trimmed on the right of a substring consisting solely
              of letters in character string <tt class="REPLACEABLE"><i class="EMPHASIS">f</i></tt> (or whitespace, if <tt class="REPLACEABLE"><i class="EMPHASIS">f</i></tt> is not
              specified)</p></td></tr><tr class="calibre12"><td width="8" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE">strpos(</tt><tt class="REPLACEABLE"><i class="EMPHASIS">s</i></tt> , <tt class="REPLACEABLE"><i class="EMPHASIS">b</i></tt> )</p></td><td width="21" valign="TOP" class="calibre15"><p class="calibre9">Returns the location of character sub-string <tt class="REPLACEABLE"><i class="EMPHASIS">b</i></tt> in character string <tt class="REPLACEABLE"><i class="EMPHASIS">s</i></tt> (counting from 1). This is a PostgreSQL specific function which duplicates the effect of the SQL <tt class="REPLACEABLE">position()</tt> function, using C style arguments.</p></td></tr><tr class="calibre12"><td width="8" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE">substr(</tt><tt class="REPLACEABLE"><i class="EMPHASIS">s</i></tt> , <tt class="REPLACEABLE"><i class="EMPHASIS">n</i></tt> [, <tt class="REPLACEABLE"><i class="EMPHASIS">l</i></tt> ])</p></td><td width="21" valign="TOP" class="calibre15"><p class="calibre9">Returns a character sub-string of the character string <tt class="REPLACEABLE"><i class="EMPHASIS">s</i></tt>, starting at digit <tt class="REPLACEABLE"><i class="EMPHASIS">n</i></tt> (counting from 1), with optional maximum length <tt class="REPLACEABLE"><i class="EMPHASIS">l</i></tt> characters</p></td></tr><tr class="calibre12"><td width="8" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE">substring(</tt><tt class="REPLACEABLE"><i class="EMPHASIS">s</i></tt> FROM <tt class="REPLACEABLE"><i class="EMPHASIS">n</i></tt> FOR <tt class="REPLACEABLE"><i class="EMPHASIS">l</i></tt> )</p></td><td width="21" valign="TOP" class="calibre15"><p class="calibre9">Returns a character sub-string of the character string <tt class="REPLACEABLE"><i class="EMPHASIS">s</i></tt>, starting at digit <tt class="REPLACEABLE"><i class="EMPHASIS">n</i></tt> (counting from 1), with optional maximum length <tt class="REPLACEABLE"><i class="EMPHASIS">l</i></tt> characters</p></td></tr><tr class="calibre12"><td width="8" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE">to_ascii(</tt><tt class="REPLACEABLE"><i class="EMPHASIS">s</i></tt> , <tt class="REPLACEABLE"><i class="EMPHASIS">f</i></tt> )</p></td><td width="21" valign="TOP" class="calibre15"><p class="calibre9">Returns text <tt class="REPLACEABLE"><i class="EMPHASIS">s</i></tt> converted from multibyte encoding format <tt class="REPLACEABLE"><i class="EMPHASIS">f</i></tt> to plain ASCII</p></td></tr><tr class="calibre12"><td width="8" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE">translate(</tt><tt class="REPLACEABLE"><i class="EMPHASIS">s</i></tt> , <tt class="REPLACEABLE"><i class="EMPHASIS">f</i></tt> , <tt class="REPLACEABLE"><i class="EMPHASIS">r</i></tt> )</p></td><td width="21" valign="TOP" class="calibre15"><p class="calibre9">Returns the character string <tt class="REPLACEABLE"><i class="EMPHASIS">s</i></tt>, with any found characters from string <tt class="REPLACEABLE"><i class="EMPHASIS">f</i></tt> replaced with corresponding character in string <tt class="REPLACEABLE"><i class="EMPHASIS">r</i></tt></p></td></tr><tr class="calibre12"><td width="8" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE">trim(</tt><tt class="REPLACEABLE"><i class="EMPHASIS">side</i></tt> <tt class="REPLACEABLE"><i class="EMPHASIS">f</i></tt> FROM <tt class="REPLACEABLE"><i class="EMPHASIS">s</i></tt>)</p></td><td width="21" valign="TOP" class="calibre15"><p class="calibre9">Returns character string <tt class="REPLACEABLE"><i class="EMPHASIS">s</i></tt>, trimmed of leading and/or trailing substrings which
              consist solely of letters in character string <tt class="REPLACEABLE"><i class="EMPHASIS">f</i></tt>, as dictated by the <tt class="REPLACEABLE"><i class="EMPHASIS">side</i></tt>
              keyword (which is either <tt class="REPLACEABLE">LEADING</tt>, <tt class="REPLACEABLE">TRAILING</tt> or <tt class="REPLACEABLE">BOTH</tt>)</p></td></tr><tr class="calibre12"><td width="8" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE">upper(</tt><tt class="REPLACEABLE"><i class="EMPHASIS">s</i></tt> )</p></td><td width="21" valign="TOP" class="calibre15"><p class="calibre9">Returns the character string <tt class="REPLACEABLE"><i class="EMPHASIS">s</i></tt>, converted to all uppercase</p></td></tr></tbody></table></div><p class="calibre9">The following sections describe each of these character string functions, detailing their argument requirements, return
      types, and general usage.</p><div class="NAVHEADER"><h3 class="AUTHOR"><a name="AEN10063" class="calibre8">ascii()</a></h3><pre class="SCREEN">ascii(<tt class="REPLACEABLE"><i class="EMPHASIS">s</i></tt> )</pre><p class="calibre9">The <tt class="REPLACEABLE">ascii()</tt> function accepts a single argument of either a single character, or a
        character string of type <tt class="REPLACEABLE">text</tt>, and returns the numeric ASCII value of the first
        character interpreted. The result is returned as a value of type <tt class="REPLACEABLE">integer</tt>.</p><p class="calibre9"><span><i class="EMPHASIS">Examples</i></span></p><pre class="SCREEN">booktown=# <tt class="REPLACEABLE"><b class="calibre10">SELECT ascii('T');</b></tt>
 ascii
-------
    84
(1 row)

booktown=# <tt class="REPLACEABLE"><b class="calibre10">SELECT DISTINCT ON (substr)</b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">       title, substr(title, 1, 1),</b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">       ascii(title)</b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">       FROM books</b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">       ORDER BY substr ASC;</b></tt>
            title            | substr | ascii
-----------------------------+--------+-------
 2001: A Space Odyssey       | 2      |    50
 Bartholomew and the Oobleck | B      |    66
 Dune                        | D      |    68
 Franklin in the Dark        | F      |    70
 Goodnight Moon              | G      |    71
 Little Women                | L      |    76
 Practical PostgreSQL        | P      |    80
 The Shining                 | T      |    84
(8 rows)</pre></div><div class="NAVHEADER"><h3 class="AUTHOR"><a name="AEN10084" class="calibre8">btrim()</a></h3><pre class="SCREEN">btrim(<tt class="REPLACEABLE"><i class="EMPHASIS">s</i></tt> )
btrim(<tt class="REPLACEABLE"><i class="EMPHASIS">s</i></tt> , <tt class="REPLACEABLE"><i class="EMPHASIS">t</i></tt> )</pre><p class="calibre9">The <tt class="REPLACEABLE">btrim()</tt> function accepts one or two arguments <tt class="REPLACEABLE"><i class="EMPHASIS">s</i></tt>, and
        (optionally) <tt class="REPLACEABLE"><i class="EMPHASIS">t</i></tt>, each of type <tt class="REPLACEABLE">text</tt>. If <tt class="REPLACEABLE"><i class="EMPHASIS">t</i></tt> is specified, the function trims the
        string value <tt class="REPLACEABLE"><i class="EMPHASIS">s</i></tt> of any leading or trailing strings consisting solely of characters described in
        <tt class="REPLACEABLE"><i class="EMPHASIS">t</i></tt>. If <tt class="REPLACEABLE"><i class="EMPHASIS">t</i></tt> is not specified, leading and trailing whitespace is trimmed. The
        resultant trimmed value is returned as type <tt class="REPLACEABLE">text</tt>.</p><p class="calibre9">It is important to understand that the order of the characters described by <tt class="REPLACEABLE"><i class="EMPHASIS">t</i></tt> is not relevant
        to <tt class="REPLACEABLE">btrim()</tt>. Any strings at the beginning or end of <tt class="REPLACEABLE"><i class="EMPHASIS">s</i></tt> that
        consecutively match <span><i class="EMPHASIS">any</i></span> of the characters described in <tt class="REPLACEABLE"><i class="EMPHASIS">t</i></tt> will be
        trimmed.</p><p class="calibre9"><span><i class="EMPHASIS">Example</i></span></p><pre class="SCREEN">booktown=# <tt class="REPLACEABLE"><b class="calibre10">SELECT btrim('  whitespace example   ') AS trim_blanks,</b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">       btrim('123example 332', '123') AS trim_numbers;</b></tt>
     trim_blanks     | trim_numbers
---------------------+--------------
 whitespace example | example
(1 row)</pre></div><div class="NAVHEADER"><h3 class="AUTHOR"><a name="AEN10115" class="calibre8">char_length()</a></h3><pre class="SCREEN">char_length(<tt class="REPLACEABLE"><i class="EMPHASIS">s</i></tt> )</pre><p class="calibre9">The <tt class="REPLACEABLE">char_length()</tt> SQL92 function accepts a single argument of type
        <tt class="REPLACEABLE">text</tt>, <tt class="REPLACEABLE">varchar</tt>, or
        <tt class="REPLACEABLE">character</tt>, and returns the number of characters in the character string
        <tt class="REPLACEABLE"><i class="EMPHASIS">s</i></tt> passed to it. The returned value is of type <tt class="REPLACEABLE">integer</tt>.  </p><p class="calibre9"><span><i class="EMPHASIS">Example</i></span></p><pre class="SCREEN">booktown=# <tt class="REPLACEABLE"><b class="calibre10">SELECT char_length(title), title</b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">       FROM books</b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">       LIMIT 3;</b></tt>
 char_length |         title
-------------+-----------------------
          11 | The Shining
           4 | Dune
          21 | 2001: A Space Odyssey
(3 rows)</pre></div><div class="NAVHEADER"><h3 class="AUTHOR"><a name="AEN10136" class="calibre8">chr()</a></h3><pre class="SCREEN">chr(<tt class="REPLACEABLE"><i class="EMPHASIS">n</i></tt> )</pre><p class="calibre9">The <tt class="REPLACEABLE">chr()</tt> function accepts a single numeric argument <tt class="REPLACEABLE"><i class="EMPHASIS">n</i></tt> of
        type <tt class="REPLACEABLE">integer</tt>, and returns the corresponding character value for that ASCII value of
        <tt class="REPLACEABLE"><i class="EMPHASIS">n</i></tt>. The resultant value is of type <tt class="REPLACEABLE">text</tt>.</p><p class="calibre9">The <tt class="REPLACEABLE">chr()</tt> function is effectively the inverse of the
        <tt class="REPLACEABLE">ascii</tt> function.</p><p class="calibre9"><span><i class="EMPHASIS">Examples</i></span></p><pre class="SCREEN">booktown=# <tt class="REPLACEABLE"><b class="calibre10">SELECT chr(65), ascii('A');</b></tt>
 chr | ascii
-----+-------
 A   |    65
(1 row)
</pre></div><div class="NAVHEADER"><h3 class="AUTHOR"><a name="AEN10157" class="calibre8">initcap()</a></h3><pre class="SCREEN">initcap(<tt class="REPLACEABLE"><i class="EMPHASIS">s</i></tt> )</pre><p class="calibre9">The <tt class="REPLACEABLE">initcap()</tt> function accepts a single argument <tt class="REPLACEABLE"><i class="EMPHASIS">s</i></tt> of type
        <tt class="REPLACEABLE">text</tt>, and returns its value, with the first letter of each word capitalized. In this
        context, a "word" is a string of characters separated from other words by whitespace.</p><p class="calibre9"><span><i class="EMPHASIS">Example</i></span></p><pre class="SCREEN">booktown=# <tt class="REPLACEABLE"><b class="calibre10">SELECT initcap('a prospective book title');</b></tt>
         initcap
--------------------------
 A Prospective Book Title
(1 row)</pre></div><div class="NAVHEADER"><h3 class="AUTHOR"><a name="AEN10173" class="calibre8">length()</a></h3><pre class="SCREEN">length(<tt class="REPLACEABLE"><i class="EMPHASIS">s</i></tt> )</pre><p class="calibre9">Functionally identical to the <tt class="REPLACEABLE">char_length()</tt> SQL92 function. Accepts a single
        argument <tt class="REPLACEABLE"><i class="EMPHASIS">s</i></tt> of type <tt class="REPLACEABLE">text</tt>, <tt class="REPLACEABLE">character</tt>,
        or <tt class="REPLACEABLE">varchar</tt>, and returns its length as a value of type <tt class="REPLACEABLE">integer</tt>.
        </p><p class="calibre9"><span><i class="EMPHASIS">Example</i></span></p><pre class="SCREEN">booktown=# <tt class="REPLACEABLE"><b class="calibre10">SELECT length(title), title</b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">       FROM books</b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">       LIMIT 3;</b></tt>
 length |         title
--------+-----------------------
     11 | The Shining
      4 | Dune
     21 | 2001: A Space Odyssey
(3 rows)</pre><div class="NAVHEADER"><blockquote class="NOTE"><p class="calibre9"><b class="calibre10">Note: </b>The length evaluation functions for character strings defined in SQL92 are
          <tt class="REPLACEABLE">char_length()</tt> and <tt class="REPLACEABLE">octet_length()</tt>. Therefore, these
          functions are more likely to exist within other RDBMS systems than the <tt class="REPLACEABLE">length()</tt>
          function. </p></blockquote></div></div><div class="NAVHEADER"><h3 class="AUTHOR"><a name="AEN10199" class="calibre8">like() and ilike()</a></h3><pre class="SCREEN"><tt class="REPLACEABLE"><i class="EMPHASIS">s</i></tt> like(<tt class="REPLACEABLE"><i class="EMPHASIS">f</i></tt> )
<tt class="REPLACEABLE"><i class="EMPHASIS">s</i></tt> LIKE <tt class="REPLACEABLE"><i class="EMPHASIS">f</i></tt>
like(<tt class="REPLACEABLE"><i class="EMPHASIS">s</i></tt> , <tt class="REPLACEABLE"><i class="EMPHASIS">f</i></tt> )
<tt class="REPLACEABLE"><i class="EMPHASIS">s</i></tt> ilike(<tt class="REPLACEABLE"><i class="EMPHASIS">f</i></tt> )
<tt class="REPLACEABLE"><i class="EMPHASIS">s</i></tt> ILIKE <tt class="REPLACEABLE"><i class="EMPHASIS">f</i></tt></pre><p class="calibre9">The <tt class="REPLACEABLE">like()</tt> function checks the expression described by <tt class="REPLACEABLE"><i class="EMPHASIS">f</i></tt>, and
        attempts to see if it matches the character string <tt class="REPLACEABLE"><i class="EMPHASIS">s</i></tt>. It may either accept two arguments of type
        <tt class="REPLACEABLE">text</tt>, <tt class="REPLACEABLE"><i class="EMPHASIS">s</i></tt> and <tt class="REPLACEABLE"><i class="EMPHASIS">f</i></tt>, or it may be used in a special
        SQL syntax format where the argument <tt class="REPLACEABLE"><i class="EMPHASIS">s</i></tt> precedes the function name, adding to the readability of the
        statement. The <tt class="REPLACEABLE">ilike()</tt> function is a non-standard, case-insensitive version of
        <tt class="REPLACEABLE">like()</tt>, and may only be invoked through the SQL-style syntax.</p><div class="NAVHEADER"><blockquote class="NOTE"><p class="calibre9"><b class="calibre10">Note: </b>The SQL keyword <tt class="REPLACEABLE">LIKE</tt> actually invokes the <tt class="REPLACEABLE">like()</tt>
          function with PostgreSQL. The ability to use the <tt class="REPLACEABLE">LIKE</tt> keyword without parentheses to
          invoke this functionality is a syntactic convenience, and there is no different in practice.</p></blockquote></div><p class="calibre9">The use of <tt class="REPLACEABLE">like()</tt> differs from a normal equivalence operation in that the
        character string <tt class="REPLACEABLE"><i class="EMPHASIS">f</i></tt> may contain either an underscore ( <tt class="REPLACEABLE">_</tt> ) or percent
        (<tt class="REPLACEABLE">%</tt>) symbol to indicate special meaning in matching character values. PostgreSQL
        interprets the <tt class="REPLACEABLE">_</tt> symbol as indicating that any single character should be considered a
        match, while the <tt class="REPLACEABLE">%</tt> symbol is interpreted as indicating that zero or more characters of
        any value will be considered a match. These special characters may be interspersed throughout the character string
        <tt class="REPLACEABLE"><i class="EMPHASIS">f</i></tt>.</p><p class="calibre9">For more advanced pattern matching capabilities within PostgreSQL, see <a href="c7547.htm#CHARACTERSTRINGCOMPARISONOPERATORS">the Section called <i class="EMPHASIS">Regular expression matching operators</i></a>" earlier in this chapter.</p><p class="calibre9"><span><i class="EMPHASIS">Examples</i></span></p><pre class="SCREEN">booktown=# <tt class="REPLACEABLE"><b class="calibre10">SELECT * FROM books</b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">       WHERE title LIKE ('%Rabbit');</b></tt>
  id  |        title         | author_id | subject_id
------+----------------------+-----------+------------
 1234 | The Velveteen Rabbit |     25041 |          3
(1 row)

booktown=# <tt class="REPLACEABLE"><b class="calibre10">SELECT * FROM books</b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">       WHERE title LIKE '%D___';</b></tt>
  id   |        title         | author_id | subject_id
-------+----------------------+-----------+------------
  4513 | Dune                 |      1866 |         15
 25908 | Franklin in the Dark |     15990 |          2
(2 rows)

booktown=# <tt class="REPLACEABLE"><b class="calibre10">SELECT * FROM books</b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">       WHERE title ILIKE '%python%';</b></tt>
  id   |       title        | author_id | subject_id
-------+--------------------+-----------+------------
 41473 | Programming Python |      7805 |          4
 41477 | Learning Python    |      7805 |          4
(2 rows)</pre></div><div class="NAVHEADER"><h3 class="AUTHOR"><a name="AEN10262" class="calibre8">lower()</a></h3><pre class="SCREEN">lower(<tt class="REPLACEABLE"><i class="EMPHASIS">s</i></tt> )</pre><p class="calibre9">The <tt class="REPLACEABLE">lower()</tt> SQL92 function accepts a single character string argument
        <tt class="REPLACEABLE"><i class="EMPHASIS">s</i></tt> of type <tt class="REPLACEABLE">text</tt>, and returns the same value with all characters
        converted to lowercase. The resultant value is returned as type <tt class="REPLACEABLE">text</tt>.</p><p class="calibre9"><span><i class="EMPHASIS">Example</i></span></p><pre class="SCREEN">booktown=# <tt class="REPLACEABLE"><b class="calibre10">SELECT lower(title)</b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">       FROM books</b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">       LIMIT 3;</b></tt>
         lower
-----------------------
 the shining
 dune
 2001: a space odyssey
(3 rows)</pre></div><div class="NAVHEADER"><h3 class="AUTHOR"><a name="AEN10281" class="calibre8">lpad()</a></h3><pre class="SCREEN">lpad(<tt class="REPLACEABLE"><i class="EMPHASIS">s</i></tt> , <tt class="REPLACEABLE"><i class="EMPHASIS">n</i></tt> )
lpad(<tt class="REPLACEABLE"><i class="EMPHASIS">s</i></tt> , <tt class="REPLACEABLE"><i class="EMPHASIS">n</i></tt> , <tt class="REPLACEABLE"><i class="EMPHASIS">c</i></tt> )</pre><p class="calibre9">The <tt class="REPLACEABLE">lpad()</tt> function accepts either two or three arguments <tt class="REPLACEABLE"><i class="EMPHASIS">s</i></tt>,
        <tt class="REPLACEABLE"><i class="EMPHASIS">n</i></tt>, and optionally <tt class="REPLACEABLE"><i class="EMPHASIS">c</i></tt>, of types <tt class="REPLACEABLE">text</tt>,
        <tt class="REPLACEABLE">integer</tt>, and <tt class="REPLACEABLE">text</tt>, respectively. The function "pads"
        the left side of the character string <tt class="REPLACEABLE"><i class="EMPHASIS">s</i></tt> with either whitespace, or the optional character string
        defined by <tt class="REPLACEABLE"><i class="EMPHASIS">c</i></tt>, until it is exactly <tt class="REPLACEABLE"><i class="EMPHASIS">n</i></tt> characters in length.</p><p class="calibre9">If the character string <tt class="REPLACEABLE"><i class="EMPHASIS">s</i></tt> is longer than <tt class="REPLACEABLE"><i class="EMPHASIS">n</i></tt> characters to begin with,
        <tt class="REPLACEABLE"><i class="EMPHASIS">s</i></tt> will be truncated from the right until it is exactly <tt class="REPLACEABLE"><i class="EMPHASIS">n</i></tt> characters in length.</p><p class="calibre9"><span><i class="EMPHASIS">Example</i></span></p><pre class="SCREEN">booktown=# <tt class="REPLACEABLE"><b class="calibre10">SELECT title, lpad(title, 12, '-') AS dashed,</b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">       lpad(title, 12, '-+-') AS plus_dashed</b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">       FROM books</b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">       LIMIT 4;</b></tt>
         title         |    dashed    | plus_dashed
-----------------------+--------------+--------------
 The Shining           | -The Shining | -The Shining
 Dune                  | --------Dune | -+--+--+Dune
 2001: A Space Odyssey | 2001: A Spac | 2001: A Spac
 The Cat in the Hat    | The Cat in t | The Cat in t
(4 rows)</pre></div><div class="NAVHEADER"><h3 class="AUTHOR"><a name="AEN10316" class="calibre8">ltrim()</a></h3><pre class="SCREEN">ltrim(<tt class="REPLACEABLE"><i class="EMPHASIS">s</i></tt> )
ltrim(<tt class="REPLACEABLE"><i class="EMPHASIS">s</i></tt> , <tt class="REPLACEABLE"><i class="EMPHASIS">f</i></tt> )</pre><p class="calibre9">The <tt class="REPLACEABLE">ltrim()</tt> function accepts either one or two arguments, <tt class="REPLACEABLE"><i class="EMPHASIS">s</i></tt>
        and optionally <tt class="REPLACEABLE"><i class="EMPHASIS">f</i></tt>, each of type <tt class="REPLACEABLE">text</tt>. If <tt class="REPLACEABLE"><i class="EMPHASIS">f</i></tt> is
        unspecified, the function returns the value of <tt class="REPLACEABLE"><i class="EMPHASIS">s</i></tt>, with any leading whitespace trimmed off.
        Otherwise, the function returns the character string <tt class="REPLACEABLE"><i class="EMPHASIS">s</i></tt>, with any leading substring containing
        exclusively characters contained in <tt class="REPLACEABLE"><i class="EMPHASIS">f</i></tt> removed. If no such substring is found, no change is made.</p><p class="calibre9"><span><i class="EMPHASIS">Examples</i></span></p><pre class="SCREEN">booktown=# <tt class="REPLACEABLE"><b class="calibre10">SELECT ltrim('    whitespace example');</b></tt>
       ltrim
--------------------
 whitespace example
(1 row)

booktown=# <tt class="REPLACEABLE"><b class="calibre10">SELECT title, ltrim(title, 'TD2he ')</b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">       FROM books</b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">       LIMIT 4;</b></tt>
         title         |        ltrim
-----------------------+----------------------
 The Shining           | Shining
 Dune                  | une
 2001: A Space Odyssey | 001: A Space Odyssey
 The Cat in the Hat    | Cat in the Hat
(4 rows)</pre></div><div class="NAVHEADER"><h3 class="AUTHOR"><a name="AEN10342" class="calibre8">octet_length()</a></h3><pre class="SCREEN">char_length(<tt class="REPLACEABLE"><i class="EMPHASIS">s</i></tt> )</pre><p class="calibre9">The <tt class="REPLACEABLE">octet_length()</tt> SQL92 function accepts a single argument of type
        <tt class="REPLACEABLE">text</tt>, <tt class="REPLACEABLE">varchar</tt> or,
        <tt class="REPLACEABLE">character</tt>, and returns the number of 8-bit character bytes in the character string
        <tt class="REPLACEABLE"><i class="EMPHASIS">s</i></tt> passed to it. The returned value is of type <tt class="REPLACEABLE">integer</tt>.</p><p class="calibre9">In most circumstances, there will be the same number of octets as there are characters to a character string,
        though this may not necessarily be the case with multibyte characters. This is because a multibyte character may
        consist of more than a single octet (byte), by definition.</p><p class="calibre9"><span><i class="EMPHASIS">Example</i></span></p><pre class="SCREEN">booktown=# <tt class="REPLACEABLE"><b class="calibre10">SELECT title, octet_length(title)</b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">       FROM books</b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">       ORDER BY title ASC</b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">       LIMIT 3;</b></tt>
            title            | octet_length
-----------------------------+--------------
 2001: A Space Odyssey       |           21
 Bartholomew and the Oobleck |           27
 Dune                        |            4
(3 rows)</pre></div><div class="NAVHEADER"><h3 class="AUTHOR"><a name="AEN10365" class="calibre8">position()</a></h3><pre class="SCREEN">position(<tt class="REPLACEABLE"><i class="EMPHASIS">b</i></tt> IN <tt class="REPLACEABLE"><i class="EMPHASIS">s</i></tt>)</pre><p class="calibre9">The <tt class="REPLACEABLE">position()</tt> SQL92 function accepts two arguments, <tt class="REPLACEABLE"><i class="EMPHASIS">b</i></tt> and
        <tt class="REPLACEABLE"><i class="EMPHASIS">s</i></tt>, each of type <tt class="REPLACEABLE">text</tt>. The position of the string <tt class="REPLACEABLE"><i class="EMPHASIS">b</i></tt>
        within the string <tt class="REPLACEABLE"><i class="EMPHASIS">s</i></tt> is returned as a value of type <tt class="REPLACEABLE">integer</tt> (counting
        from 1). If the string is not found, zero is returned.</p><p class="calibre9"><span><i class="EMPHASIS">Example</i></span></p><pre class="SCREEN">booktown=# <tt class="REPLACEABLE"><b class="calibre10">SELECT title, position('the' IN title) AS the_pos</b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">       FROM books</b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">       WHERE position('the' IN title) != 0;</b></tt>
            title            | the_pos
-----------------------------+---------
 The Cat in the Hat          |      12
 Bartholomew and the Oobleck |      17
 Franklin in the Dark        |      13
(3 rows)
</pre></div><div class="NAVHEADER"><h3 class="AUTHOR"><a name="AEN10388" class="calibre8">repeat()</a></h3><pre class="SCREEN">repeat(<tt class="REPLACEABLE"><i class="EMPHASIS">s</i></tt> , <tt class="REPLACEABLE"><i class="EMPHASIS">n</i></tt> )</pre><p class="calibre9">The <tt class="REPLACEABLE">repeat()</tt> function accepts two arguments <tt class="REPLACEABLE"><i class="EMPHASIS">s</i></tt>
        and <tt class="REPLACEABLE"><i class="EMPHASIS">n</i></tt>, of types <tt class="REPLACEABLE">text</tt> and <tt class="REPLACEABLE">integer</tt>,
        respectively. The function returns the character string described by <tt class="REPLACEABLE"><i class="EMPHASIS">s</i></tt>, repeated <tt class="REPLACEABLE"><i class="EMPHASIS">n</i></tt>
        consecutive times, as a value of type <tt class="REPLACEABLE">text</tt>.</p><p class="calibre9"><span><i class="EMPHASIS">Example</i></span></p><pre class="SCREEN">booktown=# <tt class="REPLACEABLE"><b class="calibre10">SELECT repeat(last_name, 2)</b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">       FROM authors</b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">       LIMIT 3;</b></tt>
       repeat
--------------------
 DenhamDenham
 BourgeoisBourgeois
 BiancoBianco
(3 rows)</pre></div><div class="NAVHEADER"><h3 class="AUTHOR"><a name="AEN10412" class="calibre8">rpad()</a></h3><pre class="SCREEN">rpad(<tt class="REPLACEABLE"><i class="EMPHASIS">s</i></tt> , <tt class="REPLACEABLE"><i class="EMPHASIS">n</i></tt> )
rpad(<tt class="REPLACEABLE"><i class="EMPHASIS">s</i></tt> , <tt class="REPLACEABLE"><i class="EMPHASIS">n</i></tt> , <tt class="REPLACEABLE"><i class="EMPHASIS">c</i></tt> )</pre><p class="calibre9">The <tt class="REPLACEABLE">rpad()</tt> function is essentially the same as the
        <tt class="REPLACEABLE">lpad</tt> function, but operates on the <span><i class="EMPHASIS">right</i></span> side of the string
        <tt class="REPLACEABLE"><i class="EMPHASIS">s</i></tt>, rather than the left.  It accepts either two or three arguments <tt class="REPLACEABLE"><i class="EMPHASIS">s</i></tt>,
        <tt class="REPLACEABLE"><i class="EMPHASIS">n</i></tt>, and optionally <tt class="REPLACEABLE"><i class="EMPHASIS">c</i></tt>, of types <tt class="REPLACEABLE">text</tt>,
        <tt class="REPLACEABLE">integer</tt>, and <tt class="REPLACEABLE">text</tt>, respectively. The function pads the
        right side of the character string <tt class="REPLACEABLE"><i class="EMPHASIS">s</i></tt> with either whitespace, or the optional character string
        defined by <tt class="REPLACEABLE"><i class="EMPHASIS">c</i></tt>, until it is exactly <tt class="REPLACEABLE"><i class="EMPHASIS">n</i></tt> characters in length.</p><p class="calibre9">If the character string <tt class="REPLACEABLE"><i class="EMPHASIS">s</i></tt> is longer than <tt class="REPLACEABLE"><i class="EMPHASIS">n</i></tt> characters long to begin with,
        it will be truncated from the <span><i class="EMPHASIS">left</i></span> until it is exactly <tt class="REPLACEABLE"><i class="EMPHASIS">n</i></tt> characters in
        length.</p><p class="calibre9"><span><i class="EMPHASIS">Examples</i></span></p><pre class="SCREEN">booktown=# <tt class="REPLACEABLE"><b class="calibre10">SELECT rpad('whitespace example', 30);</b></tt>
              rpad
--------------------------------
 whitespace example
(1 row)

booktown=# <tt class="REPLACEABLE"><b class="calibre10">SELECT title, rpad(title, 12, '-') AS right_dashed,</b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">       rpad(title, 12, '-+-') AS right_plus_dashed</b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">       FROM books</b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">       LIMIT 3;</b></tt>
         title         | right_dashed | right_plus_dashed
-----------------------+--------------+-------------------
 The Shining           | The Shining- | The Shining-
 Dune                  | Dune-------- | Dune-+--+--+
 2001: A Space Odyssey | 2001: A Spac | 2001: A Spac
(3 rows)</pre></div><div class="NAVHEADER"><h3 class="AUTHOR"><a name="AEN10451" class="calibre8">rtrim()</a></h3><pre class="SCREEN">rtrim(<tt class="REPLACEABLE"><i class="EMPHASIS">s</i></tt> )
rtrim(<tt class="REPLACEABLE"><i class="EMPHASIS">s</i></tt> , <tt class="REPLACEABLE"><i class="EMPHASIS">f</i></tt> )</pre><p class="calibre9">The <tt class="REPLACEABLE">rtrim()</tt> function accepts either one or two arguments, <tt class="REPLACEABLE"><i class="EMPHASIS">s</i></tt>
        and optionally <tt class="REPLACEABLE"><i class="EMPHASIS">f</i></tt>, each of type <tt class="REPLACEABLE">text</tt>. If <tt class="REPLACEABLE"><i class="EMPHASIS">f</i></tt> is
        unspecified, the function returns the value of <tt class="REPLACEABLE"><i class="EMPHASIS">s</i></tt>, with any trailing whitespace trimmed off.
        Otherwise, the function returns the character string <tt class="REPLACEABLE"><i class="EMPHASIS">s</i></tt>, with any trailing substring containing
        exclusively characters contained in <tt class="REPLACEABLE"><i class="EMPHASIS">f</i></tt> removed. If no such substring is found, no change is made.</p><p class="calibre9"><span><i class="EMPHASIS">Examples</i></span></p><pre class="SCREEN">booktown=# <tt class="REPLACEABLE"><b class="calibre10">SELECT rtrim('whitespace example ');</b></tt>
       rtrim
--------------------
 whitespace example
(1 row)

booktown=# <tt class="REPLACEABLE"><b class="calibre10">SELECT title, rtrim(title, 'yes')</b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">       FROM books</b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">       LIMIT 4;</b></tt>
         title         |        rtrim
-----------------------+----------------------
 The Shining           | The Shining
 Dune                  | Dun
 2001: A Space Odyssey | 2001: A Space Od
 The Cat in the Hat    | The Cat in the Hat
(4 rows)</pre></div><div class="NAVHEADER"><h3 class="AUTHOR"><a name="AEN10477" class="calibre8">strpos()</a></h3><pre class="SCREEN">strpos(<tt class="REPLACEABLE"><i class="EMPHASIS">s</i></tt> , <tt class="REPLACEABLE"><i class="EMPHASIS">b</i></tt> )</pre><p class="calibre9">The <tt class="REPLACEABLE">strpos()</tt> function is functionally identical to the SQL92
        <tt class="REPLACEABLE">position()</tt> function, but accepts C-style arguments <tt class="REPLACEABLE"><i class="EMPHASIS">b</i></tt> and
        <tt class="REPLACEABLE"><i class="EMPHASIS">s</i></tt>, each of type <tt class="REPLACEABLE">text</tt>. The position of the string
        <tt class="REPLACEABLE"><i class="EMPHASIS">b</i></tt> within the string <tt class="REPLACEABLE"><i class="EMPHASIS">s</i></tt> is returned as a value of type
        <tt class="REPLACEABLE">integer</tt> (counting from 1). If the string is not found, zero is returned.</p><p class="calibre9"><span><i class="EMPHASIS">Example</i></span></p><pre class="SCREEN">booktown=# <tt class="REPLACEABLE"><b class="calibre10">SELECT title, strpos(lower(title), 'rabbit')</b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">       FROM books</b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">       WHERE strpos(lower(title), 'rabbit') != 0;</b></tt>
        title         | strpos
----------------------+--------
 The Velveteen Rabbit |     15
(1 row)</pre></div><div class="NAVHEADER"><h3 class="AUTHOR"><a name="AEN10501" class="calibre8">substr()</a></h3><pre class="SCREEN">substr(<tt class="REPLACEABLE"><i class="EMPHASIS">s</i></tt> , <tt class="REPLACEABLE"><i class="EMPHASIS">n</i></tt> )
substr(<tt class="REPLACEABLE"><i class="EMPHASIS">s</i></tt> , <tt class="REPLACEABLE"><i class="EMPHASIS">n</i></tt> , <tt class="REPLACEABLE"><i class="EMPHASIS">l</i></tt> )</pre><p class="calibre9">The <tt class="REPLACEABLE">substr()</tt> function is effectively equivalent to the SQL92 function
        <tt class="REPLACEABLE">substring()</tt>, but accepts C-style arguments <tt class="REPLACEABLE"><i class="EMPHASIS">s</i></tt>,
        <tt class="REPLACEABLE"><i class="EMPHASIS">n</i></tt>, and optionally <tt class="REPLACEABLE"><i class="EMPHASIS">l</i></tt>, of types <tt class="REPLACEABLE">text</tt>,
        <tt class="REPLACEABLE">integer</tt>, and <tt class="REPLACEABLE">integer</tt>, respectively. The
        function returns the substring of <tt class="REPLACEABLE"><i class="EMPHASIS">s</i></tt>, beginning at character index <tt class="REPLACEABLE"><i class="EMPHASIS">n</i></tt>,
        and optionally stopping after <tt class="REPLACEABLE"><i class="EMPHASIS">l</i></tt> characters.</p><p class="calibre9">If the length of the substring to be selected is longer than the available characters, only the available
        substring will be returned. In other words, it will not be padded as it would be with a trim function.</p><p class="calibre9"><span><i class="EMPHASIS">Example</i></span></p><pre class="SCREEN">booktown=# <tt class="REPLACEABLE"><b class="calibre10">SELECT title, substr(title, 15), substr(title, 5, 9)</b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">       FROM books</b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">       ORDER BY title DESC</b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">       LIMIT 3;</b></tt>
        title         | substr |  substr
----------------------+--------+-----------
 The Velveteen Rabbit | Rabbit | Velveteen
 The Tell-Tale Heart  | Heart  | Tell-Tale
 The Shining          |        | Shining
(3 rows)</pre></div><div class="NAVHEADER"><h3 class="AUTHOR"><a name="AEN10533" class="calibre8">substring()</a></h3><pre class="SCREEN">substring(<tt class="REPLACEABLE"><i class="EMPHASIS">s</i></tt> FROM <tt class="REPLACEABLE"><i class="EMPHASIS">n</i></tt>)
substring(<tt class="REPLACEABLE"><i class="EMPHASIS">s</i></tt> FROM <tt class="REPLACEABLE"><i class="EMPHASIS">n</i></tt> FOR <tt class="REPLACEABLE"><i class="EMPHASIS">l</i></tt>)</pre><p class="calibre9">The <tt class="REPLACEABLE">substring()</tt> function is the SQL92 equivalent to the PostgreSQL-specific
        <tt class="REPLACEABLE">substr()</tt> function. It accepts two or three arguments, <tt class="REPLACEABLE"><i class="EMPHASIS">s</i></tt>,
        <tt class="REPLACEABLE"><i class="EMPHASIS">n</i></tt>, and optionally <tt class="REPLACEABLE"><i class="EMPHASIS">l</i></tt>, of types <tt class="REPLACEABLE">text</tt>,
        <tt class="REPLACEABLE">integer</tt>, and <tt class="REPLACEABLE">integer</tt>, respectively. The function returns
        the substring of <tt class="REPLACEABLE"><i class="EMPHASIS">s</i></tt>, beginning at character index <tt class="REPLACEABLE"><i class="EMPHASIS">n</i></tt>, and optionally stopping
        after <tt class="REPLACEABLE"><i class="EMPHASIS">l</i></tt> characters.</p><p class="calibre9"><span><i class="EMPHASIS">Examples</i></span></p><pre class="SCREEN">booktown=# <tt class="REPLACEABLE"><b class="calibre10">SELECT title, substring(title FROM 15)</b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">       FROM books</b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">       ORDER BY title DESC</b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">       LIMIT 3;</b></tt>
        title         | substring
----------------------+-----------
 The Velveteen Rabbit | Rabbit
 The Tell-Tale Heart  | Heart
 The Shining          |
(3 rows)

booktown=# <tt class="REPLACEABLE"><b class="calibre10">SELECT title, substring(title FROM 5 FOR 9)</b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">       FROM books</b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">       ORDER BY title DESC</b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">       LIMIT 3;</b></tt>
        title         | substring
----------------------+-----------
 The Velveteen Rabbit | Velveteen
 The Tell-Tale Heart  | Tell-Tale
 The Shining          | Shining
(3 rows)</pre></div><div class="NAVHEADER"><h3 class="AUTHOR"><a name="AEN10568" class="calibre8">to_ascii()</a></h3><pre class="SCREEN">to_ascii(<tt class="REPLACEABLE"><i class="EMPHASIS">s</i></tt> , <tt class="REPLACEABLE"><i class="EMPHASIS">f</i></tt> )</pre><p class="calibre9">The <tt class="REPLACEABLE">to_ascii()</tt> accepts a single argument <tt class="REPLACEABLE"><i class="EMPHASIS">s</i></tt> of type
        <tt class="REPLACEABLE">text</tt> describing multibyte encoded text of the format <tt class="REPLACEABLE"><i class="EMPHASIS">f</i></tt> and
        returns normal ASCII text as a value of type <tt class="REPLACEABLE">text</tt>.</p><p class="calibre9">The available multibyte encoding formats are <span><i class="EMPHASIS">LATIN1</i></span> (ISO 8859-1), <span><i class="EMPHASIS">LATIN2</i></span>
        (ISO 8859-2), and <span><i class="EMPHASIS">WIN1250</i></span> (Windows CP1250, or WinLatin2).  This function requires that
        multibyte encoding be enabled (which is a compile-time option when building and installing PostgreSQL).</p><p class="calibre9"><span><i class="EMPHASIS">Example</i></span></p><pre class="SCREEN">booktown=# <tt class="REPLACEABLE"><b class="calibre10">SELECT to_ascii('Multibyte Source', 'LATIN1');</b></tt>
     to_ascii
-------------------
 Multibyte Source
(1 row)</pre></div><div class="NAVHEADER"><h3 class="AUTHOR"><a name="AEN10591" class="calibre8">translate()</a></h3><pre class="SCREEN">translate(<tt class="REPLACEABLE"><i class="EMPHASIS">s</i></tt> , <tt class="REPLACEABLE"><i class="EMPHASIS">f</i></tt> , <tt class="REPLACEABLE"><i class="EMPHASIS">r</i></tt> )</pre><p class="calibre9">The <tt class="REPLACEABLE">translate()</tt> function accepts three arguments, <tt class="REPLACEABLE"><i class="EMPHASIS">s</i></tt>,
        <tt class="REPLACEABLE"><i class="EMPHASIS">f</i></tt> and <tt class="REPLACEABLE"><i class="EMPHASIS">r</i></tt>, each of type <tt class="REPLACEABLE">text</tt>. It replaces any
        instance of a character in the string <tt class="REPLACEABLE"><i class="EMPHASIS">s</i></tt> that matches any character in <tt class="REPLACEABLE"><i class="EMPHASIS">f</i></tt> with
        the corresponding character at the same index from string <tt class="REPLACEABLE"><i class="EMPHASIS">r</i></tt>. The result is returned as a value of
        type <tt class="REPLACEABLE">text</tt>.</p><p class="calibre9">Note that this function does not replace only complete instances of the character string <tt class="REPLACEABLE"><i class="EMPHASIS">f</i></tt>, but
        replaces <span><i class="EMPHASIS">any character</i></span> within <tt class="REPLACEABLE"><i class="EMPHASIS">s</i></tt> that matches <span><i class="EMPHASIS">any character</i></span>
        in <tt class="REPLACEABLE"><i class="EMPHASIS">f</i></tt> with the corresponding character from <tt class="REPLACEABLE"><i class="EMPHASIS">r</i></tt>. If there are
        more characters in <tt class="REPLACEABLE"><i class="EMPHASIS">f</i></tt> than in <tt class="REPLACEABLE"><i class="EMPHASIS">r</i></tt>, any character in <tt class="REPLACEABLE"><i class="EMPHASIS">f</i></tt> without
        a corresponding character in <tt class="REPLACEABLE"><i class="EMPHASIS">r</i></tt> will simply be omitted (this can be a useful way to remove unwanted
        characters).</p><p class="calibre9">The important thing to remember about this method of replacement is that there is always a one-to-one relationship
        between the character found and its replacement character (though its replacement may be empty, if omitted).</p><p class="calibre9">The following examples replace all question marks with exclamation points.</p><p class="calibre9"><span><i class="EMPHASIS">Examples</i></span></p><pre class="SCREEN">booktown=# <tt class="REPLACEABLE"><b class="calibre10">SELECT translate('I am an example?', '?', '!');</b></tt>
    translate
------------------
 I am an example!
(1 row)</pre><p class="calibre9">The next example replaces all instances of the character <span><i class="EMPHASIS">I</i></span> with the character <span><i class="EMPHASIS">w</i></span>,
        and all instances of the character <span><i class="EMPHASIS">s</i></span> with the character <span><i class="EMPHASIS">a</i></span>. The extra <span><i class="EMPHASIS">s</i></span>
        at the end of "was" is ignored.</p><pre class="SCREEN">booktown=# <tt class="REPLACEABLE"><b class="calibre10">SELECT translate('This is a mistake.', 'is', 'was');</b></tt>
     translate
--------------------
 Thwa wa a mwatake.
(1 row)</pre><p class="calibre9">This final example replace all vowels with nothing, effectively removing all vowels from the input strings.</p><pre class="SCREEN">booktown=# <tt class="REPLACEABLE"><b class="calibre10">SELECT title,</b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">       translate(title, 'aeiouAEIOU', '') AS vowelless</b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">       FROM books</b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">       LIMIT 5;</b></tt>
            title            |     vowelless
-----------------------------+--------------------
 The Shining                 | Th Shnng
 Dune                        | Dn
 2001: A Space Odyssey       | 2001:  Spc dyssy
 The Cat in the Hat          | Th Ct n th Ht
 Bartholomew and the Oobleck | Brthlmw nd th blck
(5 rows)</pre></div><div class="NAVHEADER"><h3 class="AUTHOR"><a name="AEN10642" class="calibre8">trim()</a></h3><pre class="SCREEN">trim(<tt class="REPLACEABLE"><i class="EMPHASIS">side</i></tt> <tt class="REPLACEABLE"><i class="EMPHASIS">f</i></tt> FROM <tt class="REPLACEABLE"><i class="EMPHASIS">s</i></tt> )</pre><p class="calibre9">The <tt class="REPLACEABLE">trim()</tt> function is the SQL92 function used to achieve the same effects as
        PostgreSQL's <tt class="REPLACEABLE">rtrim()</tt>, <tt class="REPLACEABLE">ltrim()</tt>, and
        <tt class="REPLACEABLE">btrim()</tt> functions. It accepts three arguments, including a leading keyword
        <tt class="REPLACEABLE"><i class="EMPHASIS">side</i></tt> (which may be either <tt class="REPLACEABLE">LEADING</tt>,
        <tt class="REPLACEABLE">TRAILING</tt>, or <tt class="REPLACEABLE">BOTH</tt>), and two character strings,
        <tt class="REPLACEABLE"><i class="EMPHASIS">f</i></tt> and <tt class="REPLACEABLE"><i class="EMPHASIS">s</i></tt>.</p><p class="calibre9">When specified as <tt class="REPLACEABLE">LEADING</tt>, <tt class="REPLACEABLE">trim()</tt> behaves
        as <tt class="REPLACEABLE">ltrim()</tt>, trimming the longest substring from the beginning of the string
        <tt class="REPLACEABLE"><i class="EMPHASIS">s</i></tt> which consists solely of characters contained within <tt class="REPLACEABLE"><i class="EMPHASIS">f</i></tt>.</p><p class="calibre9">When specified as <tt class="REPLACEABLE">TRAILING</tt>, <tt class="REPLACEABLE">trim()</tt> behaves
        as <tt class="REPLACEABLE">rtrim()</tt>, trimming the longest substring from the end of the string
        <tt class="REPLACEABLE"><i class="EMPHASIS">s</i></tt> which consists solely of characters contained within <tt class="REPLACEABLE"><i class="EMPHASIS">f</i></tt>.</p><p class="calibre9">When specified as <tt class="REPLACEABLE">BOTH</tt>, <tt class="REPLACEABLE">trim()</tt> behaves as
        <tt class="REPLACEABLE">btrim()</tt>, trimming the longest substrings from both the beginning and end of the string
        <tt class="REPLACEABLE"><i class="EMPHASIS">s</i></tt> which consists solely of characters contained within <tt class="REPLACEABLE"><i class="EMPHASIS">f</i></tt>.</p><p class="calibre9"><span><i class="EMPHASIS">Examples</i></span></p><pre class="SCREEN">booktown=# <tt class="REPLACEABLE"><b class="calibre10">SELECT isbn, trim(LEADING '0' FROM isbn)</b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">       FROM editions</b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">       LIMIT 2;</b></tt>
    isbn    |   ltrim
------------+-----------
 039480001X | 39480001X
 0451160916 | 451160916
(2 rows)

booktown=# <tt class="REPLACEABLE"><b class="calibre10">SELECT isbn, trim(TRAILING 'X' FROM isbn)</b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">       FROM editions</b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">       LIMIT 2;</b></tt>
    isbn    |   rtrim
------------+------------
 039480001X | 039480001
 0451160916 | 0451160916
(2 rows)

booktown=# <tt class="REPLACEABLE"><b class="calibre10">SELECT isbn, trim(BOTH '0X' FROM isbn)</b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">       FROM editions</b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">       LIMIT 2;</b></tt>
    isbn    |   btrim
------------+-----------
 039480001X | 39480001
 0451160916 | 451160916
(2 rows)</pre></div><div class="NAVHEADER"><h3 class="AUTHOR"><a name="AEN10693" class="calibre8">upper()</a></h3><pre class="SCREEN">upper(<tt class="REPLACEABLE"><i class="EMPHASIS">s</i></tt> )</pre><p class="calibre9">The <tt class="REPLACEABLE">upper()</tt> SQL92 function accepts a single argument <tt class="REPLACEABLE"><i class="EMPHASIS">s</i></tt> of type
        <tt class="REPLACEABLE">text</tt>, and returns the character string with each character converted to lowercase as
        a value of type <tt class="REPLACEABLE">text</tt>.</p><p class="calibre9"><span><i class="EMPHASIS">Example</i></span></p><pre class="SCREEN">booktown=# <tt class="REPLACEABLE"><b class="calibre10">SELECT title, upper(title)</b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">       FROM books</b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">       ORDER BY id ASC</b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">       LIMIT 3;</b></tt>
        title         |        upper
----------------------+----------------------
 The Tell-Tale Heart  | THE TELL-TALE HEART
 Little Women         | LITTLE WOMEN
 The Velveteen Rabbit | THE VELVETEEN RABBIT
(3 rows)</pre></div></div><div class="NAVHEADER"><h2 class="SECT"><a name="DATEANDTIMEFUNCTIONS" class="calibre8">Date and Time Functions</a></h2><p class="calibre9">The standard SQL92 date and time functions (<tt class="REPLACEABLE">current_date</tt>,
      <tt class="REPLACEABLE">current_time</tt>, <tt class="REPLACEABLE">current_timestamp</tt>, and
      <tt class="REPLACEABLE">extract()</tt>) are each supported by PostgreSQL, as well as a variety of PostgreSQL-specific
      extensions. Each of PostgreSQL's date and time retrieval and extraction functions are listed in <a href="x8973.htm#DATEANDTIMEFUNCTIONSTABLE">Table 5-11</a>.</p><div class="NAVHEADER"><a name="DATEANDTIMEFUNCTIONSTABLE"></a><p class="calibre9"><b class="calibre10">Table 5-11. Date and time functions</b></p><table border="1" width="100%" class="calibre"><thead class="calibre11"><tr class="calibre12"><th width="7" valign="TOP" class="calibre25"><p class="calibre9">Function</p></th><th width="21" valign="TOP" class="calibre25"><p class="calibre9">Description</p></th></tr></thead><tbody class="calibre14"><tr class="calibre12"><td width="7" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE">current_date</tt></p></td><td width="21" valign="TOP" class="calibre15"><p class="calibre9">Returns the current date as a value of type <tt class="REPLACEABLE">date</tt></p></td></tr><tr class="calibre12"><td width="7" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE">current_time</tt></p></td><td width="21" valign="TOP" class="calibre15"><p class="calibre9">Returns the current time as a value of type <tt class="REPLACEABLE">time</tt></p></td></tr><tr class="calibre12"><td width="7" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE">current_timestamp</tt></p></td><td width="21" valign="TOP" class="calibre15"><p class="calibre9">Returns the current date and time as a value of type <tt class="REPLACEABLE">timestamp</tt></p></td></tr><tr class="calibre12"><td width="7" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE">date_part(</tt><tt class="REPLACEABLE"><i class="EMPHASIS">s</i></tt> , <tt class="REPLACEABLE"><i class="EMPHASIS">t</i></tt> )</p></td><td width="21" valign="TOP" class="calibre15"><p class="calibre9">Returns a date or time element from <tt class="REPLACEABLE">timestamp</tt> <tt class="REPLACEABLE"><i class="EMPHASIS">t</i></tt> as specified by character string <tt class="REPLACEABLE"><i class="EMPHASIS">s</i></tt></p></td></tr><tr class="calibre12"><td width="7" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE">date_part(</tt><tt class="REPLACEABLE"><i class="EMPHASIS">s</i></tt> , <tt class="REPLACEABLE"><i class="EMPHASIS">i</i></tt> )</p></td><td width="21" valign="TOP" class="calibre15"><p class="calibre9">Returns a date or time element from <tt class="REPLACEABLE">interval</tt> <tt class="REPLACEABLE"><i class="EMPHASIS">i</i></tt> as specified by character string <tt class="REPLACEABLE"><i class="EMPHASIS">s</i></tt></p></td></tr><tr class="calibre12"><td width="7" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE">date_trunc(</tt><tt class="REPLACEABLE"><i class="EMPHASIS">s</i></tt> , <tt class="REPLACEABLE"><i class="EMPHASIS">t</i></tt> )</p></td><td width="21" valign="TOP" class="calibre15"><p class="calibre9">Returns <tt class="REPLACEABLE">timestamp</tt> <tt class="REPLACEABLE"><i class="EMPHASIS">t</i></tt> truncated to the degree specified by <tt class="REPLACEABLE"><i class="EMPHASIS">s</i></tt></p></td></tr><tr class="calibre12"><td width="7" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE">extract(</tt><tt class="REPLACEABLE"><i class="EMPHASIS">k</i></tt> FROM <tt class="REPLACEABLE"><i class="EMPHASIS">t</i></tt> )</p></td><td width="21" valign="TOP" class="calibre15"><p class="calibre9">Returns a date or time element from <tt class="REPLACEABLE">timestamp</tt> <tt class="REPLACEABLE"><i class="EMPHASIS">t</i></tt> as specified by the keyword <tt class="REPLACEABLE"><i class="EMPHASIS">k</i></tt></p></td></tr><tr class="calibre12"><td width="7" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE">extract(</tt><tt class="REPLACEABLE"><i class="EMPHASIS">k</i></tt> FROM <tt class="REPLACEABLE"><i class="EMPHASIS">i</i></tt> )</p></td><td width="21" valign="TOP" class="calibre15"><p class="calibre9">Returns a date or time element from <tt class="REPLACEABLE">interval</tt> <tt class="REPLACEABLE"><i class="EMPHASIS">i</i></tt> as specified by the keyword <tt class="REPLACEABLE"><i class="EMPHASIS">k</i></tt></p></td></tr><tr class="calibre12"><td width="7" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE">isfinite(</tt><tt class="REPLACEABLE"><i class="EMPHASIS">t</i></tt> )</p></td><td width="21" valign="TOP" class="calibre15"><p class="calibre9">Returns true if the <tt class="REPLACEABLE">timestamp</tt> <tt class="REPLACEABLE"><i class="EMPHASIS">t</i></tt> is a finite value (neither <span><i class="EMPHASIS">invalid</i></span>, nor <span><i class="EMPHASIS">infinity</i></span>)</p></td></tr><tr class="calibre12"><td width="7" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE">isfinite(</tt><tt class="REPLACEABLE"><i class="EMPHASIS">i</i></tt> )</p></td><td width="21" valign="TOP" class="calibre15"><p class="calibre9">Returns true if the <tt class="REPLACEABLE">interval</tt> <tt class="REPLACEABLE"><i class="EMPHASIS">i</i></tt> is a finite value (not <span><i class="EMPHASIS">infinity</i></span>)</p></td></tr><tr class="calibre12"><td width="7" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE">now()</tt></p></td><td width="21" valign="TOP" class="calibre15"><p class="calibre9">Returns the date and time as a <tt class="REPLACEABLE">timestamp</tt> value. This is equivalent to the <span><i class="EMPHASIS">now</i></span> timestamp constant.</p></td></tr><tr class="calibre12"><td width="7" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE">timeofday()</tt></p></td><td width="21" valign="TOP" class="calibre15"><p class="calibre9">Returns the current date and time as a <tt class="REPLACEABLE">text</tt> value</p></td></tr></tbody></table></div><p class="calibre9">The following sections elaborate on each of PostgreSQL's date and time functions described in <a href="x8973.htm#DATEANDTIMEFUNCTIONSTABLE">Table 5-11</a>. Note that the syntax for the <tt class="REPLACEABLE">current_date</tt>,
      <tt class="REPLACEABLE">current_time</tt> and <tt class="REPLACEABLE">current_timestamp</tt> functions
      omits the parentheses. This is done to remain compliant with the SQL92 standard requirements.</p><div class="NAVHEADER"><h3 class="AUTHOR"><a name="AEN10855" class="calibre8">current_date</a></h3><pre class="SCREEN">current_date</pre><p class="calibre9">The <tt class="REPLACEABLE">current_date</tt> function accepts no arguments, and returns the current date as a
        value of type <tt class="REPLACEABLE">date</tt>. This is identical to casting the special <span><i class="EMPHASIS">now</i></span>
        constant to a value of type <tt class="REPLACEABLE">date</tt>.</p><p class="calibre9"><span><i class="EMPHASIS">Example</i></span></p><pre class="SCREEN">booktown=# <tt class="REPLACEABLE"><b class="calibre10">SELECT current_date,</b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">       'now'::date AS date;</b></tt>
    date    |    date
------------+------------
 2001-08-31 | 2001-08-31
(1 row)</pre></div><div class="NAVHEADER"><h3 class="AUTHOR"><a name="AEN10872" class="calibre8">current_time</a></h3><pre class="SCREEN">current_time</pre><p class="calibre9">The <tt class="REPLACEABLE">current_time</tt> function accepts no arguments, and returns the current time as a
        value of type <tt class="REPLACEABLE">time</tt>. This is identical to casting the special <span><i class="EMPHASIS">now</i></span>
        constant to a value of type <tt class="REPLACEABLE">time</tt>.</p><p class="calibre9"><span><i class="EMPHASIS">Example</i></span></p><pre class="SCREEN">booktown=# <tt class="REPLACEABLE"><b class="calibre10">SELECT current_time,</b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">       'now'::time AS time;</b></tt>
   time   |   time
----------+----------
 11:36:52 | 11:36:52
(1 row)</pre></div><div class="NAVHEADER"><h3 class="AUTHOR"><a name="AEN10889" class="calibre8">current_timestamp</a></h3><pre class="SCREEN">current_timestamp</pre><p class="calibre9">The <tt class="REPLACEABLE">current_timestamp</tt> function accepts no arguments, and returns the current date
        and time as a value of type <tt class="REPLACEABLE">timestamp</tt>. This is identical to casting the special
        <span><i class="EMPHASIS">now</i></span> constant to a value of type <tt class="REPLACEABLE">timestamp</tt>, or to calling the
        <tt class="REPLACEABLE">now()</tt> function.</p><p class="calibre9"><span><i class="EMPHASIS">Example</i></span></p><pre class="SCREEN">booktown=# <tt class="REPLACEABLE"><b class="calibre10">SELECT current_timestamp,</b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">       now() AS timestamp;</b></tt>
       timestamp        |       timestamp
------------------------+------------------------
 2001-08-31 11:39:42-07 | 2001-08-31 11:39:42-07
(1 row)</pre></div><div class="NAVHEADER"><h3 class="AUTHOR"><a name="AEN10907" class="calibre8">date_ part()</a></h3><pre class="SCREEN">date_part(<tt class="REPLACEABLE"><i class="EMPHASIS">s</i></tt> , <tt class="REPLACEABLE"><i class="EMPHASIS">t</i></tt> )
date_part(<tt class="REPLACEABLE"><i class="EMPHASIS">s</i></tt> , <tt class="REPLACEABLE"><i class="EMPHASIS">i</i></tt> )</pre><p class="calibre9">The <tt class="REPLACEABLE">date_part()</tt> function accepts two arguments, <tt class="REPLACEABLE"><i class="EMPHASIS">s</i></tt> of type
        <tt class="REPLACEABLE">text</tt>, and either <tt class="REPLACEABLE"><i class="EMPHASIS">t</i></tt> of type
        <tt class="REPLACEABLE">timestamp</tt>, or <tt class="REPLACEABLE"><i class="EMPHASIS">i</i></tt> of type <tt class="REPLACEABLE">interval</tt>. The
        function removes the part of the time length specified by <tt class="REPLACEABLE"><i class="EMPHASIS">s</i></tt>, and returns it as a value of type
        <tt class="REPLACEABLE">double precision</tt>.</p><p class="calibre9">To understand the function of <tt class="REPLACEABLE">date_part()</tt>, it can be helpful to think of a
        <tt class="REPLACEABLE">timestamp</tt> or <tt class="REPLACEABLE">interval</tt> value as being broken up into
        several <span><i class="EMPHASIS">fields</i></span>. These fields each describe a discrete component of the temporal value, such as the
        number of days, hours, or minutes described. The valid values for time field units described by <tt class="REPLACEABLE"><i class="EMPHASIS">s</i></tt>
        are detailed in <a href="x8973.htm#TIMESTAMPANDINTERVALUNITS">Table 5-12</a>. Notice that some values are only appropriate for use with a
        <tt class="REPLACEABLE">timestamp</tt> value, and not with an <tt class="REPLACEABLE">interval</tt>.</p><div class="NAVHEADER"><a name="TIMESTAMPANDINTERVALUNITS"></a><p class="calibre9"><b class="calibre10">Table 5-12. Timestamp and interval units</b></p><table border="1" width="100%" class="calibre"><thead class="calibre11"><tr class="calibre12"><th width="5" valign="TOP" class="calibre13"><p class="calibre9">Unit</p></th><th width="23" valign="TOP" class="calibre13"><p class="calibre9">Description</p></th></tr></thead><tbody class="calibre14"><tr class="calibre12"><td width="5" valign="TOP" class="calibre15"><p class="calibre9">century</p></td><td width="23" valign="TOP" class="calibre15"><p class="calibre9">Describes the year field, divided by 100 (will not describe the literal century)</p></td></tr><tr class="calibre12"><td width="5" valign="TOP" class="calibre15"><p class="calibre9">day</p></td><td width="23" valign="TOP" class="calibre15"><p class="calibre9">Describes the day field, from 1 to 31, for a <tt class="REPLACEABLE">timestamp</tt>, or the total number of days for an <tt class="REPLACEABLE">interval</tt></p></td></tr><tr class="calibre12"><td width="5" valign="TOP" class="calibre15"><p class="calibre9">decade</p></td><td width="23" valign="TOP" class="calibre15"><p class="calibre9">Describes the year field, divided by 10</p></td></tr><tr class="calibre12"><td width="5" valign="TOP" class="calibre15"><p class="calibre9">dow</p></td><td width="23" valign="TOP" class="calibre15"><p class="calibre9">Describes the day of the week field, from 0 to 6 (beginning on Sunday), for a <tt class="REPLACEABLE">timestamp</tt>, not applicable to an <tt class="REPLACEABLE">interval</tt></p></td></tr><tr class="calibre12"><td width="5" valign="TOP" class="calibre15"><p class="calibre9">doy</p></td><td width="23" valign="TOP" class="calibre15"><p class="calibre9">Describes the day of the year field, from 1 to 365 or 366 for a <tt class="REPLACEABLE">timestamp</tt> value, not application to an <tt class="REPLACEABLE">interval</tt></p></td></tr><tr class="calibre12"><td width="5" valign="TOP" class="calibre15"><p class="calibre9">epoch</p></td><td width="23" valign="TOP" class="calibre15"><p class="calibre9">Describes the number of seconds since the <span><i class="EMPHASIS">epoch</i></span> (Jan 1, 1970) for a <tt class="REPLACEABLE">timestamp</tt>, or total number of seconds for an <tt class="REPLACEABLE">interval</tt></p></td></tr><tr class="calibre12"><td width="5" valign="TOP" class="calibre15"><p class="calibre9">hour</p></td><td width="23" valign="TOP" class="calibre15"><p class="calibre9">Describes the hour represented by a <tt class="REPLACEABLE">timestamp</tt> </p></td></tr><tr class="calibre12"><td width="5" valign="TOP" class="calibre15"><p class="calibre9">microseconds</p></td><td width="23" valign="TOP" class="calibre15"><p class="calibre9">Describes the millionths of seconds following the decimal in the seconds field of a <tt class="REPLACEABLE">timestamp</tt> value</p></td></tr><tr class="calibre12"><td width="5" valign="TOP" class="calibre15"><p class="calibre9">millennium</p></td><td width="23" valign="TOP" class="calibre15"><p class="calibre9">Describes the year field, divided by 1000 (will not describe the literal millennium)</p></td></tr><tr class="calibre12"><td width="5" valign="TOP" class="calibre15"><p class="calibre9">milliseconds</p></td><td width="23" valign="TOP" class="calibre15"><p class="calibre9">Describes the thousandths of seconds following the decimal in the seconds field of a <tt class="REPLACEABLE">timestamp</tt> value</p></td></tr><tr class="calibre12"><td width="5" valign="TOP" class="calibre15"><p class="calibre9">minute</p></td><td width="23" valign="TOP" class="calibre15"><p class="calibre9">Describes the minutes field of a <tt class="REPLACEABLE">timestamp</tt> or <tt class="REPLACEABLE">interval</tt> value</p></td></tr><tr class="calibre12"><td width="5" valign="TOP" class="calibre15"><p class="calibre9">month</p></td><td width="23" valign="TOP" class="calibre15"><p class="calibre9">Describes the month of the year for a <tt class="REPLACEABLE">timestamp</tt> value, or the number of months modulo 12 for <tt class="REPLACEABLE">interval</tt> values</p></td></tr><tr class="calibre12"><td width="5" valign="TOP" class="calibre15"><p class="calibre9">quarter</p></td><td width="23" valign="TOP" class="calibre15"><p class="calibre9">Describes the quarter of the year, from 1 to 4, for <tt class="REPLACEABLE">timestamp</tt> values</p></td></tr><tr class="calibre12"><td width="5" valign="TOP" class="calibre15"><p class="calibre9">second</p></td><td width="23" valign="TOP" class="calibre15"><p class="calibre9">Describes the seconds field of a <tt class="REPLACEABLE">timestamp</tt> or <tt class="REPLACEABLE">interval</tt> value</p></td></tr><tr class="calibre12"><td width="5" valign="TOP" class="calibre15"><p class="calibre9">week</p></td><td width="23" valign="TOP" class="calibre15"><p class="calibre9">Describes the week of the year of a <tt class="REPLACEABLE">timestamp</tt> value. ISO-8601 defines the first week of the year to be the week containing January 4.</p></td></tr><tr class="calibre12"><td width="5" valign="TOP" class="calibre15"><p class="calibre9">year</p></td><td width="23" valign="TOP" class="calibre15"><p class="calibre9">Describes the year field of a <tt class="REPLACEABLE">timestamp</tt> or <tt class="REPLACEABLE">interval</tt> value</p></td></tr></tbody></table></div><p class="calibre9"><span><i class="EMPHASIS">Examples</i></span></p><pre class="SCREEN">booktown=# <tt class="REPLACEABLE"><b class="calibre10">SELECT date_part('minute',</b></tt>
booktown(# <tt class="REPLACEABLE"><b class="calibre10">                 interval('3 days 4 hours 12 minutes'));</b></tt>
 date_part
-----------
        12
(1 row)

booktown=# <tt class="REPLACEABLE"><b class="calibre10">SELECT isbn,</b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">       date_part('year', publication)</b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">       FROM editions</b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">       ORDER BY date_part ASC</b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">       LIMIT 3;</b></tt>
    isbn    | date_part
------------+-----------
 0760720002 |      1868
 0679803335 |      1922
 0694003611 |      1947
(3 rows)</pre><div class="NAVHEADER"><blockquote class="NOTE"><p class="calibre9"><b class="calibre10">Note: </b>The standard SQL function for achieving the same function as the <tt class="REPLACEABLE">date_part()</tt> function
          is the <tt class="REPLACEABLE">extract()</tt> function.</p></blockquote></div></div><div class="NAVHEADER"><h3 class="AUTHOR"><a name="AEN11065" class="calibre8">date_trunc()</a></h3><pre class="SCREEN">date_trunc(<tt class="REPLACEABLE"><i class="EMPHASIS">s</i></tt> , <tt class="REPLACEABLE"><i class="EMPHASIS">t</i></tt> )</pre><p class="calibre9">The <tt class="REPLACEABLE">date_trunc()</tt> function accepts two arguments <tt class="REPLACEABLE"><i class="EMPHASIS">s</i></tt> and
        <tt class="REPLACEABLE"><i class="EMPHASIS">t</i></tt>, of types <tt class="REPLACEABLE">text</tt> and <tt class="REPLACEABLE">timestamp</tt>,
        respectively. The character string <tt class="REPLACEABLE"><i class="EMPHASIS">s</i></tt> defines the degree to which the timestamp value
        <tt class="REPLACEABLE"><i class="EMPHASIS">t</i></tt> should be truncated. In this context, truncation means eliminating an amount of detail in the
        value represented.</p><p class="calibre9">See <a href="x8973.htm#TIMESTAMPANDINTERVALUNITS">Table 5-12</a> for valid values for time unit <tt class="REPLACEABLE"><i class="EMPHASIS">s</i></tt>.</p><p class="calibre9"><span><i class="EMPHASIS">Example</i></span></p><pre class="SCREEN">booktown=# <tt class="REPLACEABLE"><b class="calibre10">SELECT date_trunc('minute', now());</b></tt>
       date_trunc
------------------------
 2001-08-31 09:59:00-07
(1 row)

booktown=# <tt class="REPLACEABLE"><b class="calibre10">SELECT date_trunc('hour', now());</b></tt>
       date_trunc
------------------------
 2001-08-31 09:00:00-07
(1 row)

booktown=# <tt class="REPLACEABLE"><b class="calibre10">SELECT date_trunc('year', now());</b></tt>
       date_trunc
------------------------
 2001-01-01 00:00:00-08
(1 row)</pre></div><div class="NAVHEADER"><h3 class="AUTHOR"><a name="AEN11091" class="calibre8">extract()</a></h3><pre class="SCREEN">extract(<tt class="REPLACEABLE"><i class="EMPHASIS">k</i></tt> FROM <tt class="REPLACEABLE"><i class="EMPHASIS">t</i></tt>)
extract(<tt class="REPLACEABLE"><i class="EMPHASIS">k</i></tt> FROM <tt class="REPLACEABLE"><i class="EMPHASIS">i</i></tt>)</pre><p class="calibre9">The <tt class="REPLACEABLE">extract()</tt> function is the SQL92 equivalent to PostgreSQL's
        <tt class="REPLACEABLE">date_part()</tt> function, with a slightly modified syntax. The SQL syntax for this function
        uses the <tt class="REPLACEABLE">FROM</tt> keyword, rather than a comma. The arguments are similar to those for the
        <tt class="REPLACEABLE">date_part()</tt> function, though it differs in that its first argument is a SQL
        <span><i class="EMPHASIS">keyword</i></span>, rather than a character string, and should therefore not be quoted. Valid values for
        <tt class="REPLACEABLE"><i class="EMPHASIS">k</i></tt> are the same as those listed in <a href="x8973.htm#TIMESTAMPANDINTERVALUNITS">Table 5-12</a>.</p><p class="calibre9">Note that the <tt class="REPLACEABLE">extract()</tt> function exists as a SQL92 syntax "alias" for the
        PostgreSQL <tt class="REPLACEABLE">date_part()</tt> function; for this reason, the output column name from PostgreSQL
        is, by default, <tt class="REPLACEABLE">date_ part</tt>.</p><p class="calibre9"><span><i class="EMPHASIS">Examples</i></span></p><pre class="SCREEN">booktown=# <tt class="REPLACEABLE"><b class="calibre10">SELECT extract(MINUTE FROM interval('3 days 12 minutes'));</b></tt>
 date_part
-----------
        12
(1 row)

booktown=# <tt class="REPLACEABLE"><b class="calibre10">SELECT extract(MONTH FROM now());</b></tt>
 date_part
-----------
         8
(1 row)</pre></div><div class="NAVHEADER"><h3 class="AUTHOR"><a name="AEN11119" class="calibre8">isfinite()</a></h3><pre class="SCREEN">isfinite(<tt class="REPLACEABLE"><i class="EMPHASIS">t</i></tt> )
isfinite(<tt class="REPLACEABLE"><i class="EMPHASIS">i</i></tt> )</pre><p class="calibre9">The <tt class="REPLACEABLE">isfinite()</tt> function accepts one argument, of type
        <tt class="REPLACEABLE">timestamp</tt> or type <tt class="REPLACEABLE">interval</tt>. It returns true if the
        value passed to it is not found to be an infinite value, which would be one set with either the special constant
        <tt class="REPLACEABLE"><i class="EMPHASIS">infinity</i></tt> or <tt class="REPLACEABLE"><i class="EMPHASIS">invalid</i></tt> (a special <tt class="REPLACEABLE">timestamp</tt>
        constant only).</p><p class="calibre9"><span><i class="EMPHASIS">Example</i></span></p><pre class="SCREEN">booktown=# <tt class="REPLACEABLE"><b class="calibre10">SELECT isfinite('now'::timestamp) AS now_is_finite,</b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">       isfinite('infinity'::timestamp) AS infinity,</b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">       isfinite('invalid'::timestamp) AS invalid;</b></tt>
 now_is_finite | infinity | invalid
---------------+----------+---------
 t             | f        | f
(1 row)</pre></div><div class="NAVHEADER"><h3 class="AUTHOR"><a name="AEN11141" class="calibre8">now()</a></h3><pre class="SCREEN">now()</pre><p class="calibre9">The <tt class="REPLACEABLE">now()</tt> function accepts no arguments, and returns the time and date of when
        <tt class="REPLACEABLE">now()</tt> is executed by PostgreSQL, in the form of a
        <tt class="REPLACEABLE">timestamp</tt> value.</p><p class="calibre9"><span><i class="EMPHASIS">Example</i></span></p><pre class="SCREEN">booktown=# <tt class="REPLACEABLE"><b class="calibre10">SELECT now();</b></tt>
          now
------------------------
 2001-08-31 10:31:18-07
(1 row)</pre></div><div class="NAVHEADER"><h3 class="AUTHOR"><a name="AEN11156" class="calibre8">timeofday()</a></h3><pre class="SCREEN">timeofday()</pre><p class="calibre9">The <tt class="REPLACEABLE">timeofday()</tt> function accepts no arguments. It returns the time and date
	of when the function is executed by PostgreSQL. The <tt class="REPLACEABLE">timeofday()</tt> function is similar
	in use to the <tt class="REPLACEABLE">now()</tt> function. However, the <tt class="REPLACEABLE">timeofday()</tt>
	function returns a value of the type <tt class="REPLACEABLE">text</tt>. This means that it is less flexible to work
        with, as you cannot use the <tt class="REPLACEABLE">date_part()</tt> or <tt class="REPLACEABLE">to_char()</tt> functions
        to break down elements of the value without casting it first to another type. It can be useful for applications that require
        a UNIX style timestamp, as well as providing extended precision for the seconds value.</p><p class="calibre9"><span><i class="EMPHASIS">Example</i></span></p><pre class="SCREEN">booktown=# <tt class="REPLACEABLE"><b class="calibre10">SELECT timeofday();</b></tt>
              timeofday
-------------------------------------
 Fri Aug 31 10:33:00.837338 2001 PDT
(1 row)</pre></div></div><div class="NAVHEADER"><h2 class="SECT"><a name="TYPECONVERSIONFUNCTIONS" class="calibre8">Type Conversion Functions</a></h2><p class="calibre9">While PostgreSQL is able to explicitly cast between most commonly used data types, some conversions require a function
      in order to meaningfully translate values. Some of PostgreSQL's commonly used type conversion functions
      are listed in <a href="x8973.htm#TYPECONVERSIONFUNCTIONSTABLE">Table 5-13</a>. These are detailed in the following sections.</p><div class="NAVHEADER"><a name="TYPECONVERSIONFUNCTIONSTABLE"></a><p class="calibre9"><b class="calibre10">Table 5-13. Type conversion functions</b></p><table border="1" width="100%" class="calibre"><thead class="calibre11"><tr class="calibre12"><th width="8" valign="TOP" class="calibre13"><p class="calibre9">Function</p></th><th width="21" valign="TOP" class="calibre13"><p class="calibre9">Description</p></th></tr></thead><tbody class="calibre14"><tr class="calibre12"><td width="8" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE">bitfromint4(</tt><tt class="REPLACEABLE"><i class="EMPHASIS">n</i></tt> )</p></td><td width="21" valign="TOP" class="calibre15"><p class="calibre9">Converts numeric value <tt class="REPLACEABLE"><i class="EMPHASIS">n</i></tt> to a binary bit string</p></td></tr><tr class="calibre12"><td width="8" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE">bittoint4(</tt><tt class="REPLACEABLE"><i class="EMPHASIS">b</i></tt> )</p></td><td width="21" valign="TOP" class="calibre15"><p class="calibre9">Converts bit string <tt class="REPLACEABLE"><i class="EMPHASIS">b</i></tt> to its numeric decimal representation</p></td></tr><tr class="calibre12"><td width="8" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE">to_char(</tt><tt class="REPLACEABLE"><i class="EMPHASIS">n</i></tt> , <tt class="REPLACEABLE"><i class="EMPHASIS">f</i></tt> )</p></td><td width="21" valign="TOP" class="calibre15"><p class="calibre9">Converts numeric value <tt class="REPLACEABLE"><i class="EMPHASIS">n</i></tt> to a character string with format <tt class="REPLACEABLE"><i class="EMPHASIS">f</i></tt> </p></td></tr><tr class="calibre12"><td width="8" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE">to_char(</tt><tt class="REPLACEABLE"><i class="EMPHASIS">t</i></tt> , <tt class="REPLACEABLE"><i class="EMPHASIS">f</i></tt> )</p></td><td width="21" valign="TOP" class="calibre15"><p class="calibre9">Converts timestamp <tt class="REPLACEABLE"><i class="EMPHASIS">t</i></tt> to a character string with format <tt class="REPLACEABLE"><i class="EMPHASIS">f</i></tt> </p></td></tr><tr class="calibre12"><td width="8" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE">to_date(</tt><tt class="REPLACEABLE"><i class="EMPHASIS">s</i></tt> , <tt class="REPLACEABLE"><i class="EMPHASIS">f</i></tt> )</p></td><td width="21" valign="TOP" class="calibre15"><p class="calibre9">Converts character string <tt class="REPLACEABLE"><i class="EMPHASIS">s</i></tt> with date format <tt class="REPLACEABLE"><i class="EMPHASIS">f</i></tt> to a <tt class="REPLACEABLE">date</tt> value</p></td></tr><tr class="calibre12"><td width="8" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE">to_number(</tt><tt class="REPLACEABLE"><i class="EMPHASIS">s</i></tt> , <tt class="REPLACEABLE"><i class="EMPHASIS">f</i></tt> )</p></td><td width="21" valign="TOP" class="calibre15"><p class="calibre9">Converts character string <tt class="REPLACEABLE"><i class="EMPHASIS">s</i></tt> with format <tt class="REPLACEABLE"><i class="EMPHASIS">f</i></tt> to a <tt class="REPLACEABLE">numeric</tt> value</p></td></tr><tr class="calibre12"><td width="8" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE">to_timestamp(</tt><tt class="REPLACEABLE"><i class="EMPHASIS">s</i></tt> , <tt class="REPLACEABLE"><i class="EMPHASIS">f</i></tt> )</p></td><td width="21" valign="TOP" class="calibre15"><p class="calibre9">Converts character string <tt class="REPLACEABLE"><i class="EMPHASIS">s</i></tt> with format <tt class="REPLACEABLE"><i class="EMPHASIS">f</i></tt> to a <tt class="REPLACEABLE">timestamp</tt> value</p></td></tr><tr class="calibre12"><td width="8" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE">timestamp(</tt><tt class="REPLACEABLE"><i class="EMPHASIS">d</i></tt> )</p></td><td width="21" valign="TOP" class="calibre15"><p class="calibre9">Returns the <tt class="REPLACEABLE">date</tt> <tt class="REPLACEABLE"><i class="EMPHASIS">d</i></tt> as a value of type <tt class="REPLACEABLE">timestamp</tt></p></td></tr><tr class="calibre12"><td width="8" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE">timestamp(</tt><tt class="REPLACEABLE"><i class="EMPHASIS">d</i></tt> , <tt class="REPLACEABLE"><i class="EMPHASIS">t</i></tt> )</p></td><td width="21" valign="TOP" class="calibre15"><p class="calibre9">Returns a <tt class="REPLACEABLE">timestamp</tt> value derived from <tt class="REPLACEABLE">date</tt> d and <tt class="REPLACEABLE">time</tt> t</p></td></tr></tbody></table></div><div class="NAVHEADER"><h3 class="AUTHOR"><a name="AEN11289" class="calibre8">bitfromint4()</a></h3><pre class="SCREEN">bitfromint4(<tt class="REPLACEABLE"><i class="EMPHASIS">n</i></tt> )</pre><p class="calibre9">The <tt class="REPLACEABLE">bitfromint4()</tt> function accepts a single argument <tt class="REPLACEABLE"><i class="EMPHASIS">n</i></tt> of type
        <tt class="REPLACEABLE">integer</tt> and returns its binary bit string equivalent. As explicit casts between binary and
        integer types do not exist, this function is required to transform decimal values to their binary counterparts.</p><p class="calibre9">The returned value is of type <tt class="REPLACEABLE">bit</tt>, and may not exceed 32 bits. Therefore, since the
        <tt class="REPLACEABLE">integer</tt> argument is signed, valid input values are between –2147483648
        and 2147483647.</p><p class="calibre9"><span><i class="EMPHASIS">Example</i></span></p><pre class="SCREEN">booktown=# <tt class="REPLACEABLE"><b class="calibre10">SELECT bitfromint4(16385);</b></tt>
           bitfromint4
----------------------------------
 00000000000000000100000000000001
(1 row)</pre></div><div class="NAVHEADER"><h3 class="AUTHOR"><a name="AEN11308" class="calibre8">bittoint4()</a></h3><pre class="SCREEN">bittoint4(<tt class="REPLACEABLE"><i class="EMPHASIS">b</i></tt> )</pre><p class="calibre9">The <tt class="REPLACEABLE">bittoint4()</tt> function is essentially the inverse of the
        <tt class="REPLACEABLE">bitfromint4()</tt> function; it accepts a single argument <tt class="REPLACEABLE"><i class="EMPHASIS">b</i></tt> of type
        <tt class="REPLACEABLE">bit</tt> and returns its decimal numeric value as type
        <tt class="REPLACEABLE">integer</tt>.</p><p class="calibre9">The bounds of input and output are the reverse of the <tt class="REPLACEABLE">bitfromint4</tt> function,
        in that it accepts up to 32 binary digits, and will thus not return more than 2147483647 or less than –2147483648
        as its result value.</p><p class="calibre9"><span><i class="EMPHASIS">Example</i></span></p><pre class="SCREEN">booktown=# <tt class="REPLACEABLE"><b class="calibre10">SELECT bittoint4(B'101010'),</b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">       bittoint4(bitfromint4(99)) AS inverse_example;</b></tt>
 bittoint4 | inverse_example
-----------+-----------------
        42 |              99
(1 row)</pre></div><div class="NAVHEADER"><h3 class="AUTHOR"><a name="AEN11329" class="calibre8">to_char() with numbers</a></h3><pre class="SCREEN">to_char(<tt class="REPLACEABLE"><i class="EMPHASIS">n</i></tt> , <tt class="REPLACEABLE"><i class="EMPHASIS">f</i></tt> )</pre><p class="calibre9">The <tt class="REPLACEABLE">to_char()</tt> function, when used with argument <tt class="REPLACEABLE"><i class="EMPHASIS">n</i></tt> of type
        <tt class="REPLACEABLE">numeric</tt> and argument <tt class="REPLACEABLE"><i class="EMPHASIS">f</i></tt>, of type
        <tt class="REPLACEABLE">text</tt>, formats the numeric value of <tt class="REPLACEABLE">n</tt> to a character
        string returned as type <tt class="REPLACEABLE">text</tt>. The character string <tt class="REPLACEABLE"><i class="EMPHASIS">f</i></tt> describes
        the character string format within which to place the value of <tt class="REPLACEABLE"><i class="EMPHASIS">n</i></tt>.</p><p class="calibre9">The <tt class="REPLACEABLE"><i class="EMPHASIS">f</i></tt> format string consists of a series of <span><i class="EMPHASIS">meta-characters</i></span>, which PostgreSQL
        translates into the literal values they represent. Valid meta-characters that may be used within this
        format string for a numeric conversion are outlined in <a href="x8973.htm#NUMERICCONVERSIONFORMATTINGCHARACTERS">Table 5-14</a>.</p><div class="NAVHEADER"><a name="NUMERICCONVERSIONFORMATTINGCHARACTERS"></a><p class="calibre9"><b class="calibre10">Table 5-14. Numeric conversion formatting characters</b></p><table border="1" width="100%" class="calibre"><thead class="calibre11"><tr class="calibre12"><th width="3" valign="TOP" class="calibre13"><p class="calibre9">Character</p></th><th width="25" valign="TOP" class="calibre13"><p class="calibre9">Description</p></th></tr></thead><tbody class="calibre14"><tr class="calibre12"><td width="3" valign="TOP" class="calibre15"><p class="calibre9">9</p></td><td width="25" valign="TOP" class="calibre15"><p class="calibre9">The next sequential digit in the value <tt class="REPLACEABLE"><i class="EMPHASIS">n</i></tt></p></td></tr><tr class="calibre12"><td width="3" valign="TOP" class="calibre15"><p class="calibre9">0</p></td><td width="25" valign="TOP" class="calibre15"><p class="calibre9">The next sequential digit in <tt class="REPLACEABLE"><i class="EMPHASIS">n</i></tt>, or a leading or trailing zero if more digits are specified by <tt class="REPLACEABLE"><i class="EMPHASIS">f</i></tt> than are in <tt class="REPLACEABLE"><i class="EMPHASIS">n</i></tt>; may thus be used to force significant digits to the left or right of a value</p></td></tr><tr class="calibre12"><td width="3" valign="TOP" class="calibre15"><p class="calibre9">.</p></td><td width="25" valign="TOP" class="calibre15"><p class="calibre9">A decimal point (there can be only one)</p></td></tr><tr class="calibre12"><td width="3" valign="TOP" class="calibre15"><p class="calibre9">,</p></td><td width="25" valign="TOP" class="calibre15"><p class="calibre9">A comma (there can be several, for separating thousands, millions, etc.)</p></td></tr><tr class="calibre12"><td width="3" valign="TOP" class="calibre15"><p class="calibre9">D</p></td><td width="25" valign="TOP" class="calibre15"><p class="calibre9">A decimal point (e.g., a period) derived from locale</p></td></tr><tr class="calibre12"><td width="3" valign="TOP" class="calibre15"><p class="calibre9">G</p></td><td width="25" valign="TOP" class="calibre15"><p class="calibre9">A group separator (e.g., a comma) derived from locale</p></td></tr><tr class="calibre12"><td width="3" valign="TOP" class="calibre15"><p class="calibre9">PR</p></td><td width="25" valign="TOP" class="calibre15"><p class="calibre9">If <tt class="REPLACEABLE"><i class="EMPHASIS">n</i></tt> is a negative value, placing <span><i class="EMPHASIS">PR</i></span> at the end of <tt class="REPLACEABLE"><i class="EMPHASIS">f</i></tt> surrounds the returned string in angle brackets</p></td></tr><tr class="calibre12"><td width="3" valign="TOP" class="calibre15"><p class="calibre9">SG</p></td><td width="25" valign="TOP" class="calibre15"><p class="calibre9">A plus or minus sign, depending on the value of <tt class="REPLACEABLE"><i class="EMPHASIS">n</i></tt></p></td></tr><tr class="calibre12"><td width="3" valign="TOP" class="calibre15"><p class="calibre9">MI</p></td><td width="25" valign="TOP" class="calibre15"><p class="calibre9">A minus sign, if the <tt class="REPLACEABLE"><i class="EMPHASIS">n</i></tt> is negative</p></td></tr><tr class="calibre12"><td width="3" valign="TOP" class="calibre15"><p class="calibre9">PL</p></td><td width="25" valign="TOP" class="calibre15"><p class="calibre9">A plus sign, if <tt class="REPLACEABLE"><i class="EMPHASIS">n</i></tt> is positive</p></td></tr><tr class="calibre12"><td width="3" valign="TOP" class="calibre15"><p class="calibre9">S</p></td><td width="25" valign="TOP" class="calibre15"><p class="calibre9">A plus or minus sign, derived from locale</p></td></tr><tr class="calibre12"><td width="3" valign="TOP" class="calibre15"><p class="calibre9">L</p></td><td width="25" valign="TOP" class="calibre15"><p class="calibre9">A currency symbol, derived from locale</p></td></tr><tr class="calibre12"><td width="3" valign="TOP" class="calibre15"><p class="calibre9">RN</p></td><td width="25" valign="TOP" class="calibre15"><p class="calibre9">The Roman Numeral characters for numeric values of <tt class="REPLACEABLE"><i class="EMPHASIS">n</i></tt> between 1 and 3999</p></td></tr><tr class="calibre12"><td width="3" valign="TOP" class="calibre15"><p class="calibre9">TH, th</p></td><td width="25" valign="TOP" class="calibre15"><p class="calibre9">The appropriate ordinal suffix for <tt class="REPLACEABLE"><i class="EMPHASIS">n</i></tt> (e.g., <span><i class="EMPHASIS">4th</i></span>, <span><i class="EMPHASIS">2nd</i></span>)</p></td></tr><tr class="calibre12"><td width="3" valign="TOP" class="calibre15"><p class="calibre9">V</p></td><td width="25" valign="TOP" class="calibre15"><p class="calibre9">Adds a zero to the right for each <span><i class="EMPHASIS">9</i></span> following <span><i class="EMPHASIS">V</i></span>, effectively shifting up by exponents of ten</p></td></tr><tr class="calibre12"><td width="3" valign="TOP" class="calibre15"><p class="calibre9">FM</p></td><td width="25" valign="TOP" class="calibre15"><p class="calibre9">Sets format to "fill mode," causing leading and trailing zeroes (created by the <span><i class="EMPHASIS">9</i></span> character, but not <span><i class="EMPHASIS">0</i></span>), and extra whitespace, to be omitted</p></td></tr></tbody></table></div><p class="calibre9">When more digits are specified with the <span><i class="EMPHASIS">9</i></span> character in the format string than are within the
        numeric value <tt class="REPLACEABLE"><i class="EMPHASIS">n</i></tt>, the extra digits will be padded with whitespace. When more digits are specified
        with the <span><i class="EMPHASIS">0</i></span> character, the extra digits will be padded with zeroes.</p><p class="calibre9">If <span><i class="EMPHASIS">fewer</i></span> digits are specified then are necessary to represent the digits to the left
        of the decimal, the meaning of the conversion becomes ambiguous, as significant digits must be omitted. Since it is
        unclear which digits should be omitted, the <tt class="REPLACEABLE">to_char()</tt> function will enter the
        <span><i class="EMPHASIS">#</i></span> character in place of each specified digit. It is therefore important to specify the maximum
        number of digits that you expect to receive back from the translation. You should also use a function such as
        <tt class="REPLACEABLE">translate()</tt> or one of the trim functions to remove unwanted whitespace from the translation.</p><p class="calibre9">Literal versions of meta-characters may be used within the format string by surrounding them with double quotes.
        Doing this within the format string changes the quoted meta-characters so they are interpreted literally. Note that in order to
        use a literal double-quote within this scheme, <span><i class="EMPHASIS">two backslashes</i></span> must prefix the double-quote, as it
        is essentially twice escaped.</p><div class="NAVHEADER"><blockquote class="NOTE"><p class="calibre9"><b class="calibre10">Note: </b>Any character that is not a meta-character may be safely used in a format string (e.g., the
          <span><i class="EMPHASIS">$</i></span> symbol). Such characters will appear in the formatted string unchanged.</p></blockquote></div><p class="calibre9"><span><i class="EMPHASIS">Examples</i></span></p><pre class="SCREEN">booktown=# <tt class="REPLACEABLE"><b class="calibre10">SELECT to_char(123456789, '999G999G999D99') AS formatted,</b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">       to_char(123456789, '999999999') AS just_digits,</b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">       to_char(123456789, '00999999999') AS with_zeroes;</b></tt>
    formatted    | just_digits | with_zeroes
-----------------+-------------+--------------
  123,456,789.00 |  123456789  |  00123456789
(1 row)

booktown=# <tt class="REPLACEABLE"><b class="calibre10">SELECT cost * 100 AS cost_to_order,</b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">       to_char(cost * 100, '$99,999.99') AS monetary,</b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">       translate(to_char(cost * 100, '$9,999.99'),' ','')</b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">         AS translated</b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">       FROM stock</b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">       LIMIT 3;</b></tt>
 cost_to_order |  monetary   | translated
---------------+-------------+------------
       2900.00 | $  2,900.00 | $2,900.00
       3000.00 | $  3,000.00 | $3,000.00
       1600.00 | $  1,600.00 | $1,600.00
(3 rows)

booktown=# <tt class="REPLACEABLE"><b class="calibre10">SELECT to_char(1.0, '9th "Place"') AS first,</b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">       to_char(2.2, '9th "Place"') AS second,</b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">       to_char(pi(), '9th "Place"') AS third,</b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">       to_char(10, '99V99th "\\"Place\\""') AS shifted_up;</b></tt>
   first    |   second   |   third    |   shifted_up
------------+------------+------------+-----------------
  1st Place |  2nd Place |  3rd Place |  1000th "Place"
(1 row)</pre><div class="NAVHEADER"><blockquote class="NOTE"><p class="calibre9"><b class="calibre10">Note: </b>Note that as of PostgreSQL v7.1.x, there is a bug in the usage of the <span><i class="EMPHASIS">RN</i></span> Roman Numeral
          conversion sequence which causes it to return invalid results unless used with the <span><i class="EMPHASIS">FM</i></span> character
          sequence. This is scheduled for correction in 7.2, but can be worked around by using the complete
          <span><i class="EMPHASIS">FMRN</i></span> sequence.</p></blockquote></div></div><div class="NAVHEADER"><h3 class="AUTHOR"><a name="AEN11497" class="calibre8">to_char() with timestamps</a></h3><pre class="SCREEN">to_char(<tt class="REPLACEABLE"><i class="EMPHASIS">t</i></tt> , <tt class="REPLACEABLE"><i class="EMPHASIS">f</i></tt> )</pre><p class="calibre9">When used with argument <tt class="REPLACEABLE"><i class="EMPHASIS">t</i></tt> of type <tt class="REPLACEABLE">timestamp</tt> and argument
        <tt class="REPLACEABLE"><i class="EMPHASIS">f</i></tt> of type <tt class="REPLACEABLE">text</tt> the <tt class="REPLACEABLE">to_char</tt>
        function formats the date and time represented by of <tt class="REPLACEABLE"><i class="EMPHASIS">t</i></tt> to a character string returned as
        type <tt class="REPLACEABLE">text</tt>.</p><p class="calibre9">As with the numeric functionality of <tt class="REPLACEABLE">to_char()</tt>, the character string
        <tt class="REPLACEABLE"><i class="EMPHASIS">f</i></tt> describes the meta-characters which are translated by PostgreSQL into the literal values they
        represent. Valid meta-characters that may be used within this format string for date and time values are outlined in
        <a href="x8973.htm#TIMESTAMPCONVERSIONFORMATTINGCHARACTERS">Table 5-15</a>.</p><div class="NAVHEADER"><a name="TIMESTAMPCONVERSIONFORMATTINGCHARACTERS"></a><p class="calibre9"><b class="calibre10">Table 5-15. Timestamp conversion formatting characters</b></p><table border="1" width="100%" class="calibre"><thead class="calibre11"><tr class="calibre12"><th width="7" valign="TOP" class="calibre13"><p class="calibre9">Character</p></th><th width="22" valign="TOP" class="calibre13"><p class="calibre9">Description</p></th></tr></thead><tbody class="calibre14"><tr class="calibre12"><td width="7" valign="TOP" class="calibre15"><p class="calibre9">HH, HH12</p></td><td width="22" valign="TOP" class="calibre15"><p class="calibre9">The hour of day, from 1 to 12</p></td></tr><tr class="calibre12"><td width="7" valign="TOP" class="calibre15"><p class="calibre9">HH24</p></td><td width="22" valign="TOP" class="calibre15"><p class="calibre9">The hour of the day, from 0 to 23</p></td></tr><tr class="calibre12"><td width="7" valign="TOP" class="calibre15"><p class="calibre9">MI</p></td><td width="22" valign="TOP" class="calibre15"><p class="calibre9">The minute, from 0 to 59</p></td></tr><tr class="calibre12"><td width="7" valign="TOP" class="calibre15"><p class="calibre9">SS</p></td><td width="22" valign="TOP" class="calibre15"><p class="calibre9">The second, from 0 to 59</p></td></tr><tr class="calibre12"><td width="7" valign="TOP" class="calibre15"><p class="calibre9">SSSS</p></td><td width="22" valign="TOP" class="calibre15"><p class="calibre9">The seconds past midnight, from 0 to 86,399</p></td></tr><tr class="calibre12"><td width="7" valign="TOP" class="calibre15"><p class="calibre9">AM, PM, A.M., P.M.</p></td><td width="22" valign="TOP" class="calibre15"><p class="calibre9">The meridian indicator in uppercase, with optional periods</p></td></tr><tr class="calibre12"><td width="7" valign="TOP" class="calibre15"><p class="calibre9">am, pm, a.m., p.m.</p></td><td width="22" valign="TOP" class="calibre15"><p class="calibre9">The meridian indicator in lowercase, with optional periods</p></td></tr><tr class="calibre12"><td width="7" valign="TOP" class="calibre15"><p class="calibre9">TZ, tz</p></td><td width="22" valign="TOP" class="calibre15"><p class="calibre9">The time zone, in upper or lowercase</p></td></tr><tr class="calibre12"><td width="7" valign="TOP" class="calibre15"><p class="calibre9">CC</p></td><td width="22" valign="TOP" class="calibre15"><p class="calibre9">The two-digit century (<span><i class="EMPHASIS">not</i></span> the year divided by 100)</p></td></tr><tr class="calibre12"><td width="7" valign="TOP" class="calibre15"><p class="calibre9">Y, YY, YYY, YYYY, Y,YYY</p></td><td width="22" valign="TOP" class="calibre15"><p class="calibre9">The year's last digit, last two digits, last three digits, or last four digits (with optional comma)</p></td></tr><tr class="calibre12"><td width="7" valign="TOP" class="calibre15"><p class="calibre9">BC, AD, B.C., A.D.</p></td><td width="22" valign="TOP" class="calibre15"><p class="calibre9">Year qualifier, in uppercase</p></td></tr><tr class="calibre12"><td width="7" valign="TOP" class="calibre15"><p class="calibre9">bc, ad, b.c., a.d.</p></td><td width="22" valign="TOP" class="calibre15"><p class="calibre9">Year qualifier, in lowercase</p></td></tr><tr class="calibre12"><td width="7" valign="TOP" class="calibre15"><p class="calibre9">MONTH, Month, month</p></td><td width="22" valign="TOP" class="calibre15"><p class="calibre9">The full month name, padded on the right with blanks to 9 characters in length, in uppercase, init-capped, or lowercase</p></td></tr><tr class="calibre12"><td width="7" valign="TOP" class="calibre15"><p class="calibre9">MON, Mon, mon</p></td><td width="22" valign="TOP" class="calibre15"><p class="calibre9">The abbreviated 3-letter month, in uppercase, init-capped, or lowercase</p></td></tr><tr class="calibre12"><td width="7" valign="TOP" class="calibre15"><p class="calibre9">MM</p></td><td width="22" valign="TOP" class="calibre15"><p class="calibre9">The month number, from 1 to 12</p></td></tr><tr class="calibre12"><td width="7" valign="TOP" class="calibre15"><p class="calibre9">RN, rn</p></td><td width="22" valign="TOP" class="calibre15"><p class="calibre9">The month in Roman Numerals, from I to XII, in upper or lowercase</p></td></tr><tr class="calibre12"><td width="7" valign="TOP" class="calibre15"><p class="calibre9">DAY, Day, day</p></td><td width="22" valign="TOP" class="calibre15"><p class="calibre9">The full day name, padded on the right to 9 characters in length, in uppercase, init-capped, or lowercase</p></td></tr><tr class="calibre12"><td width="7" valign="TOP" class="calibre15"><p class="calibre9">DY, Dy, dy</p></td><td width="22" valign="TOP" class="calibre15"><p class="calibre9">The abbreviated 3-letter day, in uppercase, init-capped, or lowercase</p></td></tr><tr class="calibre12"><td width="7" valign="TOP" class="calibre15"><p class="calibre9">DDD, DD, D</p></td><td width="22" valign="TOP" class="calibre15"><p class="calibre9">The day of the year, from 1 to 366, day of the month, from 1 to 31, or day of the week, from 1 to 7 (beginning on Sunday)</p></td></tr><tr class="calibre12"><td width="7" valign="TOP" class="calibre15"><p class="calibre9">W</p></td><td width="22" valign="TOP" class="calibre15"><p class="calibre9">The week of the month, from 1 to 5 (from the 1st day of the month)</p></td></tr><tr class="calibre12"><td width="7" valign="TOP" class="calibre15"><p class="calibre9">WW</p></td><td width="22" valign="TOP" class="calibre15"><p class="calibre9">The week of the year, from 1 to 53 (from the 1st day of the year)</p></td></tr><tr class="calibre12"><td width="7" valign="TOP" class="calibre15"><p class="calibre9">IW</p></td><td width="22" valign="TOP" class="calibre15"><p class="calibre9">The ISO week of the year (from the 1st Thursday of the new year)</p></td></tr><tr class="calibre12"><td width="7" valign="TOP" class="calibre15"><p class="calibre9">TH, th</p></td><td width="22" valign="TOP" class="calibre15"><p class="calibre9">The appropriate ordinal suffix for the preceding numeric value, upper or lowercase</p></td></tr><tr class="calibre12"><td width="7" valign="TOP" class="calibre15"><p class="calibre9">fm</p></td><td width="22" valign="TOP" class="calibre15"><p class="calibre9">Causes extra padding to be omitted, including whitespace, and extra zeroes</p></td></tr></tbody></table></div><p class="calibre9">The <span><i class="EMPHASIS">TH</i></span> suffix and <span><i class="EMPHASIS">FM</i></span> prefix must be
        directly adjacent to the value they are modifying. For example, to apply <span><i class="EMPHASIS">FM</i></span> to the
        <span><i class="EMPHASIS">Day</i></span> value, the complete sequence would be <span><i class="EMPHASIS">FMDay</i></span> (not <span><i class="EMPHASIS">FM Day</i></span>).
        Similarly, to attach the ordinal suffix to the <span><i class="EMPHASIS">DD</i></span> day of the month, the complete
        sequence would be <span><i class="EMPHASIS">DDTH</i></span> (not <span><i class="EMPHASIS">DD TH</i></span>).</p><p class="calibre9"><span><i class="EMPHASIS">Examples</i></span></p><pre class="SCREEN">booktown=# <tt class="REPLACEABLE"><b class="calibre10">SELECT to_char(now(), 'HH:MI PM') AS the_time;</b></tt>
 the_time
----------
 05:04 PM
(1 row)

booktown=# <tt class="REPLACEABLE"><b class="calibre10">SELECT to_char(now(), 'Dy (Day), Mon (Month)')</b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">         AS abbreviations,</b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">       to_char('yesterday'::timestamp, 'FMMonth FMDDth')</b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">         AS yesterday,</b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">       to_char('yesterday'::timestamp, 'FMDDth FMMonth')</b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">         AS "yesterday UK";</b></tt>
          abbreviations           |  yesterday  | yesterday UK
----------------------------------+-------------+--------------
 Sat (Saturday ), Sep (September) | August 31st | 31st August
(1 row)

booktown=# <tt class="REPLACEABLE"><b class="calibre10">SELECT isbn,     these must be</b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">       to_char(publication, 'FMMonth FMDDth, YYYY')</b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">         AS informal,</b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">       to_char(publication, 'YYYY-MM-DD') AS formal,</b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">       to_char(publication, 'Y,YYY "years" A.D.')</b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">         AS first_published</b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">      FROM editions LIMIT 3;</b></tt>
    isbn    |     informal     |   formal   | first_published
------------+------------------+------------+------------------
 039480001X | March 1st, 1957  | 1957-03-01 | 1,957 years A.D.
 0451160916 | August 1st, 1981 | 1981-08-01 | 1,981 years A.D.
 0394800753 | March 1st, 1949  | 1949-03-01 | 1,949 years A.D.
(3 rows)</pre></div><div class="NAVHEADER"><h3 class="AUTHOR"><a name="AEN11678" class="calibre8">to_date()</a></h3><pre class="SCREEN">to_date(<tt class="REPLACEABLE"><i class="EMPHASIS">s</i></tt> , <tt class="REPLACEABLE"><i class="EMPHASIS">f</i></tt> )</pre><p class="calibre9">The <tt class="REPLACEABLE">to_date()</tt> function accepts two arguments <tt class="REPLACEABLE"><i class="EMPHASIS">s</i></tt> and
        <tt class="REPLACEABLE"><i class="EMPHASIS">f</i></tt>, each of type <tt class="REPLACEABLE">text</tt>. The argument <tt class="REPLACEABLE"><i class="EMPHASIS">f</i></tt>
        describes, using the date-specific meta-characters detailed in <a href="x8973.htm#TIMESTAMPCONVERSIONFORMATTINGCHARACTERS">Table 5-15</a>,
        the format of the date described by the string <tt class="REPLACEABLE"><i class="EMPHASIS">s</i></tt>. The result is returned as type
        <tt class="REPLACEABLE">date</tt>.</p><p class="calibre9">While PostgreSQL can figure out a wide variety of date formats, it cannot support every arbitrary date format.
        The <tt class="REPLACEABLE">to_date()</tt> function insures that, provided the format can be described using the meta-
        characters from <a href="x8973.htm#NUMERICCONVERSIONFORMATTINGCHARACTERS">Table 5-14</a>, nearly any date format can be converted to a valid date value.</p><p class="calibre9"><span><i class="EMPHASIS">Example</i></span></p><pre class="SCREEN">booktown=# <tt class="REPLACEABLE"><b class="calibre10">SELECT date('198025thJune')</b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">         AS non_standard_date_format,</b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">       to_date('198025thJune', 'YYYYDDthMonth')</b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">         AS correct_interpretation;</b></tt>
 non_standard_date_format | correct_interpretation
--------------------------+------------------------
 2025-08-27               | 1980-06-25
(1 row)</pre></div><div class="NAVHEADER"><h3 class="AUTHOR"><a name="AEN11706" class="calibre8">to_number()</a></h3><pre class="SCREEN">to_number(<tt class="REPLACEABLE"><i class="EMPHASIS">s</i></tt> , <tt class="REPLACEABLE"><i class="EMPHASIS">f</i></tt> )</pre><p class="calibre9">The <tt class="REPLACEABLE">to_number</tt> function operates much like the inverse of the
        <tt class="REPLACEABLE">to_char()</tt> function for numbers. It accepts two arguments <tt class="REPLACEABLE"><i class="EMPHASIS">s</i></tt> and
        <tt class="REPLACEABLE"><i class="EMPHASIS">f</i></tt>, each of type <tt class="REPLACEABLE">text</tt>. The character string described by
        <tt class="REPLACEABLE"><i class="EMPHASIS">s</i></tt> should have its format described by <tt class="REPLACEABLE"><i class="EMPHASIS">f</i></tt>, using the same meta-characters shown
        in <a href="x8973.htm#NUMERICCONVERSIONFORMATTINGCHARACTERS">Table 5-14</a>. The result is returned as type
        <tt class="REPLACEABLE">numeric</tt>.</p><p class="calibre9"><span><i class="EMPHASIS">Examples</i></span></p><pre class="SCREEN">booktown=# <tt class="REPLACEABLE"><b class="calibre10">SELECT to_number('$2,900.00', 'L9G999D99')</b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">         AS monetary;</b></tt>
 monetary
----------
  2900.00
(1 row)

booktown=# <tt class="REPLACEABLE"><b class="calibre10">SELECT to_number('123,456,789.00', '999G999G999D99')</b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">         AS formatted,</b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">       to_number('123456789', '999999999')</b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">         AS just_digits,</b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">       to_number('00123456789', '00999999999')</b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">         AS leading_zeroes;</b></tt>
  formatted   | just_digits | leading_zeroes
--------------+-------------+----------------
 123456789.00 |   123456789 |      123456789
(1 row)</pre></div><div class="NAVHEADER"><h3 class="AUTHOR"><a name="AEN11736" class="calibre8">to_timestamp()</a></h3><pre class="SCREEN">to_timestamp(<tt class="REPLACEABLE"><i class="EMPHASIS">s</i></tt> , <tt class="REPLACEABLE"><i class="EMPHASIS">f</i></tt> )</pre><p class="calibre9">The <tt class="REPLACEABLE">to_timestamp()</tt> function accepts two arguments <tt class="REPLACEABLE"><i class="EMPHASIS">s</i></tt> and
        <tt class="REPLACEABLE"><i class="EMPHASIS">f</i></tt>, each of type <tt class="REPLACEABLE">text</tt>. The argument <tt class="REPLACEABLE"><i class="EMPHASIS">f</i></tt>
        describes, using the meta-characters detailed in <a href="x8973.htm#TIMESTAMPCONVERSIONFORMATTINGCHARACTERS">Table 5-15</a>,
        the format of the date and time described by the string <tt class="REPLACEABLE"><i class="EMPHASIS">s</i></tt>. The result is returned as type
        <tt class="REPLACEABLE">date</tt>.</p><p class="calibre9">Like <tt class="REPLACEABLE">to_date()</tt>, this function exists primarily as a means to be able to
        correctly interpret the format of a non-standard date and time string.</p><p class="calibre9"><span><i class="EMPHASIS">Example</i></span></p><pre class="SCREEN">booktown=# <tt class="REPLACEABLE"><b class="calibre10">SELECT timestamp('197825thJuly01:12am')</b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">         AS non_standard_timestamp,</b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10"> to_timestamp('197825July01:12am',</b></tt>
booktown(# <tt class="REPLACEABLE"><b class="calibre10"> 'YYYYDDFMMonthHH12:MIam')</b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">         AS correct_interpretation;</b></tt>
 non_standard_timestamp | correct_interpretation
------------------------+------------------------
 2025-06-27 01:12:00-07 | 1978-07-25 01:12:00-07
(1 row)</pre><div class="NAVHEADER"><blockquote class="NOTE"><p class="calibre9"><b class="calibre10">Note: </b>The use of the <span><i class="EMPHASIS">FM</i></span> modifier can be crucial in making sure the evaluation of values following
          a month or day name are interpreted correctly, as these names are normally padded to nine characters in length. Note
          that the <span><i class="EMPHASIS">FM</i></span> modifier must precede each element which you wish it to apply to, as it is not a
          "global" modifier.</p></blockquote></div></div><div class="NAVHEADER"><h3 class="AUTHOR"><a name="AEN11768" class="calibre8">timestamp()</a></h3><pre class="SCREEN">timestamp(<tt class="REPLACEABLE"><i class="EMPHASIS">d</i></tt> )
timestamp(<tt class="REPLACEABLE"><i class="EMPHASIS">d</i></tt> , <tt class="REPLACEABLE"><i class="EMPHASIS">t</i></tt> )</pre><p class="calibre9">The <tt class="REPLACEABLE">timestamp()</tt> function accepts either a single argument <tt class="REPLACEABLE"><i class="EMPHASIS">d</i></tt>
        of type <tt class="REPLACEABLE">date</tt>, or two arguments <tt class="REPLACEABLE"><i class="EMPHASIS">d</i></tt> and <tt class="REPLACEABLE"><i class="EMPHASIS">t</i></tt>, of
        types <tt class="REPLACEABLE">date</tt> and <tt class="REPLACEABLE">time</tt>, respectively. The arguments passed
        are converted to a value of type <tt class="REPLACEABLE">timestamp</tt> and returned. In the former case, the time
        is assumed to be midnight on the date specified.</p><p class="calibre9"><span><i class="EMPHASIS">Example</i></span></p><pre class="SCREEN">booktown=# <tt class="REPLACEABLE"><b class="calibre10">SELECT timestamp(date('now')) AS today_at_midnight,</b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">       timestamp(date('now'),</b></tt>
booktown(# <tt class="REPLACEABLE"><b class="calibre10">                 time('now')) AS right_now;</b></tt>
   today_at_midnight    |       right_now
------------------------+------------------------
 2001-09-01 00:00:00-07 | 2001-09-01 18:04:16-07
(1 row)</pre></div></div><div class="NAVHEADER"><h2 class="SECT"><a name="AGGREGATEFUNCTIONS" class="calibre8">Aggregate Functions</a></h2><p class="calibre9">An <span><i class="EMPHASIS">aggregate function</i></span> is a special kind of function that operates on <span><i class="EMPHASIS">several rows</i></span>
      of a query at once, returning a single result. Such functions are generally only used in queries which make
      use of the <tt class="REPLACEABLE">GROUP BY</tt> clause to associate rows together by like criteria, though they may
      be used in queries which only contain aggregate functions in their target list. When performing the latter, the
      aggregate function operates on <span><i class="EMPHASIS">all</i></span> selected rows from the result set. </p><p class="calibre9"><a href="x8973.htm#AGGREGATEFUNCTIONSTABLE">Table 5-16</a> provides an overview of PostgreSQL's supported aggregate functions. To see a
      complete list of aggregate functions, you may use the <tt class="REPLACEABLE">\da</tt> command within
      <span><i class="EMPHASIS">psql</i></span>.</p><div class="NAVHEADER"><a name="AGGREGATEFUNCTIONSTABLE"></a><p class="calibre9"><b class="calibre10">Table 5-16. Aggregate functions</b></p><table border="1" width="100%" class="calibre"><thead class="calibre11"><tr class="calibre12"><th width="5" valign="TOP" class="calibre13"><p class="calibre9">Function</p></th><th width="22" valign="TOP" class="calibre13"><p class="calibre9">Description</p></th></tr></thead><tbody class="calibre14"><tr class="calibre12"><td width="5" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE">avg(</tt><tt class="REPLACEABLE"><i class="EMPHASIS">expression</i></tt> )</p></td><td width="22" valign="TOP" class="calibre15"><p class="calibre9">Returns the average of the <tt class="REPLACEABLE"><i class="EMPHASIS">expression</i></tt> values from all rows in a group.</p></td></tr><tr class="calibre12"><td width="5" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE">count(</tt><tt class="REPLACEABLE"><i class="EMPHASIS">expression</i></tt> )</p></td><td width="22" valign="TOP" class="calibre15"><p class="calibre9">Returns the number of values, per each aggregated group of rows, for which <tt class="REPLACEABLE"><i class="EMPHASIS">expression</i></tt> is not <tt class="REPLACEABLE">NULL</tt></p></td></tr><tr class="calibre12"><td width="5" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE">max(</tt><tt class="REPLACEABLE"><i class="EMPHASIS">expression</i></tt> )</p></td><td width="22" valign="TOP" class="calibre15"><p class="calibre9">Returns the maximum value of <tt class="REPLACEABLE"><i class="EMPHASIS">expression</i></tt> in the grouped rows</p></td></tr><tr class="calibre12"><td width="5" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE">min(</tt><tt class="REPLACEABLE"><i class="EMPHASIS">expression</i></tt> )</p></td><td width="22" valign="TOP" class="calibre15"><p class="calibre9">Returns the minimum value of <tt class="REPLACEABLE"><i class="EMPHASIS">expression</i></tt> in the grouped rows</p></td></tr><tr class="calibre12"><td width="5" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE">stddev(</tt><tt class="REPLACEABLE"><i class="EMPHASIS">expression</i></tt> )</p></td><td width="22" valign="TOP" class="calibre15"><p class="calibre9">Returns the standard deviation of the values of <tt class="REPLACEABLE"><i class="EMPHASIS">expression</i></tt> in the grouped rows</p></td></tr><tr class="calibre12"><td width="5" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE">sum(</tt><tt class="REPLACEABLE"><i class="EMPHASIS">expression</i></tt> )</p></td><td width="22" valign="TOP" class="calibre15"><p class="calibre9">Returns the sum of the values of <tt class="REPLACEABLE"><i class="EMPHASIS">expression</i></tt> in the grouped rows</p></td></tr><tr class="calibre12"><td width="5" valign="TOP" class="calibre15"><p class="calibre9"><tt class="REPLACEABLE">variance(</tt><tt class="REPLACEABLE"><i class="EMPHASIS">expression</i></tt> )</p></td><td width="22" valign="TOP" class="calibre15"><p class="calibre9">Returns the variance of the values of <tt class="REPLACEABLE"><i class="EMPHASIS">expression</i></tt> in the grouped rows</p></td></tr></tbody></table></div><p class="calibre9">The following sections describe each aggregate function in further detail, including specific information on
      usage, examples, and valid input data types. In each of the functional explanations, the term
      <tt class="REPLACEABLE"><i class="EMPHASIS">expression</i></tt> refers to any valid identifier in a result set, or any valid expression operating on such
      an identifier.</p><div class="NAVHEADER"><h3 class="AUTHOR"><a name="AEN11880" class="calibre8">Aggregate expressions</a></h3><p class="calibre9">When calling an aggregate function, <span><i class="EMPHASIS">aggregate expressions</i></span> are employed to describe an
        expression from the result set created by the <tt class="REPLACEABLE">SELECT</tt> statement. An aggregate expression
        is similar to an ordinary SQL expression, but may be preceded by either the <tt class="REPLACEABLE">ALL</tt> or the
        <tt class="REPLACEABLE">DISTINCT</tt> keyword.</p><p class="calibre9">The use of the <tt class="REPLACEABLE">DISTINCT</tt> keyword in an aggregate expression causes only grouped
        rows with unique values (as described by the expression) to be evaluated by the function. Any duplicate rows will be
        suppressed. Similar to the use of the <tt class="REPLACEABLE">ALL</tt> keyword in a
        <tt class="REPLACEABLE">SELECT</tt> statement, the use of <tt class="REPLACEABLE">ALL</tt> in an aggregate
        expression has no function other than to make more explicit the request for all grouped rows to be evaluated to the
        function. <a href="x8973.htm#USINGAGGREGATEEXPRESSIONS">Example 5-19</a> demonstrates each of the aggregate expression forms.</p><div class="NAVHEADER"><a name="USINGAGGREGATEEXPRESSIONS"></a><p class="calibre9"><b class="calibre10">Example 5-19. Using aggregate expressions</b></p><pre class="SCREEN">booktown=# <tt class="REPLACEABLE"><b class="calibre10">SELECT count(location) AS set_locations,</b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">       count(ALL location) AS all_set_locations,</b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">       count(DISTINCT location) AS unique_locations,</b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">       count(*) AS all_rows</b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">       FROM subjects;</b></tt>
 set_locations | all_set_locations | unique_locations | all_rows
---------------+-------------------+------------------+----------
            15 |                15 |                7 |       16
(1 row)</pre></div><p class="calibre9">There is one final form of aggregate expression, as demonstrated by the <tt class="REPLACEABLE">all_rows</tt>
        result column in <a href="x8973.htm#USINGAGGREGATEEXPRESSIONS">Example 5-19</a>. When the asterisk (<tt class="REPLACEABLE">*</tt>)
        symbol is supplied as the aggregate expression, it instructs the aggregate function to evaluate <span><i class="EMPHASIS">all rows</i></span>,
        including rows with values of <tt class="REPLACEABLE">NULL</tt>, which are ordinarily ignored. Since
        the <tt class="REPLACEABLE">subjects</tt> table contains one row with a <tt class="REPLACEABLE">NULL</tt> value
        in the <tt class="REPLACEABLE">location</tt> column, the counted rows for <tt class="REPLACEABLE">location</tt>
        differ from those counted for <tt class="REPLACEABLE">*</tt>.</p><div class="NAVHEADER"><p class="calibre9"></p><table class="calibre" border="1" width="100%"><tr class="calibre1"><td class="calibre23"><b class="calibre10">Warning</b></td></tr><tr class="calibre1"><td class="calibre15"><p class="calibre9">Rows whose evaluated aggregate expression contain <tt class="REPLACEABLE">NULL</tt> values will not be evaluated
          by an aggregate function (with the exception of the <tt class="REPLACEABLE">count()</tt> function).</p></td></tr></table></div></div><div class="NAVHEADER"><h3 class="AUTHOR"><a name="AEN11916" class="calibre8">avg()</a></h3><pre class="SCREEN">avg(<tt class="REPLACEABLE"><i class="EMPHASIS">expression</i></tt> )</pre><p class="calibre9">The <tt class="REPLACEABLE">avg()</tt> function accepts an expression describing aggregated values that are
        either of any numeric type (<tt class="REPLACEABLE">numeric</tt>, <tt class="REPLACEABLE">bigint</tt>,
        <tt class="REPLACEABLE">smallint</tt>, <tt class="REPLACEABLE">real</tt>, or <tt class="REPLACEABLE">double precision</tt>),
        or of the <tt class="REPLACEABLE">interval</tt> time type.</p><p class="calibre9">The average, or mean, of the values described by <tt class="REPLACEABLE"><i class="EMPHASIS">expression</i></tt> in the grouped rows is returned.
        The resultant value is returned as a value of type <tt class="REPLACEABLE">numeric</tt> for expressions of type
        <tt class="REPLACEABLE">integer</tt> and <tt class="REPLACEABLE">double precision</tt> for expressions of type
        <tt class="REPLACEABLE">real</tt>. All other expression types cause a value of the same data type to be returned.</p><p class="calibre9"><span><i class="EMPHASIS">Examples</i></span></p><pre class="SCREEN">booktown=# <tt class="REPLACEABLE"><b class="calibre10">SELECT avg(cost) AS average_cost,</b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">       avg(retail) AS average_price,</b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">       avg(retail - cost) AS average_profit</b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">       FROM stock;</b></tt>
 average_cost  | average_price | average_profit
---------------+---------------+----------------
 24.8235294118 | 30.0088235294 |   5.1852941176
(1 row)

booktown=# <tt class="REPLACEABLE"><b class="calibre10">SELECT avg(cost) AS average_cost, p.name AS publisher</b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">       FROM (stock JOIN editions USING (isbn))</b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">       JOIN publishers AS p (publisher_id) </b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">                       USING (publisher_id)</b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">       GROUP BY p.name;</b></tt>
 average_cost  |          publisher
---------------+-----------------------------
 26.5000000000 | Ace Books
 19.0000000000 | Books of Wonder
 26.5000000000 | Doubleday
 25.0000000000 | HarperCollins
 18.0000000000 | Henry Holt &amp; Company, Inc.
 23.0000000000 | Kids Can Press
 23.0000000000 | Mojo Press
 20.0000000000 | Penguin
 23.0000000000 | Random House
 26.5000000000 | Roc
 26.0000000000 | Watson-Guptill Publications
(11 rows)</pre></div><div class="NAVHEADER"><h3 class="AUTHOR"><a name="AEN11950" class="calibre8">count()</a></h3><pre class="SCREEN">count(<tt class="REPLACEABLE"><i class="EMPHASIS">expression</i></tt> )</pre><p class="calibre9">The <tt class="REPLACEABLE">count()</tt> function returns the number of values in a set of aggregated rows
        where the <tt class="REPLACEABLE"><i class="EMPHASIS">expression</i></tt> is not <tt class="REPLACEABLE">NULL</tt>. The
        <tt class="REPLACEABLE">count()</tt> is not restricted as to the data type described by
        <tt class="REPLACEABLE"><i class="EMPHASIS">expression</i></tt>. It is important to understand that the <tt class="REPLACEABLE">count()</tt> function
        only counts values which are not <tt class="REPLACEABLE">NULL</tt>.  As a result, it is important to use an
        <tt class="REPLACEABLE"><i class="EMPHASIS">expression</i></tt> whose value will not be returned <tt class="REPLACEABLE">NULL</tt> in order for the
        <tt class="REPLACEABLE"><i class="EMPHASIS">expression</i></tt> to be meaningful to the counted results.</p><p class="calibre9">You may pass the asterisk (<tt class="REPLACEABLE">*</tt>) character to
        <tt class="REPLACEABLE">count()</tt> in order to simply count all rows in an aggregation (including rows with
        <tt class="REPLACEABLE">NULL</tt> values).</p><p class="calibre9"><span><i class="EMPHASIS">Examples</i></span></p><pre class="SCREEN">booktown=# <tt class="REPLACEABLE"><b class="calibre10">SELECT count(*) FROM editions;</b></tt>
 count
-------
    17
(1 row)

booktown=# <tt class="REPLACEABLE"><b class="calibre10">SELECT count(isbn), p.name</b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">       FROM editions JOIN publishers AS p (publisher_id)</b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">                     USING (publisher_id)</b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">       GROUP BY p.name</b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">       ORDER BY count DESC;</b></tt>
 count |            name
-------+-----------------------------
     3 | Random House
     2 | Ace Books
     2 | Doubleday
     2 | Roc
     1 | Books of Wonder
     1 | HarperCollins
     1 | Henry Holt &amp; Company, Inc.
     1 | Kids Can Press
     1 | Mojo Press
     1 | O'Reilly &amp; Associates
     1 | Penguin
     1 | Watson-Guptill Publications
(12 rows)</pre></div><div class="NAVHEADER"><h3 class="AUTHOR"><a name="AEN11982" class="calibre8">max()</a></h3><pre class="SCREEN">max(<tt class="REPLACEABLE"><i class="EMPHASIS">expression</i></tt> )</pre><p class="calibre9">The <tt class="REPLACEABLE">max()</tt> function returns the maximum found value described by
        <tt class="REPLACEABLE"><i class="EMPHASIS">expression</i></tt> in a set of aggregated rows. It accepts an <tt class="REPLACEABLE"><i class="EMPHASIS">expression</i></tt> that
        may represent any numeric, string, date, or time data type. The maximum is returned as a value of the same
        data type as the <tt class="REPLACEABLE"><i class="EMPHASIS">expression</i></tt>.</p><p class="calibre9"><span><i class="EMPHASIS">Examples</i></span></p><pre class="SCREEN">booktown=# <tt class="REPLACEABLE"><b class="calibre10">SELECT max(cost), max(retail) FROM stock;</b></tt>
  max  |  max
-------+-------
 36.00 | 46.95
(1 row)

booktown=# <tt class="REPLACEABLE"><b class="calibre10">SELECT max(retail), p.name</b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">       FROM (stock NATURAL JOIN editions)</b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">       JOIN publishers AS p (publisher_id)</b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">                       USING (publisher_id)</b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">       GROUP BY p.name</b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">       ORDER BY max DESC;</b></tt>
  max  |            name
-------+-----------------------------
 46.95 | Roc
 45.95 | Ace Books
 36.95 | Doubleday
 32.95 | Random House
 28.95 | HarperCollins
 28.95 | Watson-Guptill Publications
 24.95 | Mojo Press
 24.95 | Penguin
 23.95 | Henry Holt &amp; Company, Inc.
 23.95 | Kids Can Press
 21.95 | Books of Wonder
(11 rows)</pre></div><div class="NAVHEADER"><h3 class="AUTHOR"><a name="AEN12005" class="calibre8">min()</a></h3><pre class="SCREEN">min(<tt class="REPLACEABLE"><i class="EMPHASIS">expression</i></tt> )</pre><p class="calibre9">The <tt class="REPLACEABLE">min()</tt> function returns the minimum found value described by
        <tt class="REPLACEABLE"><i class="EMPHASIS">expression</i></tt> in a set of aggregated rows. It accepts an <tt class="REPLACEABLE"><i class="EMPHASIS">expression</i></tt> which
        may represent any <tt class="REPLACEABLE">numeric</tt>, <tt class="REPLACEABLE">string</tt>, <tt class="REPLACEABLE">date</tt>, or <tt class="REPLACEABLE">time</tt> data type. The minimum is returned as a value of the same
        data type as the <tt class="REPLACEABLE"><i class="EMPHASIS">expression</i></tt>.</p><p class="calibre9"><span><i class="EMPHASIS">Examples</i></span></p><pre class="SCREEN">booktown=# <tt class="REPLACEABLE"><b class="calibre10">SELECT min(cost), min(retail) FROM stock;</b></tt>
  min  |  min
-------+-------
 16.00 | 16.95
(1 row)

booktown=# <tt class="REPLACEABLE"><b class="calibre10">SELECT min(retail), p.name</b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">       FROM (stock NATURAL JOIN editions)</b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">       JOIN publishers AS p (publisher_id)</b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">                       USING (publisher_id)</b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">       GROUP BY p.name</b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">       ORDER BY min ASC;</b></tt>
  min  |            name
-------+-----------------------------
 16.95 | Random House
 21.95 | Ace Books
 21.95 | Books of Wonder
 22.95 | Roc
 23.95 | Henry Holt &amp; Company, Inc.
 23.95 | Kids Can Press
 24.95 | Mojo Press
 24.95 | Penguin
 28.95 | Doubleday
 28.95 | HarperCollins
 28.95 | Watson-Guptill Publications
(11 rows)</pre></div><div class="NAVHEADER"><h3 class="AUTHOR"><a name="AEN12032" class="calibre8">stddev()</a></h3><pre class="SCREEN">stddev(<tt class="REPLACEABLE"><i class="EMPHASIS">expression</i></tt> )</pre><p class="calibre9">The <tt class="REPLACEABLE">stddev()</tt> function accepts an expression describing values of any numeric type
        (<tt class="REPLACEABLE">numeric</tt>, <tt class="REPLACEABLE">bigint</tt>,
        <tt class="REPLACEABLE">smallint</tt>, <tt class="REPLACEABLE">real</tt>, or <tt class="REPLACEABLE">double precision</tt>),
        and returns the standard deviation of the values within the aggregated rows. The resultant value is returned as <tt class="REPLACEABLE">double precision</tt>
        for an expression describing floating point values, and <tt class="REPLACEABLE">numeric</tt> for all other types.</p><p class="calibre9"><span><i class="EMPHASIS">Examples</i></span></p><pre class="SCREEN">booktown=# <tt class="REPLACEABLE"><b class="calibre10">SELECT stddev(retail) FROM stock;</b></tt>
 stddev
--------
   8.46
(1 row)

booktown=# <tt class="REPLACEABLE"><b class="calibre10">SELECT stddev(retail), p.name</b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">       FROM (stock NATURAL JOIN editions)</b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">       JOIN publishers AS p ON (publisher_id = p.id)</b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">       GROUP BY p.name</b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">       ORDER BY stddev DESC</b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">       LIMIT 4;</b></tt>
 stddev |     name
--------+--------------
  16.97 | Ace Books
  16.97 | Roc
   8.02 | Random House
   5.66 | Doubleday
(4 rows)</pre></div><div class="NAVHEADER"><h3 class="AUTHOR"><a name="AEN12059" class="calibre8">sum()</a></h3><pre class="SCREEN">sum(<tt class="REPLACEABLE"><i class="EMPHASIS">expression</i></tt> )</pre><p class="calibre9">The <tt class="REPLACEABLE">sum()</tt> function accepts an expression describing values of any numeric type
        (<tt class="REPLACEABLE">numeric</tt>, <tt class="REPLACEABLE">bigint</tt>,
        <tt class="REPLACEABLE">smallint</tt>, <tt class="REPLACEABLE">real</tt>, or <tt class="REPLACEABLE">double precision</tt>),
        and returns the sum of the values within the aggregated rows. The returned value is of the type <tt class="REPLACEABLE">numeric</tt>
        when operating on values of type <tt class="REPLACEABLE">integer</tt> and <tt class="REPLACEABLE">double precision</tt> when
        operating on values of type <tt class="REPLACEABLE">real</tt>. The result is returned as the same data type as the values
        described by <tt class="REPLACEABLE"><i class="EMPHASIS">expression</i></tt> for all other data types.</p><p class="calibre9"><span><i class="EMPHASIS">Examples</i></span></p><pre class="SCREEN">booktown=# <tt class="REPLACEABLE"><b class="calibre10">SELECT sum(stock) FROM stock</b></tt>;
 sum
-----
 508
(1 row)

booktown=# <tt class="REPLACEABLE"><b class="calibre10">SELECT sum(stock), s.subject</b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">       FROM ((stock NATURAL JOIN editions)</b></tt>
booktown(# <tt class="REPLACEABLE"><b class="calibre10">       JOIN books ON (books.id = book_id))</b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">       JOIN subjects AS s</b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">                     ON (books.subject_id = s.id)</b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">       GROUP BY s.subject</b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">       ORDER BY sum DESC;</b></tt>
 sum |     subject
-----+------------------
 189 | Horror
 166 | Science Fiction
  91 | Children's Books
  28 | Drama
  18 | Classics
  16 | Arts
(6 rows)</pre></div><div class="NAVHEADER"><h3 class="AUTHOR"><a name="AEN12090" class="calibre8">variance()</a></h3><pre class="SCREEN">variance(<tt class="REPLACEABLE"><i class="EMPHASIS">expression</i></tt> )</pre><p class="calibre9">The <tt class="REPLACEABLE">variance()</tt> function accepts an expression describing values of any numeric type
        (<tt class="REPLACEABLE">numeric</tt>, <tt class="REPLACEABLE">bigint</tt>,
        <tt class="REPLACEABLE">smallint</tt>, <tt class="REPLACEABLE">real</tt>, or <tt class="REPLACEABLE">double precision</tt>)
        and returns the variance of the values within the aggregated rows. The variance is equivalent to the <tt class="REPLACEABLE">stddev()</tt> squared.
        The resultant value is returned as <tt class="REPLACEABLE">double precision</tt> for an expression describing
        floating-point values, and <tt class="REPLACEABLE">numeric</tt> for all other types.</p><p class="calibre9"><span><i class="EMPHASIS">Examples</i></span></p><pre class="SCREEN">booktown=# <tt class="REPLACEABLE"><b class="calibre10">SELECT variance(retail) FROM stock;</b></tt>
 variance
----------
    71.60
(1 row)

booktown=# <tt class="REPLACEABLE"><b class="calibre10">SELECT variance(retail), p.name</b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">       FROM (stock NATURAL JOIN editions)</b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">       JOIN publishers AS p</b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">                       ON (editions.publisher_id = p.id)</b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">       GROUP BY p.name</b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">       ORDER BY variance DESC</b></tt>
booktown-# <tt class="REPLACEABLE"><b class="calibre10">       LIMIT 4;</b></tt>
 variance |            name
----------+-----------------------------
   288.00 | Ace Books
   288.00 | Roc
    64.33 | Random House
    32.00 | Doubleday
(4 rows)</pre></div></div></div><div class="NAVHEADER"><hr width="100%" class="calibre6"/><table summary="Footer navigation table" width="100%" border="0" cellpadding="0" cellspacing="0" class="calibre"><tr class="calibre1"><td width="33%" valign="top" class="calibre3"><a href="c7547.htm" accesskey="P">Prev</a></td><td width="34%" valign="top" class="calibre4"><a href="book1.htm" accesskey="H">Home</a></td><td width="33%" valign="top" class="calibre5"><a href="c12119.htm" accesskey="N">Next</a></td></tr><tr class="calibre1"><td width="33%" valign="top" class="calibre3">Operators and Functions</td><td width="34%" valign="top" class="calibre4"><a href="c7547.htm" accesskey="U">Up</a></td><td width="33%" valign="top" class="calibre5">PostgreSQL Clients</td></tr></table></div></div>

{% endraw %}

